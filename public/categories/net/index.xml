<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Net on Matt Andreko</title>
    <link>https://www.mattandreko.com/categories/net/index.xml</link>
    <description>Recent content in Net on Matt Andreko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://www.mattandreko.com/categories/net/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Exploit Exercises - Protostar Net 3</title>
      <link>https://www.mattandreko.com/blog/2012-02-11-exploit-exercises-protostar-net-3/</link>
      <pubDate>Sat, 11 Feb 2012 10:11:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-02-11-exploit-exercises-protostar-net-3/</guid>
      <description>&lt;p&gt;The last in the Net series of &lt;a href=&#34;http://exploit-exercises.com/protostar&#34;&gt;Protostar&lt;/a&gt; is &lt;a href=&#34;http://exploit-exercises.com/protostar/net3&#34;&gt;Net 3&lt;/a&gt;.  It was of course the most difficult of all of them.  However, it still wasn&amp;rsquo;t too bad.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;First, we&amp;rsquo;re given the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;quot;../common/common.c&amp;quot;

#define NAME &amp;quot;net3&amp;quot;
#define UID 996
#define GID 996
#define PORT 2996

/*
 * Extract a null terminated string from the buffer 
 */

int get_string(char **result, unsigned char *buffer, u_int16_t len)
{
 unsigned char byte;

 byte = *buffer;

 if(byte &amp;gt; len) errx(1, &amp;quot;badly formed packet&amp;quot;);
 *result = malloc(byte);
 strcpy(*result, buffer + 1);

 return byte + 1;
}

/*
 * Check to see if we can log into the host
 */

int login(unsigned char *buffer, u_int16_t len)
{
 char *resource, *username, *password;
 int deduct;
 int success;

 if(len &amp;lt; 3) errx(1, &amp;quot;invalid login packet length&amp;quot;);

 resource = username = password = NULL;

 deduct = get_string(&amp;amp;resource, buffer, len);
 deduct += get_string(&amp;amp;username, buffer+deduct, len-deduct);
 deduct += get_string(&amp;amp;password, buffer+deduct, len-deduct);

 success = 0;
 success |= strcmp(resource, &amp;quot;net3&amp;quot;);
 success |= strcmp(username, &amp;quot;awesomesauce&amp;quot;);
 success |= strcmp(password, &amp;quot;password&amp;quot;);

 free(resource);
 free(username);
 free(password);

 return ! success;
}

void send_string(int fd, unsigned char byte, char *string)
{
 struct iovec v[3];
 u_int16_t len;
 int expected;

 len = ntohs(1 + strlen(string));

 v[0].iov_base = &amp;amp;len;
 v[0].iov_len = sizeof(len);

 v[1].iov_base = &amp;amp;byte;
 v[1].iov_len = 1;

 v[2].iov_base = string;
 v[2].iov_len = strlen(string);

 expected = sizeof(len) + 1 + strlen(string);

 if(writev(fd, v, 3) != expected) errx(1, &amp;quot;failed to write correct amount of bytes&amp;quot;);

}

void run(int fd)
{
 u_int16_t len;
 unsigned char *buffer;
 int loggedin;

 while(1) {
  nread(fd, &amp;amp;len, sizeof(len));
  len = ntohs(len);
  buffer = malloc(len);

  if(! buffer) errx(1, &amp;quot;malloc failure for %d bytes&amp;quot;, len);

  nread(fd, buffer, len);

  switch(buffer[0]) {
   case 23: 
    loggedin = login(buffer + 1, len - 1);
    send_string(fd, 33, loggedin ? &amp;quot;successful&amp;quot; : &amp;quot;failed&amp;quot;);
    break;

   default:
    send_string(fd, 58, &amp;quot;what you talkin about willis?&amp;quot;);
    break;
  }
 }
}

int main(int argc, char **argv, char **envp)
{
 int fd;
 char *username;

 /* Run the process as a daemon */
 background_process(NAME, UID, GID); 

 /* Wait for socket activity and return */
 fd = serve_forever(PORT);

 /* Set the client socket to STDIN, STDOUT, and STDERR */
 set_io(fd);

 /* Don&#39;t do this :&amp;gt; */
 srandom(time(NULL));

 run(fd);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now because my C is a bit rusty, and I didn&amp;rsquo;t always understand what was going on well, I re-wrote some of it to look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int get_string(char **result, unsigned char *buffer, u_int16_t len)
{
        unsigned char byte;

        byte = *buffer;

        printf(&amp;quot;[*] Byte as hex: %x\n&amp;quot;, byte);

        if(byte &amp;gt; len)
        {
                printf(&amp;quot;[*] Culprit: %s. %x is greater than %x\n&amp;quot;, &amp;amp;buffer, byte, len);
                errx(1, &amp;quot;badly formed packet&amp;quot;);
        }
        *result = malloc(byte);
        strcpy(*result, buffer + 1);

        printf(&amp;quot;[*] Returning: %i\n&amp;quot;, byte+1);
        return byte + 1;
}

int login(unsigned char *buffer, u_int16_t len)
{
        char *resource, *username, *password;
        int deduct;
        int success;

        if(len &amp;lt; 3) errx(1, &amp;quot;invalid login packet length&amp;quot;);

        resource = username = password = NULL;

        deduct = get_string(&amp;amp;resource, buffer, len);
        deduct += get_string(&amp;amp;username, buffer+deduct, len-deduct);
        deduct += get_string(&amp;amp;password, buffer+deduct, len-deduct);

        printf(&amp;quot;Resource: %s\n&amp;quot;, resource);
        printf(&amp;quot;Username: %s\n&amp;quot;, username);
        printf(&amp;quot;Password: %s\n&amp;quot;, password);

        success = 0;
        success |= strcmp(resource, &amp;quot;net3&amp;quot;);
        printf(&amp;quot;[*] Success (iteration 1): %x\n&amp;quot;, success);

        success |= strcmp(username, &amp;quot;awesomesauce&amp;quot;);
        printf(&amp;quot;[*] Success (iteration 2): %x\n&amp;quot;, success);

        success |= strcmp(password, &amp;quot;password&amp;quot;);
        printf(&amp;quot;[*] Success (iteration 3): %x\n&amp;quot;, success);


        free(resource);
        free(username);
        free(password);

        return ! success;
}

void main(int argc, char **argv)
{
        unsigned char *buffer;
        u_int16_t len;
        int loggedin;

        buffer = &amp;quot;string values go here yo&amp;quot;;

        len = strlen(buffer);

        loggedin = login(buffer, len);
        printf(&amp;quot;[*] Logged in: %x\n&amp;quot;, loggedin);

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allowed me to get a LOT more debug information, and not worry about my python program failing somewhere.&lt;/p&gt;

&lt;p&gt;In my analysis, I found this program to be the most complicated (of course).  It has a daemon running on port 2996.  It needs a login string to be sent to it just perfectly.  That login string needs to have the first byte be in little-endian format, the length of the login string.  Then each of the 3 strings, the resource, username, and password, must be sent with their length in little-endian prepended to them, and a null string terminator appended. However, before any of that login string is sent, it needs a control character of &amp;ldquo;\x17&amp;rdquo; (23) to go into the login logic.&lt;/p&gt;

&lt;p&gt;Eventually, I ended up with the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python

# Protostar Net 3
# http://exploit-exercises.com/protostar/net3
# Matt Andreko
# twitter: @mandreko
# contact: matt [at] mattandreko.com

from socket import *
from struct import *
from optparse import OptionParser
import select

def main(host, port):

 s = socket(AF_INET, SOCK_STREAM)
 s.connect((host, port))
 
 login_string = (&amp;quot;\x17&amp;quot; # \x17 = 23, which lets us by the switch statement.
                        # It appears to be a control character
     &amp;quot;\x05net3\x00&amp;quot; # Send the resource name, prepended with 
                    #it&#39;s length in hex, and appended with a null
                    # byte
     &amp;quot;\x0dawesomesauce\x00&amp;quot; # Send the user name, prepended with
                            # it&#39;s length in hex, and appended
                            # with a null byte
     &amp;quot;\x0apassword\x00&amp;quot;) # Send the password, prepended with
                         # it&#39;s length in hex, and appended 
                         # with a null byte

 login_length = len(login_string) # The initial byte needs to be the length
                                  # of the entire login string, so that it
                                  # knows how much memory to malloc()

 s.send(pack(&amp;quot;&amp;gt;H&amp;quot;, login_length))
 
 s.send(login_string)
 
 print s.recv(1024)
 
 s.close()

if __name__ == &amp;quot;__main__&amp;quot;:
    parser = OptionParser(&amp;quot;usage: %prog [options]&amp;quot;)
    parser.add_option(&amp;quot;-H&amp;quot;, &amp;quot;--host&amp;quot;, dest=&amp;quot;hostname&amp;quot;, default=&amp;quot;127.0.0.1&amp;quot;, 
     type=&amp;quot;string&amp;quot;, help=&amp;quot;Target to run against&amp;quot;)
    parser.add_option(&amp;quot;-p&amp;quot;, &amp;quot;--port&amp;quot;, dest=&amp;quot;portnum&amp;quot;, default=2996, 
     type=&amp;quot;int&amp;quot;, help=&amp;quot;Target port&amp;quot;)

    (options, args) = parser.parse_args()
    
    main(options.hostname, options.portnum)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I run that code, I get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Protostar&amp;gt;net3.py -H 192.168.1.132
 â™‚!successful
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is the last of all the Net challenges that I see documented.  But I do wonder, since in the virtual machine, there is a net4 binary. :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploit Exercises - Protostar Net 2</title>
      <link>https://www.mattandreko.com/blog/2012-02-10-exploit-exercises-protostar-net-2/</link>
      <pubDate>Fri, 10 Feb 2012 05:19:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-02-10-exploit-exercises-protostar-net-2/</guid>
      <description>&lt;p&gt;So far, these Net challenges in &lt;a href=&#34;http://exploit-exercises.com/protostar&#34;&gt;Protostar&lt;/a&gt; have been pretty easy.  This challenge, &lt;a href=&#34;http://exploit-exercises.com/protostar/net2&#34;&gt;Net 2&lt;/a&gt; got a small bit tougher.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;We are given the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;quot;../common/common.c&amp;quot;

#define NAME &amp;quot;net2&amp;quot;
#define UID 997
#define GID 997
#define PORT 2997

void run()
{
 unsigned int quad[4];
 int i;
 unsigned int result, wanted;

 result = 0;
 for(i = 0; i &amp;lt; 4; i++) {
  quad[i] = random();
  result += quad[i];

  if(write(0, &amp;amp;(quad[i]), sizeof(result)) != sizeof(result)) { 
   errx(1, &amp;quot;:(\n&amp;quot;);
  }
 }

 if(read(0, &amp;amp;wanted, sizeof(result)) != sizeof(result)) {
  errx(1, &amp;quot;:&amp;lt;\n&amp;quot;);
 }


 if(result == wanted) {
  printf(&amp;quot;you added them correctly\n&amp;quot;);
 } else {
  printf(&amp;quot;sorry, try again. invalid\n&amp;quot;);
 }
}

int main(int argc, char **argv, char **envp)
{
 int fd;
 char *username;

 /* Run the process as a daemon */
 background_process(NAME, UID, GID); 

 /* Wait for socket activity and return */
 fd = serve_forever(PORT);

 /* Set the client socket to STDIN, STDOUT, and STDERR */
 set_io(fd);

 /* Don&#39;t do this :&amp;gt; */
 srandom(time(NULL));

 run();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From this code, we can see a daemon is listening on port 2997.  It is going to output 4 random unsigned integers in little-endian format.  It then will expect the sum of all 4 of those integers to be returned in little-endian format.&lt;/p&gt;

&lt;p&gt;I was able to solve this with the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python

# Protostar Net 2
# http://exploit-exercises.com/protostar/net2
# Matt Andreko
# twitter: @mandreko
# contact: matt [at] mattandreko.com

from socket import *
from struct import *
from optparse import OptionParser

def main(host, port):

 s = socket(AF_INET, SOCK_STREAM)
 s.connect((host, port))

 sum = 0

 # Loop over the 4 unsigned integers being read in, and them to &amp;quot;sum&amp;quot;
 for x in range(4):
  data = s.recv(4)
  little_endian = int(unpack(&amp;quot;&amp;lt;I&amp;quot;, data)[0])
  print &amp;quot;[*] integer &amp;quot; + str(x) + &amp;quot;: &amp;quot; + str(little_endian)
  sum += little_endian

 print &amp;quot;[*] Sum: &amp;quot; + str(sum)

 # Handle integer overflow by doing a logical AND with 0xffffffff
 sum &amp;amp;= 0xffffffff

 # Convert the sum back to little-endian, to send back over the wire
 sum_packed = pack(&amp;quot;&amp;lt;I&amp;quot;, sum)

 s.send(sum_packed)
 print s.recv(1024)

 s.close()

if __name__ == &amp;quot;__main__&amp;quot;:
    parser = OptionParser(&amp;quot;usage: %prog [options]&amp;quot;)
    parser.add_option(&amp;quot;-H&amp;quot;, &amp;quot;--host&amp;quot;, dest=&amp;quot;hostname&amp;quot;, default=&amp;quot;127.0.0.1&amp;quot;, 
     type=&amp;quot;string&amp;quot;, help=&amp;quot;Target to run against&amp;quot;)
    parser.add_option(&amp;quot;-p&amp;quot;, &amp;quot;--port&amp;quot;, dest=&amp;quot;portnum&amp;quot;, default=2997, 
     type=&amp;quot;int&amp;quot;, help=&amp;quot;Target port&amp;quot;)

    (options, args) = parser.parse_args()
    
    main(options.hostname, options.portnum)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I run that code, I get the following output: &lt;pre class=&#34;brush: plain&#34;&gt;
C:\Protostar&amp;gt;net2.py -H 192.168.1.132
[&lt;em&gt;] integer 0: 1724850170
[&lt;/em&gt;] integer 1: 692469090
[&lt;em&gt;] integer 2: 630776982
[&lt;/em&gt;] integer 3: 1691529294
[*] Sum: 4739625536
you added them correctly
```&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploit Exercises - Protostar Net 1</title>
      <link>https://www.mattandreko.com/blog/2012-02-09-exploit-exercises-protostar-net-1/</link>
      <pubDate>Thu, 09 Feb 2012 05:43:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-02-09-exploit-exercises-protostar-net-1/</guid>
      <description>&lt;p&gt;Continuing with the &amp;ldquo;Net&amp;rdquo; series of &lt;a href=&#34;http://exploit-exercises.com/protostar&#34;&gt;Protostar&lt;/a&gt;, is Net 1.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;We are given the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;quot;../common/common.c&amp;quot;

#define NAME &amp;quot;net1&amp;quot;
#define UID 998
#define GID 998
#define PORT 2998

void run()
{
 char buf[12];
 char fub[12];
 char *q;

 unsigned int wanted;

 wanted = random();

 sprintf(fub, &amp;quot;%d&amp;quot;, wanted);

 if(write(0, &amp;amp;wanted, sizeof(wanted)) != sizeof(wanted)) { 
  errx(1, &amp;quot;:(\n&amp;quot;);
 }

 if(fgets(buf, sizeof(buf)-1, stdin) == NULL) {
  errx(1, &amp;quot;:(\n&amp;quot;);
 }

 q = strchr(buf, &#39;\r&#39;); if(q) *q = 0;
 q = strchr(buf, &#39;\n&#39;); if(q) *q = 0;

 if(strcmp(fub, buf) == 0) {
  printf(&amp;quot;you correctly sent the data\n&amp;quot;);
 } else {
  printf(&amp;quot;you didn&#39;t send the data properly\n&amp;quot;);
 }
}

int main(int argc, char **argv, char **envp)
{
 int fd;
 char *username;

 /* Run the process as a daemon */
 background_process(NAME, UID, GID); 

 /* Wait for socket activity and return */
 fd = serve_forever(PORT);

 /* Set the client socket to STDIN, STDOUT, and STDERR */
 set_io(fd);

 /* Don&#39;t do this :&amp;gt; */
 srandom(time(NULL));

 run();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similar to Net 0, it looks like this is another network daemon, this time running on port 2998.  It creates a random number (&amp;ldquo;wanted&amp;rdquo;).  It then outputs that in little-endian format, which it then expects to be returned to it in an ASCII string.&lt;/p&gt;

&lt;p&gt;I wrote up the following code to do exactly that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python

# Protostar Net 1
# http://exploit-exercises.com/protostar/net1
# Matt Andreko
# twitter: @mandreko
# contact: matt [at] mattandreko.com

from socket import *
from struct import *
from optparse import OptionParser

def main(host, port):

    s = socket(AF_INET, SOCK_STREAM)
    s.connect((host, port))

    # Read in the data
    data = s.recv(1024)
    print &amp;quot;[*] Data: &amp;quot; + data

    # Convert it from little-endian to an unsigned integer
    num = unpack(&amp;quot;&amp;lt;I&amp;quot;, data)[0]
    print &amp;quot;[*] Unpacked: &amp;quot; + str(num)

    #Send the ASCII representation back
    s.send(str(num))

    # Read response from server
    print s.recv(1024)
    s.close()

if __name__ == &amp;quot;__main__&amp;quot;:
    parser = OptionParser(&amp;quot;usage: %prog [options]&amp;quot;)
    parser.add_option(&amp;quot;-H&amp;quot;, &amp;quot;--host&amp;quot;, dest=&amp;quot;hostname&amp;quot;, default=&amp;quot;127.0.0.1&amp;quot;, 
        type=&amp;quot;string&amp;quot;, help=&amp;quot;Target to run against&amp;quot;)
    parser.add_option(&amp;quot;-p&amp;quot;, &amp;quot;--port&amp;quot;, dest=&amp;quot;portnum&amp;quot;, default=2998, 
        type=&amp;quot;int&amp;quot;, help=&amp;quot;Target port&amp;quot;)

    (options, args) = parser.parse_args()
    
    main(options.hostname, options.portnum)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output from the program looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
C:\Protostar&amp;gt;net1.py -H 192.168.1.132
[*] Data: H&amp;lt;Ã‡y
[*] Unpacked: 2038447176
you correctly sent the data
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Exploit Exercises - Protostar Net 0</title>
      <link>https://www.mattandreko.com/blog/2012-02-08-exploit-exercises-protostar-net-0/</link>
      <pubDate>Wed, 08 Feb 2012 18:31:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-02-08-exploit-exercises-protostar-net-0/</guid>
      <description>&lt;p&gt;I recently started looking at the &amp;ldquo;Net&amp;rdquo; problems in &lt;a href=&#34;http://exploit-exercises.com/protostar&#34;&gt;Protostar&lt;/a&gt;, and found them to be quite a fun change in pace.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Starting with &lt;a href=&#34;http://exploit-exercises.com/protostar/net0&#34;&gt;Net 0&lt;/a&gt;, we are given the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;quot;../common/common.c&amp;quot;

#define NAME &amp;quot;net0&amp;quot;
#define UID 999
#define GID 999
#define PORT 2999

void run()
{
 unsigned int i;
 unsigned int wanted;

 wanted = random();

 printf(&amp;quot;Please send &#39;%d&#39; as a little endian 32bit int\n&amp;quot;, wanted);

 if(fread(&amp;amp;i, sizeof(i), 1, stdin) == NULL) {
  errx(1, &amp;quot;:(\n&amp;quot;);
 }

 if(i == wanted) {
  printf(&amp;quot;Thank you sir/madam\n&amp;quot;);
 } else {
  printf(&amp;quot;I&#39;m sorry, you sent %d instead\n&amp;quot;, i);
 }
}

int main(int argc, char **argv, char **envp)
{
 int fd;
 char *username;

 /* Run the process as a daemon */
 background_process(NAME, UID, GID); 

 /* Wait for socket activity and return */
 fd = serve_forever(PORT);

 /* Set the client socket to STDIN, STDOUT, and STDERR */
 set_io(fd);

 /* Don&#39;t do this :&amp;gt; */
 srandom(time(NULL));

 run();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I started to analyze this program, to figure out what I was even supposed to do.  It looks like it&amp;rsquo;s a daemon that runs on port 2999.  When a connection is established, it will send a number, asking for it to be returned in little endian format.  It will either then display &amp;ldquo;Thank you sir/madam&amp;rdquo; or &amp;ldquo;I&amp;rsquo;m sorry, you send X instead&amp;rdquo;.  My goal was the prior.&lt;/p&gt;

&lt;p&gt;I ended up creating the following code to convert the number to little endian and send it back:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python

# Protostar Net 0
# http://exploit-exercises.com/protostar/net0
# Matt Andreko
# twitter: @mandreko
# contact: matt [at] mattandreko.com

from socket import *
from struct import *
from optparse import OptionParser

def main(host, port):

 # Open a connection and read
 s = socket(AF_INET, SOCK_STREAM)
 s.connect((host, port))

 data = s.recv(1024)
 print &amp;quot;[*] Data: &amp;quot; + data

 # Find the numeric string.
 # Note it can be variable length, so search between quotes
 start = data.find(&amp;quot;&#39;&amp;quot;) + 1
 end = data.find(&amp;quot;&#39;&amp;quot;, start)

 num = int(data[start:end])
 print &amp;quot;[*] Num: &amp;quot; + str(num)

 # Convert the number to little endian format and send it back
 little = pack(&amp;quot;&amp;lt;I&amp;quot;, num)
 s.send(little)

 # Read response from server
 print s.recv(1024)
 s.close()

if __name__ == &amp;quot;__main__&amp;quot;:
    parser = OptionParser(&amp;quot;usage: %prog [options]&amp;quot;)
    parser.add_option(&amp;quot;-H&amp;quot;, &amp;quot;--host&amp;quot;, dest=&amp;quot;hostname&amp;quot;, default=&amp;quot;127.0.0.1&amp;quot;, 
     type=&amp;quot;string&amp;quot;, help=&amp;quot;Target to run against&amp;quot;)
    parser.add_option(&amp;quot;-p&amp;quot;, &amp;quot;--port&amp;quot;, dest=&amp;quot;portnum&amp;quot;, default=2999, 
     type=&amp;quot;int&amp;quot;, help=&amp;quot;Target port&amp;quot;)

    (options, args) = parser.parse_args()
    
    main(options.hostname, options.portnum)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When ran, that program produced the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Protostar&amp;gt;net0.py -H 192.168.1.132
[*] Data: Please send &#39;634513062&#39; as a little endian 32bit int

[*] Num: 634513062
Thank you sir/madam
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>