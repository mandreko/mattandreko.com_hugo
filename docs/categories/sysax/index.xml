<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sysax on Matt Andreko</title>
    <link>http://test.andreko.net/categories/sysax/</link>
    <description>Recent content in Sysax on Matt Andreko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 08 Apr 2013 08:27:00 -0400</lastBuildDate>
    
	<atom:link href="http://test.andreko.net/categories/sysax/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sysax Multi Server 6.10 SSH DoS</title>
      <link>http://test.andreko.net/2013/04/08/sysax-multi-server-6.10-ssh-dos/</link>
      <pubDate>Mon, 08 Apr 2013 08:27:00 -0400</pubDate>
      
      <guid>http://test.andreko.net/2013/04/08/sysax-multi-server-6.10-ssh-dos/</guid>
      <description>I was recently fuzzing a bunch of SSH servers, hoping to find some remote code execution in a non-mainstream server. I ended up finding no code execution in the several that I tried, but I did find one pre-auth denial of service in Syax Multi Server 6.10.
Try this at home! The vulnerable version can be downloaded here for anyone that would like to duplicate the DoS conditions.
Understanding the Key Exchange I found that during the key exchange, where the SSH client and SSH server negotiate which ciphers to use, if you messed up just a single specific byte, the server would crash.</description>
    </item>
    
    <item>
      <title>Sysax 5.64 HTTP Remote Buffer Overflow</title>
      <link>http://test.andreko.net/2012/07/28/sysax-5.64-http-remote-buffer-overflow/</link>
      <pubDate>Sat, 28 Jul 2012 22:56:00 -0400</pubDate>
      
      <guid>http://test.andreko.net/2012/07/28/sysax-5.64-http-remote-buffer-overflow/</guid>
      <description>I have discovered a bug in the Sysax Multi-Server application. More specifically, it&amp;rsquo;s in the HTTP File Server service, which is not enabled by default. It has to be turned on by the admin for this exploit to properly function. The user in question also needs permission to create a directory.
In the Sysax service, the configuration would look like this:
 To trigger this vulnerability is pretty simple. Log into the HTTP File Server:</description>
    </item>
    
  </channel>
</rss>