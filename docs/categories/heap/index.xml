<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Heap on Matt Andreko</title>
    <link>http://test.andreko.net/categories/heap/</link>
    <description>Recent content in Heap on Matt Andreko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 12 Jan 2012 18:28:00 -0500</lastBuildDate>
    
	<atom:link href="http://test.andreko.net/categories/heap/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Exploit Exercises - Protostar Heap 1</title>
      <link>http://test.andreko.net/2012/01/12/exploit-exercises-protostar-heap-1/</link>
      <pubDate>Thu, 12 Jan 2012 18:28:00 -0500</pubDate>
      
      <guid>http://test.andreko.net/2012/01/12/exploit-exercises-protostar-heap-1/</guid>
      <description>This challenge was different for me. The previous heap challenge was easy to pretend it was just a simple stack overflow. This one worked very different, and brought some different challenges with it.
You first start out with the following code:
#include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; struct internet { int priority; char *name; }; void winner() { printf(&amp;quot;and we have a winner @ %d\n&amp;quot;, time(NULL)); } int main(int argc, char **argv) { struct internet *i1, *i2, *i3; i1 = malloc(sizeof(struct internet)); i1-&amp;gt;priority = 1; i1-&amp;gt;name = malloc(8); i2 = malloc(sizeof(struct internet)); i2-&amp;gt;priority = 2; i2-&amp;gt;name = malloc(8); strcpy(i1-&amp;gt;name, argv[1]); strcpy(i2-&amp;gt;name, argv[2]); printf(&amp;quot;and that&#39;s a wrap folks!</description>
    </item>
    
    <item>
      <title>Exploit Exercises - Protostar Heap 0</title>
      <link>http://test.andreko.net/2012/01/10/exploit-exercises-protostar-heap-0/</link>
      <pubDate>Tue, 10 Jan 2012 05:34:00 -0500</pubDate>
      
      <guid>http://test.andreko.net/2012/01/10/exploit-exercises-protostar-heap-0/</guid>
      <description>Now that I&amp;rsquo;ve completed all of the Stack section of protostar, I&amp;rsquo;ve started to move onto Heap. The first of these challenges, is Heap 0.
We are given the following code:
#include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; struct data { char name[64]; }; struct fp { int (*fp)(); }; void winner() { printf(&amp;quot;level passed\n&amp;quot;); } void nowinner() { printf(&amp;quot;level has not been passed\n&amp;quot;); } int main(int argc, char **argv) { struct data *d; struct fp *f; d = malloc(sizeof(struct data)); f = malloc(sizeof(struct fp)); f-&amp;gt;fp = nowinner; printf(&amp;quot;data is at %p, fp is at %p\n&amp;quot;, d, f); strcpy(d-&amp;gt;name, argv[1]); f-&amp;gt;fp(); }  I first needed to find the offset to where I could overwrite the EIP, so I connected to my other machine with the Metasploit Framework installed, and generated a unique string.</description>
    </item>
    
  </channel>
</rss>