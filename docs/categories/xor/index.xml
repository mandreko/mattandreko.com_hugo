<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xor on Matt Andreko</title>
    <link>http://test.andreko.net/categories/xor/index.xml</link>
    <description>Recent content in Xor on Matt Andreko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="http://test.andreko.net/categories/xor/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>OverTheWire Natas Level 11</title>
      <link>http://test.andreko.net/2012/11/10/overthewire-natas-level-11/</link>
      <pubDate>Sat, 10 Nov 2012 05:34:00 -0500</pubDate>
      
      <guid>http://test.andreko.net/2012/11/10/overthewire-natas-level-11/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.overthewire.org/wargames/natas/natas11.shtml&#34;&gt;Level 11&lt;/a&gt; of the &lt;a href=&#34;http://www.overthewire.org&#34;&gt;OverTheWire&lt;/a&gt; Natas wargames is a good one. It wasn&amp;rsquo;t one that could instantly be solved either. It involved programming, encryption, and HTTP. All fun!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;It started with a dialog to set the background color. When you click the &amp;ldquo;Set Color&amp;rdquo; button, it sets a cookie in your browser. But as the dialog says, the cookie is protected.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;http://test.andreko.net/img/natas11_1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I looked at the source code, as I always do. It was a little more lengthy than previous levels.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;html&amp;amp;gt;
&amp;amp;lt;head&amp;amp;gt;&amp;amp;lt;link&amp;amp;nbsp;rel=&amp;quot;stylesheet&amp;quot;&amp;amp;nbsp;type=&amp;quot;text/css&amp;quot;&amp;amp;nbsp;href=&amp;quot;http://www.overthewire.org/wargames/natas/level.css&amp;quot;&amp;amp;gt;&amp;amp;lt;/head&amp;amp;gt;
&amp;amp;lt;?

$defaultdata&amp;amp;nbsp;=&amp;amp;nbsp;array(&amp;amp;nbsp;&amp;quot;showpassword&amp;quot;=&amp;amp;gt;&amp;quot;no&amp;quot;,&amp;amp;nbsp;&amp;quot;bgcolor&amp;quot;=&amp;amp;gt;&amp;quot;#ffffff&amp;quot;);

function&amp;amp;nbsp;xor_encrypt($in)&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$key&amp;amp;nbsp;=&amp;amp;nbsp;&#39;&amp;amp;lt;censored&amp;amp;gt;&#39;;
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$text&amp;amp;nbsp;=&amp;amp;nbsp;$in;
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$outText&amp;amp;nbsp;=&amp;amp;nbsp;&#39;&#39;;

&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;//&amp;amp;nbsp;Iterate&amp;amp;nbsp;through&amp;amp;nbsp;each&amp;amp;nbsp;character
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;for($i=0;$i&amp;amp;lt;strlen($text);$i++)&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$outText&amp;amp;nbsp;.=&amp;amp;nbsp;$text[$i]&amp;amp;nbsp;^&amp;amp;nbsp;$key[$i&amp;amp;nbsp;%&amp;amp;nbsp;strlen($key)];
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}

&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;return&amp;amp;nbsp;$outText;
}

function&amp;amp;nbsp;loadData($def)&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;global&amp;amp;nbsp;$_COOKIE;
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$mydata&amp;amp;nbsp;=&amp;amp;nbsp;$def;
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;if(array_key_exists(&amp;quot;data&amp;quot;,&amp;amp;nbsp;$_COOKIE))&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$tempdata&amp;amp;nbsp;=&amp;amp;nbsp;json_decode(xor_encrypt(base64_decode($_COOKIE[&amp;quot;data&amp;quot;])),&amp;amp;nbsp;true);
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;if(is_array($tempdata)&amp;amp;nbsp;&amp;amp;amp;&amp;amp;amp;&amp;amp;nbsp;array_key_exists(&amp;quot;showpassword&amp;quot;,&amp;amp;nbsp;$tempdata)&amp;amp;nbsp;&amp;amp;amp;&amp;amp;amp;&amp;amp;nbsp;array_key_exists(&amp;quot;bgcolor&amp;quot;,&amp;amp;nbsp;$tempdata))&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;if&amp;amp;nbsp;(preg_match(&#39;/^#(?:[a-f\d]{6})$/i&#39;,&amp;amp;nbsp;$tempdata[&#39;bgcolor&#39;]))&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$mydata[&#39;showpassword&#39;]&amp;amp;nbsp;=&amp;amp;nbsp;$tempdata[&#39;showpassword&#39;];
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$mydata[&#39;bgcolor&#39;]&amp;amp;nbsp;=&amp;amp;nbsp;$tempdata[&#39;bgcolor&#39;];
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;return&amp;amp;nbsp;$mydata;
}

function&amp;amp;nbsp;saveData($d)&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;setcookie(&amp;quot;data&amp;quot;,&amp;amp;nbsp;base64_encode(xor_encrypt(json_encode($d))));
}

$data&amp;amp;nbsp;=&amp;amp;nbsp;loadData($defaultdata);

if(array_key_exists(&amp;quot;bgcolor&amp;quot;,$_REQUEST))&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;if&amp;amp;nbsp;(preg_match(&#39;/^#(?:[a-f\d]{6})$/i&#39;,&amp;amp;nbsp;$_REQUEST[&#39;bgcolor&#39;]))&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$data[&#39;bgcolor&#39;]&amp;amp;nbsp;=&amp;amp;nbsp;$_REQUEST[&#39;bgcolor&#39;];
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}
}

saveData($data);



?&amp;amp;gt;

&amp;amp;lt;h1&amp;amp;gt;natas11&amp;amp;lt;/h1&amp;amp;gt;
&amp;amp;lt;div&amp;amp;nbsp;id=&amp;quot;content&amp;quot;&amp;amp;gt;
&amp;amp;lt;body&amp;amp;nbsp;style=&amp;quot;background:&amp;amp;nbsp;&amp;amp;lt;?=$data[&#39;bgcolor&#39;]?&amp;amp;gt;;&amp;quot;&amp;amp;gt;
Cookies&amp;amp;nbsp;are&amp;amp;nbsp;protected&amp;amp;nbsp;with&amp;amp;nbsp;XOR&amp;amp;nbsp;encryption&amp;amp;lt;br/&amp;amp;gt;&amp;amp;lt;br/&amp;amp;gt;

&amp;amp;lt;?
if($data[&amp;quot;showpassword&amp;quot;]&amp;amp;nbsp;==&amp;amp;nbsp;&amp;quot;yes&amp;quot;)&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;print&amp;amp;nbsp;&amp;quot;The&amp;amp;nbsp;password&amp;amp;nbsp;for&amp;amp;nbsp;natas12&amp;amp;nbsp;is&amp;amp;nbsp;&amp;amp;lt;censored&amp;amp;gt;&amp;amp;lt;br&amp;amp;gt;&amp;quot;;
}

?&amp;amp;gt;

&amp;amp;lt;form&amp;amp;gt;
Background&amp;amp;nbsp;color:&amp;amp;nbsp;&amp;amp;lt;input&amp;amp;nbsp;name=bgcolor&amp;amp;nbsp;value=&amp;quot;&amp;amp;lt;?=$data[&#39;bgcolor&#39;]?&amp;amp;gt;&amp;quot;&amp;amp;gt;
&amp;amp;lt;input&amp;amp;nbsp;type=submit&amp;amp;nbsp;value=&amp;quot;Set&amp;amp;nbsp;color&amp;quot;&amp;amp;gt;
&amp;amp;lt;/form&amp;amp;gt;

&amp;amp;lt;div&amp;amp;nbsp;id=&amp;quot;viewsource&amp;quot;&amp;amp;gt;&amp;amp;lt;a&amp;amp;nbsp;href=&amp;quot;index-source.html&amp;quot;&amp;amp;gt;View&amp;amp;nbsp;sourcecode&amp;amp;lt;/a&amp;amp;gt;&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;/body&amp;amp;gt;
&amp;amp;lt;/html&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I viewed my cookie, using the amazing, &lt;a href=&#34;https://chrome.google.com/webstore/detail/edit-this-cookie/fngmhnnpilhplaeedifhccceomclgfbg&#34;&gt;Edit This Cookie&lt;/a&gt;, Chrome extension. Note that the last character is a &amp;ldquo;=&amp;rdquo;, but it&amp;rsquo;s encoded in the cookie as &amp;ldquo;%3D&amp;rdquo; due to encoding.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;http://test.andreko.net/img/natas11_2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I then took this cookie value and figured that maybe I could decode it. XOR encryption is reversible if you know &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; parts. You have A XOR KEY = C, for example. If you know A and C, you can derive KEY by XORing A and C together the same way. I ended up writing some code in PHP (since the original was in PHP)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;?php

function find_xor_key($decrypted, $encrypted) {
 // This value should be the return of xor_encrypt with a base64 decode
 $base64_decoded = base64_decode($encrypted);

 // Before xoring, get the decrypted value into the same state it was
 $json_encoded = json_encode($decrypted);

 $outText = &#39;&#39;;

 for($i=0; $i &amp;amp;lt; strlen($json_encoded); $i++) {
  $outText .= $json_encoded[$i] ^ $base64_decoded[$i % strlen($base64_decoded)];
 } 

 return $outText;
}

$cookie = array(&amp;quot;showpassword&amp;quot;=&amp;amp;gt;&amp;quot;no&amp;quot;, &amp;quot;bgcolor&amp;quot;=&amp;amp;gt;&amp;quot;#ffffff&amp;quot;);

$key = find_xor_key($cookie, &amp;quot;ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw=&amp;quot;) . &amp;quot;\n&amp;quot;;

print &amp;quot;XOR Key: &amp;quot; . $key . &amp;quot;\n&amp;quot;;

?&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When ran, this produces the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mandreko$ php natas11_decode.php 
XOR Key: qw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now I know that the XOR key is &amp;ldquo;qw8J&amp;rdquo;.  It&amp;rsquo;s repeated over and over, because the string it&amp;rsquo;s encoding is longer than the key, so it gets repeated, otherwise it&amp;rsquo;d be XOR to nothing.&lt;/p&gt;

&lt;p&gt;I then took this XOR key and tried to use it to encode a new cookie value, so that I could switch the &amp;ldquo;showpassword&amp;rdquo; value to &amp;ldquo;yes&amp;rdquo;.  I wrote the following script to do so.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;?php

function&amp;amp;nbsp;custom_xor($key,&amp;amp;nbsp;$in)&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$outText&amp;amp;nbsp;=&amp;amp;nbsp;&#39;&#39;;
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;for($i&amp;amp;nbsp;=&amp;amp;nbsp;0;&amp;amp;nbsp;$i&amp;amp;nbsp;&amp;amp;lt;&amp;amp;nbsp;strlen($in);&amp;amp;nbsp;$i++)&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$outText&amp;amp;nbsp;.=&amp;amp;nbsp;$in[$i]&amp;amp;nbsp;^&amp;amp;nbsp;$key[$i&amp;amp;nbsp;%&amp;amp;nbsp;strlen($key)];
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;return&amp;amp;nbsp;$outText;
}

$cookie&amp;amp;nbsp;=&amp;amp;nbsp;array(&amp;quot;showpassword&amp;quot;=&amp;amp;gt;&amp;quot;yes&amp;quot;,&amp;amp;nbsp;&amp;quot;bgcolor&amp;quot;=&amp;amp;gt;&amp;quot;#ffffff&amp;quot;);
$key&amp;amp;nbsp;=&amp;amp;nbsp;&amp;quot;qw8J&amp;quot;;

print&amp;amp;nbsp;&amp;quot;New&amp;amp;nbsp;Cookie&amp;amp;nbsp;Value:&amp;amp;nbsp;&amp;quot;&amp;amp;nbsp;.&amp;amp;nbsp;base64_encode(custom_xor($key,&amp;amp;nbsp;json_encode($cookie)))&amp;amp;nbsp;.&amp;amp;nbsp;&amp;quot;\n&amp;quot;;

?&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When ran, it produced the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mandreko$ php natas11_encode.php 
New Cookie Value: ClVLIh4ASCsCBE8lAxMacFMOXTlTWxooFhRXJh4FGnBTVF4sFxFeLFMK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I then pasted that cookie value into my Edit This Cookie extension, and refreshed the page.  It then presented me with the password to the next level.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;http://test.andreko.net/img/natas11_3.png&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
  </channel>
</rss>